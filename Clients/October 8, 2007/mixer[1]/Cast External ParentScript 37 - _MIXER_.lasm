property pMixerData
global ElementMgr, TextMgr, oDenizenManager, oStudioManager, oStudio

on new me
  [  0] pusharglist 0 ........................... <[]>
  [  2] pushlist ................................ <[]>
  [  3] setprop 12 .............................. pMixerData = []
  [  5] getparam 0 .............................. <me>
  [  7] pushcons 0 .............................. <"cc_mixer.window">
  [  9] pusharglistnoret 2 ...................... <me, "cc_mixer.window">
  [ 11] objcall 2 ............................... me.openWindow("cc_mixer.window")
  [ 13] getparam 0 .............................. <me>
  [ 15] pusharglistnoret 1 ...................... <me>
  [ 17] extcall 13 .............................. return me
  [ 19] ret
end

on updatecontent me
  [  0] getprop 12 .............................. <pMixerData>
  [  2] getobjprop 15 ........................... <pMixerData.blankCDCount>
  [  4] setlocal 0 .............................. myblankcdcount = pMixerData.blankCDCount
  [  6] getprop 12 .............................. <pMixerData>
  [  8] getobjprop 16 ........................... <pMixerData.mixes>
  [ 10] setlocal 1 .............................. mymixes = pMixerData.mixes
  [ 12] pushint8 1 .............................. <1>
  [ 14] setlocal 2
  [ 16] getlocal 2
  [ 18] pushint8 5 .............................. <5>
  [ 20] lteq
  [ 21] jmpifz [105] ............................ repeat with n = 1 to 5
  [ 24] getglobal 17 ............................ <TextMgr>
  [ 26] pushcons 1 .............................. <"MIXER_EMPTY">
  [ 28] pusharglist 2 ........................... <TextMgr, "MIXER_EMPTY">
  [ 30] objcall 18 .............................. <TextMgr.GetRefText("MIXER_EMPTY")>
  [ 32] setlocal 3 .............................. mytext = TextMgr.GetRefText("MIXER_EMPTY")
  [ 34] pushcons 2 .............................. <"{mixNumber}">
  [ 36] getlocal 3 .............................. <mytext>
  [ 38] pusharglist 2 ........................... <"{mixNumber}", mytext>
  [ 40] extcall 19 .............................. <offset("{mixNumber}", mytext)>
  [ 42] setlocal 4 .............................. mychar = offset("{mixNumber}", mytext)
  [ 44] getlocal 4 .............................. <mychar>
  [ 46] getlocal 4 .............................. <mychar>
  [ 48] pushint8 10 ............................. <10>
  [ 50] add ..................................... <mychar + 10>
  [ 51] pushzero ................................ <0>
  [ 52] pushzero ................................ <0>
  [ 53] pushzero ................................ <0>
  [ 54] pushzero ................................ <0>
  [ 55] pushzero ................................ <0>
  [ 56] pushzero ................................ <0>
  [ 57] pushint8 3 .............................. <3>
  [ 59] deletechunk 5 ........................... delete char mychar to mychar + 10 of mytext
  [ 61] getlocal 2 .............................. <n>
  [ 63] pusharglist 1 ........................... <n>
  [ 65] extcall 20 .............................. <string(n)>
  [ 67] pushcons 3 .............................. <" ">
  [ 69] joinstr ................................. <string(n) & " ">
  [ 70] getlocal 4 .............................. <mychar>
  [ 72] pushzero ................................ <0>
  [ 73] pushzero ................................ <0>
  [ 74] pushzero ................................ <0>
  [ 75] pushzero ................................ <0>
  [ 76] pushzero ................................ <0>
  [ 77] pushzero ................................ <0>
  [ 78] pushzero ................................ <0>
  [ 79] pushint8 3 .............................. <3>
  [ 81] putchunk 21 ............................. put string(n) & " " into char mychar of mytext
  [ 83] pushcons 4 .............................. <"cc.mixer.slot.text">
  [ 85] getlocal 2 .............................. <n>
  [ 87] joinstr ................................. <"cc.mixer.slot.text" & n>
  [ 88] pusharglist 1 ........................... <"cc.mixer.slot.text" & n>
  [ 90] extcall 21 .............................. <member("cc.mixer.slot.text" & n)>
  [ 92] getlocal 3 .............................. <mytext>
  [ 94] setobjprop 22 ........................... member("cc.mixer.slot.text" & n).text = mytext
  [ 96] pushint8 1
  [ 98] getlocal 2
  [100] add
  [101] setlocal 2
  [103] endrepeat [ 16]
  [105] pushint8 1 .............................. <1>
  [107] setlocal 2
  [109] getlocal 2
  [111] getlocal 1 .............................. <mymixes>
  [113] pusharglist 1 ........................... <mymixes>
  [115] extcall 23 .............................. <count(mymixes)>
  [117] lteq
  [118] jmpifz [151] ............................ repeat with n = 1 to count(mymixes)
  [121] pushcons 4 .............................. <"cc.mixer.slot.text">
  [123] getlocal 2 .............................. <n>
  [125] joinstr ................................. <"cc.mixer.slot.text" & n>
  [126] pusharglist 1 ........................... <"cc.mixer.slot.text" & n>
  [128] extcall 21 .............................. <member("cc.mixer.slot.text" & n)>
  [130] getlocal 1 .............................. <mymixes>
  [132] getlocal 2 .............................. <n>
  [134] pusharglist 2 ........................... <mymixes, n>
  [136] objcall 24 .............................. <mymixes[n]>
  [138] getobjprop 25 ........................... <mymixes[n].name>
  [140] setobjprop 22 ........................... member("cc.mixer.slot.text" & n).text = mymixes[n].name
  [142] pushint8 1
  [144] getlocal 2
  [146] add
  [147] setlocal 2
  [149] endrepeat [109]
  [151] ret
end

on openWindow me, sID, oArg
  [  0] getparam 0 .............................. <me>
  [  2] pusharglist 1 ........................... <me>
  [  4] objcall 3 ............................... <me.closeWindow()>
  [  6] setlocal 0 .............................. myRect = me.closeWindow()
  [  8] getglobal 31 ............................ <ElementMgr>
  [ 10] getparam 1 .............................. <sID>
  [ 12] getlocal 0 .............................. <myRect>
  [ 14] pusharglist 3 ........................... <ElementMgr, sID, myRect>
  [ 16] objcall 32 .............................. <ElementMgr.newwindow(sID, myRect)>
  [ 18] setlocal 1 .............................. mywindow = ElementMgr.newwindow(sID, myRect)
  [ 20] getparam 0 .............................. <me>
  [ 22] getlocal 1 .............................. <mywindow>
  [ 24] getparam 2 .............................. <oArg>
  [ 26] pusharglistnoret 3 ...................... <me, mywindow, oArg>
  [ 28] objcall 5 ............................... me.displayWindow(mywindow, oArg)
  [ 30] ret
end

on closeWindow me
  [  0] getglobal 31 ............................ <ElementMgr>
  [  2] pusharglist 1 ........................... <ElementMgr>
  [  4] objcall 37 .............................. <ElementMgr.getSequencer()>
  [  6] pusharglistnoret 1 ...................... <ElementMgr.getSequencer()>
  [  8] objcall 38 .............................. ElementMgr.getSequencer().stop()
  [ 10] pushint8 1 .............................. <1>
  [ 12] setlocal 0
  [ 14] getlocal 0
  [ 16] getglobal 31 ............................ <ElementMgr>
  [ 18] getobjprop 39 ........................... <ElementMgr.pOpenWindows>
  [ 20] pusharglist 1 ........................... <ElementMgr.pOpenWindows>
  [ 22] extcall 23 .............................. <count(ElementMgr.pOpenWindows)>
  [ 24] lteq
  [ 25] jmpifz [ 68] ............................ repeat with n = 1 to count(ElementMgr.pOpenWindows)
  [ 28] getglobal 31 ............................ <ElementMgr>
  [ 30] getobjprop 39 ........................... <ElementMgr.pOpenWindows>
  [ 32] getlocal 0 .............................. <n>
  [ 34] pusharglist 2 ........................... <ElementMgr.pOpenWindows, n>
  [ 36] extcall 40 .............................. <getPropAt(ElementMgr.pOpenWindows, n)>
  [ 38] pushcons 5 .............................. <"mixer">
  [ 40] containsstr ............................. <getPropAt(ElementMgr.pOpenWindows, n) contains "mixer">
  [ 41] jmpifz [ 59] ............................ if getPropAt(ElementMgr.pOpenWindows, n) contains "mixer" then
  [ 44] getglobal 31 ............................ <ElementMgr>
  [ 46] pushsymb 39 ............................. <#pOpenWindows>
  [ 48] getlocal 0 .............................. <n>
  [ 50] pusharglist 3 ........................... <ElementMgr, #pOpenWindows, n>
  [ 52] objcall 41 .............................. <ElementMgr.pOpenWindows[n]>
  [ 54] setlocal 1 .............................. mywindow = ElementMgr.pOpenWindows[n]
  [ 56] jmp [ 68] ............................... exit repeat
  [ 59] pushint8 1
  [ 61] getlocal 0
  [ 63] add
  [ 64] setlocal 0
  [ 66] endrepeat [ 14]
  [ 68] getlocal 1 .............................. <mywindow>
  [ 70] pusharglist 1 ........................... <mywindow>
  [ 72] extcall 42 .............................. <voidp(mywindow)>
  [ 74] jmpifz [ 81] ............................ if voidp(mywindow) then
  [ 77] pusharglistnoret 0 ...................... <>
  [ 79] extcall 13 .............................. return 
  [ 81] getlocal 1 .............................. <mywindow>
  [ 83] pusharglist 1 ........................... <mywindow>
  [ 85] objcall 3 ............................... <mywindow.closeWindow()>
  [ 87] setlocal 2 .............................. iLastRect = mywindow.closeWindow()
  [ 89] getglobal 31 ............................ <ElementMgr>
  [ 91] pusharglist 0 ........................... <>
  [ 93] extcall 43 .............................. <VOID>
  [ 95] setobjprop 44 ........................... ElementMgr.oMixer = VOID
  [ 97] pusharglist 0 ........................... <>
  [ 99] extcall 43 .............................. <VOID>
  [101] setparam 0 .............................. me = VOID
  [103] getlocal 2 .............................. <iLastRect>
  [105] pusharglistnoret 1 ...................... <iLastRect>
  [107] extcall 13 .............................. return iLastRect
  [109] ret
end

on getOpenWindow me
  [  0] pushint8 1 .............................. <1>
  [  2] setlocal 0
  [  4] getlocal 0
  [  6] getglobal 31 ............................ <ElementMgr>
  [  8] getobjprop 39 ........................... <ElementMgr.pOpenWindows>
  [ 10] pusharglist 1 ........................... <ElementMgr.pOpenWindows>
  [ 12] extcall 23 .............................. <count(ElementMgr.pOpenWindows)>
  [ 14] lteq
  [ 15] jmpifz [ 64] ............................ repeat with n = 1 to count(ElementMgr.pOpenWindows)
  [ 18] getglobal 31 ............................ <ElementMgr>
  [ 20] getobjprop 39 ........................... <ElementMgr.pOpenWindows>
  [ 22] getlocal 0 .............................. <n>
  [ 24] pusharglist 2 ........................... <ElementMgr.pOpenWindows, n>
  [ 26] extcall 40 .............................. <getPropAt(ElementMgr.pOpenWindows, n)>
  [ 28] pushcons 5 .............................. <"mixer">
  [ 30] containsstr ............................. <getPropAt(ElementMgr.pOpenWindows, n) contains "mixer">
  [ 31] jmpifz [ 55] ............................ if getPropAt(ElementMgr.pOpenWindows, n) contains "mixer" then
  [ 34] getglobal 31 ............................ <ElementMgr>
  [ 36] pushsymb 39 ............................. <#pOpenWindows>
  [ 38] getlocal 0 .............................. <n>
  [ 40] pusharglist 3 ........................... <ElementMgr, #pOpenWindows, n>
  [ 42] objcall 41 .............................. <ElementMgr.pOpenWindows[n]>
  [ 44] setlocal 1 .............................. mywindow = ElementMgr.pOpenWindows[n]
  [ 46] getlocal 1 .............................. <mywindow>
  [ 48] pusharglistnoret 1 ...................... <mywindow>
  [ 50] extcall 13 .............................. return mywindow
  [ 52] jmp [ 64] ............................... exit repeat
  [ 55] pushint8 1
  [ 57] getlocal 0
  [ 59] add
  [ 60] setlocal 0
  [ 62] endrepeat [  4]
  [ 64] ret
end

on displayWindow me, mywindow, oArg
  [  0] ret
end

on displayCurrentWindow me
  [  0] getparam 0 .............................. <me>
  [  2] getparam 0 .............................. <me>
  [  4] pusharglist 1 ........................... <me>
  [  6] objcall 4 ............................... <me.getOpenWindow()>
  [  8] pusharglistnoret 2 ...................... <me, me.getOpenWindow()>
  [ 10] objcall 5 ............................... me.displayWindow(me.getOpenWindow())
  [ 12] ret
end

on playMix me, iIndex
  [  0] getparam 0 .............................. <me>
  [  2] getchainedprop 12 ....................... <me.pMixerData>
  [  4] pushsymb 16 ............................. <#mixes>
  [  6] pusharglist 2 ........................... <me.pMixerData, #mixes>
  [  8] objcall 23 .............................. <me.pMixerData.mixes.count>
  [ 10] pushzero ................................ <0>
  [ 11] eq ...................................... <me.pMixerData.mixes.count = 0>
  [ 12] jmpifz [ 20] ............................ if me.pMixerData.mixes.count = 0 then
  [ 15] pushzero ................................ <0>
  [ 16] pusharglistnoret 1 ...................... <0>
  [ 18] extcall 13 .............................. return 0
  [ 20] getparam 0 .............................. <me>
  [ 22] getchainedprop 12 ....................... <me.pMixerData>
  [ 24] pushsymb 16 ............................. <#mixes>
  [ 26] pusharglist 2 ........................... <me.pMixerData, #mixes>
  [ 28] objcall 23 .............................. <me.pMixerData.mixes.count>
  [ 30] getparam 1 .............................. <iIndex>
  [ 32] lt ...................................... <me.pMixerData.mixes.count < iIndex>
  [ 33] jmpifz [ 41] ............................ if me.pMixerData.mixes.count < iIndex then
  [ 36] pushzero ................................ <0>
  [ 37] pusharglistnoret 1 ...................... <0>
  [ 39] extcall 13 .............................. return 0
  [ 41] getparam 0 .............................. <me>
  [ 43] getchainedprop 12 ....................... <me.pMixerData>
  [ 45] pushsymb 16 ............................. <#mixes>
  [ 47] getparam 1 .............................. <iIndex>
  [ 49] pusharglist 3 ........................... <me.pMixerData, #mixes, iIndex>
  [ 51] objcall 46 .............................. <me.pMixerData.mixes[iIndex]>
  [ 53] getobjprop 47 ........................... <me.pMixerData.mixes[iIndex].song>
  [ 55] setlocal 0 .............................. sSongData = me.pMixerData.mixes[iIndex].song
  [ 57] getglobal 31 ............................ <ElementMgr>
  [ 59] pusharglist 1 ........................... <ElementMgr>
  [ 61] objcall 37 .............................. <ElementMgr.getSequencer()>
  [ 63] getlocal 0 .............................. <sSongData>
  [ 65] pusharglistnoret 2 ...................... <ElementMgr.getSequencer(), sSongData>
  [ 67] objcall 48 .............................. ElementMgr.getSequencer().loadOddCastSequence(sSongData)
  [ 69] getglobal 31 ............................ <ElementMgr>
  [ 71] pusharglist 1 ........................... <ElementMgr>
  [ 73] objcall 37 .............................. <ElementMgr.getSequencer()>
  [ 75] pusharglistnoret 1 ...................... <ElementMgr.getSequencer()>
  [ 77] objcall 49 .............................. ElementMgr.getSequencer().play()
  [ 79] pushint8 1 .............................. <1>
  [ 81] pusharglistnoret 1 ...................... <1>
  [ 83] extcall 13 .............................. return 1
  [ 85] ret
end

on stopMix me
  [  0] getglobal 31 ............................ <ElementMgr>
  [  2] pusharglist 1 ........................... <ElementMgr>
  [  4] objcall 37 .............................. <ElementMgr.getSequencer()>
  [  6] pusharglistnoret 1 ...................... <ElementMgr.getSequencer()>
  [  8] objcall 38 .............................. ElementMgr.getSequencer().stop()
  [ 10] ret
end

on getMixNumber me, iIndex
  [  0] getparam 0 .............................. <me>
  [  2] getchainedprop 12 ....................... <me.pMixerData>
  [  4] pushsymb 16 ............................. <#mixes>
  [  6] pusharglist 2 ........................... <me.pMixerData, #mixes>
  [  8] objcall 23 .............................. <me.pMixerData.mixes.count>
  [ 10] getparam 1 .............................. <iIndex>
  [ 12] lt ...................................... <me.pMixerData.mixes.count < iIndex>
  [ 13] jmpifz [ 20] ............................ if me.pMixerData.mixes.count < iIndex then
  [ 16] pusharglistnoret 0 ...................... <>
  [ 18] extcall 13 .............................. return 
  [ 20] getparam 0 .............................. <me>
  [ 22] getchainedprop 12 ....................... <me.pMixerData>
  [ 24] pushsymb 16 ............................. <#mixes>
  [ 26] getparam 1 .............................. <iIndex>
  [ 28] pusharglist 3 ........................... <me.pMixerData, #mixes, iIndex>
  [ 30] objcall 46 .............................. <me.pMixerData.mixes[iIndex]>
  [ 32] getobjprop 52 ........................... <me.pMixerData.mixes[iIndex].mixNumber>
  [ 34] pusharglistnoret 1 ...................... <me.pMixerData.mixes[iIndex].mixNumber>
  [ 36] extcall 13 .............................. return me.pMixerData.mixes[iIndex].mixNumber
  [ 38] ret
end

on replaceChar mString, mSearchCharacter, mReplaceCharacter
  [  0] pushcons 6 .............................. <EMPTY>
  [  2] setlocal 0 .............................. str = EMPTY
  [  4] pushint8 1 .............................. <1>
  [  6] setlocal 1
  [  8] getlocal 1
  [ 10] getparam 0 .............................. <mString>
  [ 12] getobjprop 126 .......................... <mString.length>
  [ 14] lteq
  [ 15] jmpifz [ 68] ............................ repeat with i = 1 to mString.length
  [ 18] getlocal 1 .............................. <i>
  [ 20] pushzero ................................ <0>
  [ 21] pushzero ................................ <0>
  [ 22] pushzero ................................ <0>
  [ 23] pushzero ................................ <0>
  [ 24] pushzero ................................ <0>
  [ 25] pushzero ................................ <0>
  [ 26] pushzero ................................ <0>
  [ 27] getparam 0 .............................. <mString>
  [ 29] getchunk ................................ <char i of mString>
  [ 30] getparam 1 .............................. <mSearchCharacter>
  [ 32] eq ...................................... <char i of mString = mSearchCharacter>
  [ 33] jmpifz [ 44] ............................ if char i of mString = mSearchCharacter then
  [ 36] getparam 2 .............................. <mReplaceCharacter>
  [ 38] pushzero ................................ <0>
  [ 39] put 37 .................................. put mReplaceCharacter after str
  [ 41] jmp [ 59] ............................... next repeat
  [ 44] getlocal 1 .............................. <i>
  [ 46] pushzero ................................ <0>
  [ 47] pushzero ................................ <0>
  [ 48] pushzero ................................ <0>
  [ 49] pushzero ................................ <0>
  [ 50] pushzero ................................ <0>
  [ 51] pushzero ................................ <0>
  [ 52] pushzero ................................ <0>
  [ 53] getparam 0 .............................. <mString>
  [ 55] getchunk ................................ <char i of mString>
  [ 56] pushzero ................................ <0>
  [ 57] put 37 .................................. put char i of mString after str
  [ 59] pushint8 1
  [ 61] getlocal 1
  [ 63] add
  [ 64] setlocal 1
  [ 66] endrepeat [  8]
  [ 68] getlocal 0 .............................. <str>
  [ 70] pusharglistnoret 1 ...................... <str>
  [ 72] extcall 13 .............................. return str
  [ 74] ret
end

on editMix me, iIndex
  [  0] pushzero ................................ <0>
  [  1] setlocal 0 .............................. bBlankMix = 0
  [  3] getparam 0 .............................. <me>
  [  5] getchainedprop 12 ....................... <me.pMixerData>
  [  7] pushsymb 16 ............................. <#mixes>
  [  9] pusharglist 2 ........................... <me.pMixerData, #mixes>
  [ 11] objcall 23 .............................. <me.pMixerData.mixes.count>
  [ 13] pushzero ................................ <0>
  [ 14] eq ...................................... <me.pMixerData.mixes.count = 0>
  [ 15] jmpifz [ 22] ............................ if me.pMixerData.mixes.count = 0 then
  [ 18] pushint8 1 .............................. <1>
  [ 20] setlocal 0 .............................. bBlankMix = 1
  [ 22] getparam 0 .............................. <me>
  [ 24] getchainedprop 12 ....................... <me.pMixerData>
  [ 26] pushsymb 16 ............................. <#mixes>
  [ 28] pusharglist 2 ........................... <me.pMixerData, #mixes>
  [ 30] objcall 23 .............................. <me.pMixerData.mixes.count>
  [ 32] getparam 1 .............................. <iIndex>
  [ 34] lt ...................................... <me.pMixerData.mixes.count < iIndex>
  [ 35] jmpifz [ 42] ............................ if me.pMixerData.mixes.count < iIndex then
  [ 38] pushint8 1 .............................. <1>
  [ 40] setlocal 0 .............................. bBlankMix = 1
  [ 42] getglobal 31 ............................ <ElementMgr>
  [ 44] pusharglist 1 ........................... <ElementMgr>
  [ 46] objcall 37 .............................. <ElementMgr.getSequencer()>
  [ 48] pusharglistnoret 1 ...................... <ElementMgr.getSequencer()>
  [ 50] objcall 38 .............................. ElementMgr.getSequencer().stop()
  [ 52] getglobal 31 ............................ <ElementMgr>
  [ 54] pushcons 7 .............................. <"paused.window">
  [ 56] pusharglistnoret 2 ...................... <ElementMgr, "paused.window">
  [ 58] objcall 32 .............................. ElementMgr.newwindow("paused.window")
  [ 60] getparam 0 .............................. <me>
  [ 62] pushsymb 12 ............................. <#pMixerData>
  [ 64] pushsymb 53 ............................. <#sessionId>
  [ 66] pusharglist 3 ........................... <me, #pMixerData, #sessionId>
  [ 68] objcall 41 .............................. <me.pMixerData[#sessionId]>
  [ 70] setlocal 1 .............................. sSessionId = me.pMixerData[#sessionId]
  [ 72] getlocal 0 .............................. <bBlankMix>
  [ 74] not ..................................... <not bBlankMix>
  [ 75] jmpifz [112] ............................ if not bBlankMix then
  [ 78] getparam 0 .............................. <me>
  [ 80] getchainedprop 12 ....................... <me.pMixerData>
  [ 82] pushsymb 16 ............................. <#mixes>
  [ 84] getparam 1 .............................. <iIndex>
  [ 86] pusharglist 3 ........................... <me.pMixerData, #mixes, iIndex>
  [ 88] objcall 41 .............................. <me.pMixerData.mixes[iIndex]>
  [ 90] setlocal 2 .............................. aMix = me.pMixerData.mixes[iIndex]
  [ 92] getlocal 2 .............................. <aMix>
  [ 94] pushsymb 54 ............................. <#mixid>
  [ 96] pusharglist 2 ........................... <aMix, #mixid>
  [ 98] objcall 24 .............................. <aMix[#mixid]>
  [100] setlocal 3 .............................. iMixId = aMix[#mixid]
  [102] getlocal 2 .............................. <aMix>
  [104] pushsymb 52 ............................. <#mixNumber>
  [106] pusharglist 2 ........................... <aMix, #mixNumber>
  [108] objcall 24 .............................. <aMix[#mixNumber]>
  [110] setlocal 4 .............................. iMixNumber = aMix[#mixNumber]
  [112] getglobal 56 ............................ <oStudio>
  [114] pusharglist 1 ........................... <oStudio>
  [116] extcall 42 .............................. <voidp(oStudio)>
  [118] not ..................................... <not voidp(oStudio)>
  [119] jmpifz [308] ............................ if not voidp(oStudio) then
  [122] getglobal 56 ............................ <oStudio>
  [124] pusharglist 1 ........................... <oStudio>
  [126] objcall 57 .............................. <oStudio.getMixerServer()>
  [128] setlocal 5 .............................. sUrl = oStudio.getMixerServer()
  [130] getlocal 0 .............................. <bBlankMix>
  [132] not ..................................... <not bBlankMix>
  [133] jmpifz [143] ............................ if not bBlankMix then / else
  [136] getlocal 4 .............................. <iMixNumber>
  [138] setlocal 6 .............................. mNum = iMixNumber
  [140] jmp [147]
  [143] getparam 1 .............................. <iIndex>
  [145] setlocal 6 .............................. mNum = iIndex
  [147] getlocal 0 .............................. <bBlankMix>
  [149] not ..................................... <not bBlankMix>
  [150] jmpifz [189] ............................ if not bBlankMix then / else
  [153] getlocal 3 .............................. <iMixId>
  [155] setlocal 7 .............................. MID = iMixId
  [157] pushsymb 114 ............................ <#door>
  [159] pushint8 4 .............................. <4>
  [161] pushsymb 115 ............................ <#client>
  [163] pushint8 4 .............................. <4>
  [165] pushsymb 33 ............................. <#sID>
  [167] getlocal 1 .............................. <sSessionId>
  [169] pushsymb 116 ............................ <#mNum>
  [171] getlocal 6 .............................. <mNum>
  [173] pushsymb 117 ............................ <#MID>
  [175] getlocal 7 .............................. <MID>
  [177] pusharglist 10 .......................... <[#door: 4, #client: 4, #sID: sSessionId, #mNum: mNum, #MID: MID]>
  [179] pushproplist ............................ <[#door: 4, #client: 4, #sID: sSessionId, #mNum: mNum, #MID: MID]>
  [180] pusharglist 1 ........................... <[#door: 4, #client: 4, #sID: sSessionId, #mNum: mNum, #MID: MID]>
  [182] extcall 113 ............................. <urlEncode([#door: 4, #client: 4, #sID: sSessionId, #mNum: mNum, #MID: MID])>
  [184] setlocal 8 .............................. sParams = urlEncode([#door: 4, #client: 4, #sID: sSessionId, #mNum: mNum, #MID: MID])
  [186] jmp [214]
  [189] pushsymb 114 ............................ <#door>
  [191] pushint8 4 .............................. <4>
  [193] pushsymb 115 ............................ <#client>
  [195] pushint8 4 .............................. <4>
  [197] pushsymb 33 ............................. <#sID>
  [199] getlocal 1 .............................. <sSessionId>
  [201] pushsymb 116 ............................ <#mNum>
  [203] getlocal 6 .............................. <mNum>
  [205] pusharglist 8 ........................... <[#door: 4, #client: 4, #sID: sSessionId, #mNum: mNum]>
  [207] pushproplist ............................ <[#door: 4, #client: 4, #sID: sSessionId, #mNum: mNum]>
  [208] pusharglist 1 ........................... <[#door: 4, #client: 4, #sID: sSessionId, #mNum: mNum]>
  [210] extcall 113 ............................. <urlEncode([#door: 4, #client: 4, #sID: sSessionId, #mNum: mNum])>
  [212] setlocal 8 .............................. sParams = urlEncode([#door: 4, #client: 4, #sID: sSessionId, #mNum: mNum])
  [214] pushcons 8 .............................. <"sID">
  [216] getlocal 8 .............................. <sParams>
  [218] pusharglist 2 ........................... <"sID", sParams>
  [220] extcall 19 .............................. <offset("sID", sParams)>
  [222] setlocal 9 .............................. idx = offset("sID", sParams)
  [224] getlocal 8 .............................. <sParams>
  [226] pushint8 1 .............................. <1>
  [228] get 1 ................................... <the number of chars in sParams>
  [230] setlocal 10 ............................. cnt = the number of chars in sParams
  [232] pushint8 1 .............................. <1>
  [234] getlocal 9 .............................. <idx>
  [236] pushint8 1 .............................. <1>
  [238] sub ..................................... <idx - 1>
  [239] pushzero ................................ <0>
  [240] pushzero ................................ <0>
  [241] pushzero ................................ <0>
  [242] pushzero ................................ <0>
  [243] pushzero ................................ <0>
  [244] pushzero ................................ <0>
  [245] getlocal 8 .............................. <sParams>
  [247] getchunk ................................ <char 1 to idx - 1 of sParams>
  [248] setlocal 11 ............................. part1 = char 1 to idx - 1 of sParams
  [250] pushcons 9 .............................. <"SID">
  [252] setlocal 12 ............................. part2 = "SID"
  [254] getlocal 9 .............................. <idx>
  [256] pushint8 3 .............................. <3>
  [258] add ..................................... <idx + 3>
  [259] getlocal 10 ............................. <cnt>
  [261] pushzero ................................ <0>
  [262] pushzero ................................ <0>
  [263] pushzero ................................ <0>
  [264] pushzero ................................ <0>
  [265] pushzero ................................ <0>
  [266] pushzero ................................ <0>
  [267] getlocal 8 .............................. <sParams>
  [269] getchunk ................................ <char idx + 3 to cnt of sParams>
  [270] setlocal 13 ............................. part3 = char idx + 3 to cnt of sParams
  [272] getlocal 11 ............................. <part1>
  [274] getlocal 12 ............................. <part2>
  [276] joinstr ................................. <part1 & part2>
  [277] getlocal 13 ............................. <part3>
  [279] joinstr ................................. <part1 & part2 & part3>
  [280] setlocal 8 .............................. sParams = part1 & part2 & part3
  [282] getlocal 5 .............................. <sUrl>
  [284] pushcons 10 ............................. <"?">
  [286] joinstr ................................. <sUrl & "?">
  [287] getlocal 8 .............................. <sParams>
  [289] joinstr ................................. <sUrl & "?" & sParams>
  [290] setlocal 5 .............................. sUrl = sUrl & "?" & sParams
  [292] pushcons 11 ............................. <"javascript:openMixer('">
  [294] getlocal 5 .............................. <sUrl>
  [296] joinstr ................................. <"javascript:openMixer('" & sUrl>
  [297] pushcons 12 ............................. <"');">
  [299] joinstr ................................. <"javascript:openMixer('" & sUrl & "');">
  [300] setlocal 14 ............................. sLaunchScript = "javascript:openMixer('" & sUrl & "');"
  [302] getlocal 14 ............................. <sLaunchScript>
  [304] pusharglistnoret 1 ...................... <sLaunchScript>
  [306] extcall 58 .............................. gotoNetPage(sLaunchScript)
  [308] pushint8 1 .............................. <1>
  [310] pusharglistnoret 1 ...................... <1>
  [312] extcall 13 .............................. return 1
  [314] ret
end

on burnMix me, iIndex
  [  0] getparam 0 .............................. <me>
  [  2] getchainedprop 12 ....................... <me.pMixerData>
  [  4] pushsymb 16 ............................. <#mixes>
  [  6] pusharglist 2 ........................... <me.pMixerData, #mixes>
  [  8] objcall 23 .............................. <me.pMixerData.mixes.count>
  [ 10] pushzero ................................ <0>
  [ 11] eq ...................................... <me.pMixerData.mixes.count = 0>
  [ 12] jmpifz [ 20] ............................ if me.pMixerData.mixes.count = 0 then
  [ 15] pushzero ................................ <0>
  [ 16] pusharglistnoret 1 ...................... <0>
  [ 18] extcall 13 .............................. return 0
  [ 20] getparam 0 .............................. <me>
  [ 22] getchainedprop 12 ....................... <me.pMixerData>
  [ 24] pushsymb 16 ............................. <#mixes>
  [ 26] pusharglist 2 ........................... <me.pMixerData, #mixes>
  [ 28] objcall 23 .............................. <me.pMixerData.mixes.count>
  [ 30] getparam 1 .............................. <iIndex>
  [ 32] lt ...................................... <me.pMixerData.mixes.count < iIndex>
  [ 33] jmpifz [ 41] ............................ if me.pMixerData.mixes.count < iIndex then
  [ 36] pushzero ................................ <0>
  [ 37] pusharglistnoret 1 ...................... <0>
  [ 39] extcall 13 .............................. return 0
  [ 41] getglobal 31 ............................ <ElementMgr>
  [ 43] pusharglist 1 ........................... <ElementMgr>
  [ 45] objcall 37 .............................. <ElementMgr.getSequencer()>
  [ 47] pusharglistnoret 1 ...................... <ElementMgr.getSequencer()>
  [ 49] objcall 38 .............................. ElementMgr.getSequencer().stop()
  [ 51] getglobal 65 ............................ <oDenizenManager>
  [ 53] pusharglist 1 ........................... <oDenizenManager>
  [ 55] objcall 110 ............................. <oDenizenManager.getBackpack()>
  [ 57] setlocal 0 .............................. oBackPack = oDenizenManager.getBackpack()
  [ 59] getlocal 0 .............................. <oBackPack>
  [ 61] pusharglist 1 ........................... <oBackPack>
  [ 63] extcall 42 .............................. <voidp(oBackPack)>
  [ 65] jmpifz [ 80] ............................ if voidp(oBackPack) then
  [ 68] getglobal 31 ............................ <ElementMgr>
  [ 70] pushcons 13 ............................. <"ALERT_NO_BLANK_CDS">
  [ 72] pusharglistnoret 2 ...................... <ElementMgr, "ALERT_NO_BLANK_CDS">
  [ 74] objcall 107 ............................. ElementMgr.alert("ALERT_NO_BLANK_CDS")
  [ 76] pusharglistnoret 0 ...................... <>
  [ 78] extcall 13 .............................. return 
  [ 80] getlocal 0 .............................. <oBackPack>
  [ 82] pusharglist 1 ........................... <oBackPack>
  [ 84] objcall 111 ............................. <oBackPack.getNumberOfBlankCds()>
  [ 86] pusharglist 1 ........................... <oBackPack.getNumberOfBlankCds()>
  [ 88] extcall 109 ............................. <integer(oBackPack.getNumberOfBlankCds())>
  [ 90] setlocal 1 .............................. iBlankCds = integer(oBackPack.getNumberOfBlankCds())
  [ 92] getlocal 1 .............................. <iBlankCds>
  [ 94] pushint8 1 .............................. <1>
  [ 96] lt ...................................... <iBlankCds < 1>
  [ 97] jmpifz [112] ............................ if iBlankCds < 1 then
  [100] getglobal 31 ............................ <ElementMgr>
  [102] pushcons 13 ............................. <"ALERT_NO_BLANK_CDS">
  [104] pusharglistnoret 2 ...................... <ElementMgr, "ALERT_NO_BLANK_CDS">
  [106] objcall 107 ............................. ElementMgr.alert("ALERT_NO_BLANK_CDS")
  [108] pusharglistnoret 0 ...................... <>
  [110] extcall 13 .............................. return 
  [112] getglobal 31 ............................ <ElementMgr>
  [114] pushcons 14 ............................. <"burn_decision.window">
  [116] pusharglistnoret 2 ...................... <ElementMgr, "burn_decision.window">
  [118] objcall 32 .............................. ElementMgr.newwindow("burn_decision.window")
  [120] getglobal 17 ............................ <TextMgr>
  [122] pushcons 15 ............................. <"BURN_DESC">
  [124] pusharglist 2 ........................... <TextMgr, "BURN_DESC">
  [126] objcall 18 .............................. <TextMgr.GetRefText("BURN_DESC")>
  [128] setlocal 2 .............................. mytext = TextMgr.GetRefText("BURN_DESC")
  [130] pushcons 16 ............................. <"{blankCds}">
  [132] getlocal 2 .............................. <mytext>
  [134] pusharglist 2 ........................... <"{blankCds}", mytext>
  [136] extcall 19 .............................. <offset("{blankCds}", mytext)>
  [138] setlocal 3 .............................. mychar = offset("{blankCds}", mytext)
  [140] getlocal 3 .............................. <mychar>
  [142] getlocal 3 .............................. <mychar>
  [144] pushint8 9 .............................. <9>
  [146] add ..................................... <mychar + 9>
  [147] pushzero ................................ <0>
  [148] pushzero ................................ <0>
  [149] pushzero ................................ <0>
  [150] pushzero ................................ <0>
  [151] pushzero ................................ <0>
  [152] pushzero ................................ <0>
  [153] pushint8 2 .............................. <2>
  [155] deletechunk 5 ........................... delete char mychar to mychar + 9 of mytext
  [157] getlocal 1 .............................. <iBlankCds>
  [159] pushcons 3 .............................. <" ">
  [161] joinstr ................................. <iBlankCds & " ">
  [162] getlocal 3 .............................. <mychar>
  [164] pushzero ................................ <0>
  [165] pushzero ................................ <0>
  [166] pushzero ................................ <0>
  [167] pushzero ................................ <0>
  [168] pushzero ................................ <0>
  [169] pushzero ................................ <0>
  [170] pushzero ................................ <0>
  [171] pushint8 2 .............................. <2>
  [173] putchunk 21 ............................. put iBlankCds & " " into char mychar of mytext
  [175] pushcons 17 ............................. <"burn_prompttext">
  [177] pusharglist 1 ........................... <"burn_prompttext">
  [179] extcall 21 .............................. <member("burn_prompttext")>
  [181] getlocal 2 .............................. <mytext>
  [183] setobjprop 22 ........................... member("burn_prompttext").text = mytext
  [185] pushint8 1 .............................. <1>
  [187] pusharglistnoret 1 ...................... <1>
  [189] extcall 13 .............................. return 1
  [191] ret
end
