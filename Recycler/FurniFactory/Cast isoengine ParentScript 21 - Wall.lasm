property aTileSprites, aPatterns, sCastLib
global oIsoScene

on new me
  [  0] getparam 0 .............................. <me>
  [  2] getparam 0 .............................. <me>
  [  4] pusharglist 1 ........................... <me>
  [  6] objcall 925 ............................. <me.loadPatterns()>
  [  9] setobjprop 930 .......................... me.aPatterns = me.loadPatterns()
  [ 12] getparam 0 .............................. <me>
  [ 14] pusharglist 0 ........................... <[]>
  [ 16] pushlist ................................ <[]>
  [ 17] setobjprop 932 .......................... me.aTileSprites = []
  [ 20] getparam 0 .............................. <me>
  [ 22] pushcons 0 .............................. <"Studio">
  [ 24] setobjprop 253 .......................... me.sCastLib = "Studio"
  [ 26] getparam 0 .............................. <me>
  [ 28] pusharglistnoret 1 ...................... <me>
  [ 30] extcall 92 .............................. return me
  [ 32] ret
end

on init me, oXml
  [  0] getparam 1 .............................. <oXml>
  [  2] pusharglist 1 ........................... <oXml>
  [  4] extcall 105 ............................. <voidp(oXml)>
  [  6] jmpifz [ 13] ............................ if voidp(oXml) then
  [  9] pusharglistnoret 0 ...................... <>
  [ 11] extcall 92 .............................. return 
  [ 13] getparam 1 .............................. <oXml>
  [ 15] pushcons 1 .............................. <"WallTile">
  [ 17] pusharglist 2 ........................... <oXml, "WallTile">
  [ 19] extcall 921 ............................. <getNodes(oXml, "WallTile")>
  [ 22] setlocal 0 .............................. aWallTiles = getNodes(oXml, "WallTile")
  [ 24] pushint8 1 .............................. <1>
  [ 26] setlocal 1
  [ 28] getlocal 1
  [ 30] getlocal 0 .............................. <aWallTiles>
  [ 32] getobjprop 169 .......................... <aWallTiles.count>
  [ 34] lteq
  [ 35] jmpifz [307] ............................ repeat with i = 1 to aWallTiles.count
  [ 38] getlocal 0 .............................. <aWallTiles>
  [ 40] getlocal 1 .............................. <i>
  [ 42] pusharglist 2 ........................... <aWallTiles, i>
  [ 44] objcall 196 ............................. <aWallTiles[i]>
  [ 46] setlocal 2 .............................. oWallTile = aWallTiles[i]
  [ 48] getlocal 2 .............................. <oWallTile>
  [ 50] pusharglist 1 ........................... <oWallTile>
  [ 52] objcall 405 ............................. <oWallTile.toString()>
  [ 55] setlocal 3 .............................. sWallTile = oWallTile.toString()
  [ 57] getlocal 2 .............................. <oWallTile>
  [ 59] getchainedprop 108 ...................... <oWallTile.attributes>
  [ 61] getobjprop 612 .......................... <oWallTile.attributes.row>
  [ 64] pusharglist 1 ........................... <oWallTile.attributes.row>
  [ 66] extcall 107 ............................. <integer(oWallTile.attributes.row)>
  [ 68] setlocal 4 .............................. iRow = integer(oWallTile.attributes.row)
  [ 70] getlocal 2 .............................. <oWallTile>
  [ 72] getchainedprop 108 ...................... <oWallTile.attributes>
  [ 74] getobjprop 613 .......................... <oWallTile.attributes.col>
  [ 77] pusharglist 1 ........................... <oWallTile.attributes.col>
  [ 79] extcall 107 ............................. <integer(oWallTile.attributes.col)>
  [ 81] setlocal 5 .............................. iCol = integer(oWallTile.attributes.col)
  [ 83] getlocal 2 .............................. <oWallTile>
  [ 85] getchainedprop 108 ...................... <oWallTile.attributes>
  [ 87] getobjprop 966 .......................... <oWallTile.attributes.dir>
  [ 90] setlocal 6 .............................. sDir = oWallTile.attributes.dir
  [ 92] getlocal 3 .............................. <sWallTile>
  [ 94] pushcons 2 .............................. <"corner">
  [ 96] containsstr ............................. <sWallTile contains "corner">
  [ 97] jmpifz [107] ............................ if sWallTile contains "corner" then / else
  [100] pushint8 1 .............................. <1>
  [102] setlocal 7 .............................. bCorner = 1
  [104] jmp [110]
  [107] pushzero ................................ <0>
  [108] setlocal 7 .............................. bCorner = 0
  [110] pushzero ................................ <0>
  [111] setlocal 8 .............................. iXOff = 0
  [113] pushzero ................................ <0>
  [114] setlocal 9 .............................. iYOff = 0
  [116] getlocal 3 .............................. <sWallTile>
  [118] pushcons 3 .............................. <"xoff=">
  [120] containsstr ............................. <sWallTile contains "xoff=">
  [121] jmpifz [136] ............................ if sWallTile contains "xoff=" then
  [124] getlocal 2 .............................. <oWallTile>
  [126] getchainedprop 108 ...................... <oWallTile.attributes>
  [128] getobjprop 111 .......................... <oWallTile.attributes.xoff>
  [130] pusharglist 1 ........................... <oWallTile.attributes.xoff>
  [132] extcall 107 ............................. <integer(oWallTile.attributes.xoff)>
  [134] setlocal 8 .............................. iXOff = integer(oWallTile.attributes.xoff)
  [136] getlocal 3 .............................. <sWallTile>
  [138] pushcons 4 .............................. <"yoff=">
  [140] containsstr ............................. <sWallTile contains "yoff=">
  [141] jmpifz [156] ............................ if sWallTile contains "yoff=" then
  [144] getlocal 2 .............................. <oWallTile>
  [146] getchainedprop 108 ...................... <oWallTile.attributes>
  [148] getobjprop 112 .......................... <oWallTile.attributes.yoff>
  [150] pusharglist 1 ........................... <oWallTile.attributes.yoff>
  [152] extcall 107 ............................. <integer(oWallTile.attributes.yoff)>
  [154] setlocal 9 .............................. iYOff = integer(oWallTile.attributes.yoff)
  [156] getlocal 7 .............................. <bCorner>
  [158] jmpifz [168] ............................ if bCorner then / else
  [161] pushcons 5 .............................. <"wallcorner">
  [163] setlocal 10 ............................. sId4 = "wallcorner"
  [165] jmp [174]
  [168] pusharglist 0 ........................... <>
  [170] extcall 130 ............................. <VOID>
  [172] setlocal 10 ............................. sId4 = VOID
  [174] getlocal 6 .............................. <sDir>
  [176] peek 0 .................................. case sDir of
  [178] pushcons 6 .............................. <"right">
  [180] eq
  [181] jmpifz [237] ............................ (case) "right":
  [184] getparam 0 .............................. <me>
  [186] getlocal 4 .............................. <iRow>
  [188] getlocal 5 .............................. <iCol>
  [190] pushcons 7 .............................. <"right_wall_1_b_0_2_0">
  [192] pushcons 6 .............................. <"right">
  [194] pushcons 8 .............................. <"right_wall">
  [196] pushcons 9 .............................. <"color">
  [198] getlocal 10 ............................. <sId4>
  [200] getlocal 8 .............................. <iXOff>
  [202] getlocal 9 .............................. <iYOff>
  [204] pusharglistnoret 10 ..................... <me, iRow, iCol, "right_wall_1_b_0_2_0", "right", "right_wall", "color", sId4, iXOff, iYOff>
  [206] objcall 964 ............................. me.drawWallTile(iRow, iCol, "right_wall_1_b_0_2_0", "right", "right_wall", "color", sId4, iXOff, iYOff)
  [209] getparam 0 .............................. <me>
  [211] getlocal 4 .............................. <iRow>
  [213] getlocal 5 .............................. <iCol>
  [215] pushcons 10 ............................. <"right_wall_1_a_0_2_0">
  [217] pushcons 6 .............................. <"right">
  [219] pushcons 8 .............................. <"right_wall">
  [221] pushcons 11 ............................. <"texture">
  [223] getlocal 10 ............................. <sId4>
  [225] getlocal 8 .............................. <iXOff>
  [227] getlocal 9 .............................. <iYOff>
  [229] pusharglistnoret 10 ..................... <me, iRow, iCol, "right_wall_1_a_0_2_0", "right", "right_wall", "texture", sId4, iXOff, iYOff>
  [231] objcall 964 ............................. me.drawWallTile(iRow, iCol, "right_wall_1_a_0_2_0", "right", "right_wall", "texture", sId4, iXOff, iYOff)
  [234] jmp [295]
  [237] peek 0
  [239] pushcons 12 ............................. <"left">
  [241] eq
  [242] jmpifz [295] ............................ (case) "left":
  [245] getparam 0 .............................. <me>
  [247] getlocal 4 .............................. <iRow>
  [249] getlocal 5 .............................. <iCol>
  [251] pushcons 13 ............................. <"left_wall_1_b_0_0_0">
  [253] pushcons 12 ............................. <"left">
  [255] pushcons 14 ............................. <"left_wall">
  [257] pushcons 9 .............................. <"color">
  [259] getlocal 10 ............................. <sId4>
  [261] getlocal 8 .............................. <iXOff>
  [263] getlocal 9 .............................. <iYOff>
  [265] pusharglistnoret 10 ..................... <me, iRow, iCol, "left_wall_1_b_0_0_0", "left", "left_wall", "color", sId4, iXOff, iYOff>
  [267] objcall 964 ............................. me.drawWallTile(iRow, iCol, "left_wall_1_b_0_0_0", "left", "left_wall", "color", sId4, iXOff, iYOff)
  [270] getparam 0 .............................. <me>
  [272] getlocal 4 .............................. <iRow>
  [274] getlocal 5 .............................. <iCol>
  [276] pushcons 15 ............................. <"left_wall_1_a_0_0_0">
  [278] pushcons 12 ............................. <"left">
  [280] pushcons 14 ............................. <"left_wall">
  [282] pushcons 11 ............................. <"texture">
  [284] getlocal 10 ............................. <sId4>
  [286] getlocal 8 .............................. <iXOff>
  [288] getlocal 9 .............................. <iYOff>
  [290] pusharglistnoret 10 ..................... <me, iRow, iCol, "left_wall_1_a_0_0_0", "left", "left_wall", "texture", sId4, iXOff, iYOff>
  [292] objcall 964 ............................. me.drawWallTile(iRow, iCol, "left_wall_1_a_0_0_0", "left", "left_wall", "texture", sId4, iXOff, iYOff)
  [295] pop 1 ................................... end case
  [297] pushint8 1
  [299] getlocal 1
  [301] add
  [302] setlocal 1
  [304] endrepeat [ 28]
  [307] ret
end

on drawWallTile me, iRow, iCol, sMember, sId1, sId2, sId3, sId4, iXOff, iYOff
  [  0] getglobal 88 ............................ <oIsoScene>
  [  2] getchainedprop 114 ...................... <oIsoScene.oGrid>
  [  4] getparam 1 .............................. <iRow>
  [  6] getparam 2 .............................. <iCol>
  [  8] pusharglist 3 ........................... <oIsoScene.oGrid, iRow, iCol>
  [ 10] objcall 283 ............................. <oIsoScene.oGrid.getSquareByRowCol(iRow, iCol)>
  [ 13] setlocal 0 .............................. oSquare = oIsoScene.oGrid.getSquareByRowCol(iRow, iCol)
  [ 15] getlocal 0 .............................. <oSquare>
  [ 17] getchainedprop 313 ...................... <oSquare.oViewPoints>
  [ 20] getobjprop 311 .......................... <oSquare.oViewPoints.bl>
  [ 23] setlocal 1 .............................. oLoc = oSquare.oViewPoints.bl
  [ 25] pushsymb 454 ............................ <#member>
  [ 28] getparam 3 .............................. <sMember>
  [ 30] pushsymb 144 ............................ <#x>
  [ 32] getlocal 1 .............................. <oLoc>
  [ 34] getobjprop 299 .......................... <oLoc.locH>
  [ 37] pushsymb 315 ............................ <#y>
  [ 40] getlocal 1 .............................. <oLoc>
  [ 42] getobjprop 300 .......................... <oLoc.locV>
  [ 45] pushsymb 462 ............................ <#ink>
  [ 48] pushint8 8 .............................. <8>
  [ 50] pusharglist 8 ........................... <[#member: sMember, #x: oLoc.locH, #y: oLoc.locV, #ink: 8]>
  [ 52] pushproplist ............................ <[#member: sMember, #x: oLoc.locH, #y: oLoc.locV, #ink: 8]>
  [ 53] setlocal 2 .............................. aProps = [#member: sMember, #x: oLoc.locH, #y: oLoc.locV, #ink: 8]
  [ 55] getglobal 88 ............................ <oIsoScene>
  [ 57] getchainedprop 113 ...................... <oIsoScene.oSpriteManager>
  [ 59] getlocal 2 .............................. <aProps>
  [ 61] pusharglist 2 ........................... <oIsoScene.oSpriteManager, aProps>
  [ 63] objcall 588 ............................. <oIsoScene.oSpriteManager.drawStaticSceneSprite(aProps)>
  [ 66] setlocal 3 .............................. iSprite = oIsoScene.oSpriteManager.drawStaticSceneSprite(aProps)
  [ 68] getlocal 3 .............................. <iSprite>
  [ 70] pusharglist 1 ........................... <iSprite>
  [ 72] extcall 451 ............................. <sprite(iSprite)>
  [ 75] getchainedprop 602 ...................... <sprite(iSprite).scriptInstanceList>
  [ 78] pushcons 16 ............................. <"WallScript">
  [ 80] pusharglist 1 ........................... <"WallScript">
  [ 82] extcall 57 .............................. <script("WallScript")>
  [ 84] getparam 0 .............................. <me>
  [ 86] getparam 4 .............................. <sId1>
  [ 88] getparam 5 .............................. <sId2>
  [ 90] getparam 6 .............................. <sId3>
  [ 92] getparam 7 .............................. <sId4>
  [ 94] getlocal 0 .............................. <oSquare>
  [ 96] pusharglist 7 ........................... <script("WallScript"), me, sId1, sId2, sId3, sId4, oSquare>
  [ 98] objcall 0 ............................... <script("WallScript").new(me, sId1, sId2, sId3, sId4, oSquare)>
  [100] pusharglistnoret 2 ...................... <sprite(iSprite).scriptInstanceList, script("WallScript").new(me, sId1, sId2, sId3, sId4, oSquare)>
  [102] objcall 133 ............................. sprite(iSprite).scriptInstanceList.add(script("WallScript").new(me, sId1, sId2, sId3, sId4, oSquare))
  [104] getparam 4 .............................. <sId1>
  [106] pushcons 12 ............................. <"left">
  [108] eq ...................................... <sId1 = "left">
  [109] jmpifz [133] ............................ if sId1 = "left" then
  [112] getglobal 88 ............................ <oIsoScene>
  [114] getchainedprop 114 ...................... <oIsoScene.oGrid>
  [116] getparam 1 .............................. <iRow>
  [118] pushint8 1 .............................. <1>
  [120] sub ..................................... <iRow - 1>
  [121] getparam 2 .............................. <iCol>
  [123] pushint8 1 .............................. <1>
  [125] sub ..................................... <iCol - 1>
  [126] pusharglist 3 ........................... <oIsoScene.oGrid, iRow - 1, iCol - 1>
  [128] objcall 283 ............................. <oIsoScene.oGrid.getSquareByRowCol(iRow - 1, iCol - 1)>
  [131] setlocal 0 .............................. oSquare = oIsoScene.oGrid.getSquareByRowCol(iRow - 1, iCol - 1)
  [133] getlocal 0 .............................. <oSquare>
  [135] pushint8 15 ............................. <15>
  [137] pusharglist 2 ........................... <oSquare, 15>
  [139] objcall 552 ............................. <oSquare.getDepthByLayer(15)>
  [142] setlocal 4 .............................. iDepth = oSquare.getDepthByLayer(15)
  [144] getparam 8 .............................. <iXOff>
  [146] pusharglist 1 ........................... <iXOff>
  [148] extcall 105 ............................. <voidp(iXOff)>
  [150] not ..................................... <not voidp(iXOff)>
  [151] jmpifz [177] ............................ if not voidp(iXOff) then
  [154] getlocal 3 .............................. <iSprite>
  [156] pusharglist 1 ........................... <iSprite>
  [158] extcall 451 ............................. <sprite(iSprite)>
  [161] getlocal 3 .............................. <iSprite>
  [163] pusharglist 1 ........................... <iSprite>
  [165] extcall 451 ............................. <sprite(iSprite)>
  [168] getobjprop 299 .......................... <sprite(iSprite).locH>
  [171] getparam 8 .............................. <iXOff>
  [173] add ..................................... <sprite(iSprite).locH + iXOff>
  [174] setobjprop 299 .......................... sprite(iSprite).locH = sprite(iSprite).locH + iXOff
  [177] getparam 9 .............................. <iYOff>
  [179] pusharglist 1 ........................... <iYOff>
  [181] extcall 105 ............................. <voidp(iYOff)>
  [183] not ..................................... <not voidp(iYOff)>
  [184] jmpifz [210] ............................ if not voidp(iYOff) then
  [187] getlocal 3 .............................. <iSprite>
  [189] pusharglist 1 ........................... <iSprite>
  [191] extcall 451 ............................. <sprite(iSprite)>
  [194] getlocal 3 .............................. <iSprite>
  [196] pusharglist 1 ........................... <iSprite>
  [198] extcall 451 ............................. <sprite(iSprite)>
  [201] getobjprop 300 .......................... <sprite(iSprite).locV>
  [204] getparam 9 .............................. <iYOff>
  [206] add ..................................... <sprite(iSprite).locV + iYOff>
  [207] setobjprop 300 .......................... sprite(iSprite).locV = sprite(iSprite).locV + iYOff
  [210] getlocal 3 .............................. <iSprite>
  [212] pusharglist 1 ........................... <iSprite>
  [214] extcall 451 ............................. <sprite(iSprite)>
  [217] getlocal 3 .............................. <iSprite>
  [219] pusharglist 1 ........................... <iSprite>
  [221] extcall 451 ............................. <sprite(iSprite)>
  [224] getobjprop 300 .......................... <sprite(iSprite).locV>
  [227] pushzero ................................ <0>
  [228] add ..................................... <sprite(iSprite).locV + 0>
  [229] setobjprop 300 .......................... sprite(iSprite).locV = sprite(iSprite).locV + 0
  [232] getparam 0 .............................. <me>
  [234] getchainedprop 932 ...................... <me.aTileSprites>
  [237] getlocal 3 .............................. <iSprite>
  [239] pusharglistnoret 2 ...................... <me.aTileSprites, iSprite>
  [241] objcall 133 ............................. me.aTileSprites.add(iSprite)
  [243] getparam 0 .............................. <me>
  [245] pushint8 1 .............................. <1>
  [247] pushint8 1 .............................. <1>
  [249] getlocal 3 .............................. <iSprite>
  [251] pusharglistnoret 4 ...................... <me, 1, 1, iSprite>
  [253] objcall 926 ............................. me.setPattern(1, 1, iSprite)
  [256] ret
end

on destroy me
  [  0] getglobal 88 ............................ <oIsoScene>
  [  2] getchainedprop 113 ...................... <oIsoScene.oSpriteManager>
  [  4] getparam 0 .............................. <me>
  [  6] getobjprop 932 .......................... <me.aTileSprites>
  [  9] pusharglistnoret 2 ...................... <oIsoScene.oSpriteManager, me.aTileSprites>
  [ 11] objcall 586 ............................. oIsoScene.oSpriteManager.returnPooledSprites(me.aTileSprites)
  [ 14] getparam 0 .............................. <me>
  [ 16] pusharglist 0 ........................... <[]>
  [ 18] pushlist ................................ <[]>
  [ 19] setobjprop 932 .......................... me.aTileSprites = []
  [ 22] ret
end

on toggleDisplay me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 932 .......................... <me.aTileSprites>
  [  5] peek 0
  [  7] pusharglist 1
  [  9] extcall 169
  [ 11] pushint8 1
  [ 13] peek 0
  [ 15] peek 2
  [ 17] lteq
  [ 18] jmpifz [ 57] ............................ repeat with i in me.aTileSprites
  [ 21] peek 2
  [ 23] peek 1
  [ 25] pusharglist 2
  [ 27] extcall 196
  [ 29] setlocal 0
  [ 31] getlocal 0 .............................. <i>
  [ 33] pusharglist 1 ........................... <i>
  [ 35] extcall 451 ............................. <sprite(i)>
  [ 38] getlocal 0 .............................. <i>
  [ 40] pusharglist 1 ........................... <i>
  [ 42] extcall 451 ............................. <sprite(i)>
  [ 45] getobjprop 464 .......................... <sprite(i).visible>
  [ 48] not ..................................... <not sprite(i).visible>
  [ 49] setobjprop 464 .......................... sprite(i).visible = not sprite(i).visible
  [ 52] pushint8 1
  [ 54] add
  [ 55] endrepeat [ 13]
  [ 57] pop 3
  [ 59] ret
end

on getSpriteUnderPoint me, oLoc
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 932 .......................... <me.aTileSprites>
  [  5] peek 0
  [  7] pusharglist 1
  [  9] extcall 169
  [ 11] pushint8 1
  [ 13] peek 0
  [ 15] peek 2
  [ 17] lteq
  [ 18] jmpifz [ 62] ............................ repeat with i in me.aTileSprites
  [ 21] peek 2
  [ 23] peek 1
  [ 25] pusharglist 2
  [ 27] extcall 196
  [ 29] setlocal 0
  [ 31] getparam 1 .............................. <oLoc>
  [ 33] getlocal 0 .............................. <i>
  [ 35] pusharglist 1 ........................... <i>
  [ 37] extcall 451 ............................. <sprite(i)>
  [ 40] getobjprop 477 .......................... <sprite(i).rect>
  [ 43] pusharglist 2 ........................... <oLoc, sprite(i).rect>
  [ 45] objcall 975 ............................. <oLoc.inside(sprite(i).rect)>
  [ 48] jmpifz [ 57] ............................ if oLoc.inside(sprite(i).rect) then
  [ 51] getlocal 0 .............................. <i>
  [ 53] pusharglistnoret 1 ...................... <i>
  [ 55] extcall 92 .............................. return i
  [ 57] pushint8 1
  [ 59] add
  [ 60] endrepeat [ 13]
  [ 62] pop 3
  [ 64] ret
end

on loadPatterns me
  [  0] pusharglist 0 ........................... <[:]>
  [  2] pushproplist ............................ <[:]>
  [  3] setlocal 0 .............................. aWallPatterns = [:]
  [  5] pushcons 17 ............................. <"wallpattern_patterns_index">
  [  7] getparam 0 .............................. <me>
  [  9] getobjprop 253 .......................... <me.sCastLib>
  [ 11] pusharglist 2 ........................... <"wallpattern_patterns_index", me.sCastLib>
  [ 13] extcall 454 ............................. <member("wallpattern_patterns_index", me.sCastLib)>
  [ 16] setlocal 1 .............................. oPatternMember = member("wallpattern_patterns_index", me.sCastLib)
  [ 18] getlocal 1 .............................. <oPatternMember>
  [ 20] getobjprop 606 .......................... <oPatternMember.memberNum>
  [ 23] pushint8 1 .............................. <1>
  [ 25] inv ..................................... <-1>
  [ 26] eq ...................................... <oPatternMember.memberNum = -1>
  [ 27] jmpifz [ 36] ............................ if oPatternMember.memberNum = -1 then
  [ 30] getlocal 0 .............................. <aWallPatterns>
  [ 32] pusharglistnoret 1 ...................... <aWallPatterns>
  [ 34] extcall 92 .............................. return aWallPatterns
  [ 36] getlocal 1 .............................. <oPatternMember>
  [ 38] getobjprop 497 .......................... <oPatternMember.text>
  [ 41] setlocal 2 .............................. sPatternText = oPatternMember.text
  [ 43] pushint8 1 .............................. <1>
  [ 45] setlocal 3
  [ 47] getlocal 3
  [ 49] getlocal 2 .............................. <sPatternText>
  [ 51] pushsymb 939 ............................ <#lines>
  [ 54] pusharglist 2 ........................... <sPatternText, #lines>
  [ 56] objcall 169 ............................. <sPatternText.lines.count>
  [ 58] lteq
  [ 59] jmpifz [203] ............................ repeat with i = 1 to sPatternText.lines.count
  [ 62] getlocal 2 .............................. <sPatternText>
  [ 64] pushsymb 940 ............................ <#line>
  [ 67] getlocal 3 .............................. <i>
  [ 69] pusharglist 3 ........................... <sPatternText, #line, i>
  [ 71] objcall 577 ............................. <sPatternText.line[i]>
  [ 74] setlocal 4 .............................. sPatternLine = sPatternText.line[i]
  [ 76] getlocal 4 .............................. <sPatternLine>
  [ 78] pusharglist 1 ........................... <sPatternLine>
  [ 80] extcall 941 ............................. <value(sPatternLine)>
  [ 83] setlocal 5 .............................. aPatternList = value(sPatternLine)
  [ 85] getlocal 5 .............................. <aPatternList>
  [ 87] getobjprop 625 .......................... <aPatternList.name>
  [ 90] setlocal 6 .............................. sPatternName = aPatternList.name
  [ 92] getlocal 5 .............................. <aPatternList>
  [ 94] getobjprop 942 .......................... <aPatternList.field>
  [ 97] setlocal 7 .............................. sColorField = aPatternList.field
  [ 99] pusharglist 0 ........................... <[]>
  [101] pushlist ................................ <[]>
  [102] setlocal 8 .............................. aColors = []
  [104] getlocal 7 .............................. <sColorField>
  [106] getparam 0 .............................. <me>
  [108] getobjprop 253 .......................... <me.sCastLib>
  [110] pusharglist 2 ........................... <sColorField, me.sCastLib>
  [112] extcall 454 ............................. <member(sColorField, me.sCastLib)>
  [115] setlocal 9 .............................. oColorsMember = member(sColorField, me.sCastLib)
  [117] getlocal 9 .............................. <oColorsMember>
  [119] getobjprop 497 .......................... <oColorsMember.text>
  [122] setlocal 10 ............................. sColorsText = oColorsMember.text
  [124] pushint8 1 .............................. <1>
  [126] setlocal 11
  [128] getlocal 11
  [130] getlocal 10 ............................. <sColorsText>
  [132] pushsymb 939 ............................ <#lines>
  [135] pusharglist 2 ........................... <sColorsText, #lines>
  [137] objcall 169 ............................. <sColorsText.lines.count>
  [139] lteq
  [140] jmpifz [183] ............................ repeat with ii = 1 to sColorsText.lines.count
  [143] getlocal 10 ............................. <sColorsText>
  [145] pushsymb 940 ............................ <#line>
  [148] getlocal 11 ............................. <ii>
  [150] pusharglist 3 ........................... <sColorsText, #line, ii>
  [152] objcall 577 ............................. <sColorsText.line[ii]>
  [155] setlocal 12 ............................. sColorLine = sColorsText.line[ii]
  [157] getlocal 12 ............................. <sColorLine>
  [159] pusharglist 1 ........................... <sColorLine>
  [161] extcall 941 ............................. <value(sColorLine)>
  [164] setlocal 13 ............................. aColorsList = value(sColorLine)
  [166] getlocal 8 .............................. <aColors>
  [168] getlocal 13 ............................. <aColorsList>
  [170] pusharglistnoret 2 ...................... <aColors, aColorsList>
  [172] objcall 133 ............................. aColors.add(aColorsList)
  [174] pushint8 1
  [176] getlocal 11
  [178] add
  [179] setlocal 11
  [181] endrepeat [128]
  [183] getlocal 0 .............................. <aWallPatterns>
  [185] getlocal 6 .............................. <sPatternName>
  [187] getlocal 8 .............................. <aColors>
  [189] pusharglistnoret 3 ...................... <aWallPatterns, sPatternName, aColors>
  [191] objcall 357 ............................. aWallPatterns.addProp(sPatternName, aColors)
  [194] pushint8 1
  [196] getlocal 3
  [198] add
  [199] setlocal 3
  [201] endrepeat [ 47]
  [203] getlocal 0 .............................. <aWallPatterns>
  [205] pusharglistnoret 1 ...................... <aWallPatterns>
  [207] extcall 92 .............................. return aWallPatterns
  [209] ret
end

on setPattern me, iPatternIndex, iColorIndex, iSprite
  [  0] getparam 0 .............................. <me>
  [  2] pushsymb 930 ............................ <#aPatterns>
  [  5] pusharglist 2 ........................... <me, #aPatterns>
  [  7] objcall 169 ............................. <me.aPatterns.count>
  [  9] pushzero ................................ <0>
  [ 10] eq ...................................... <me.aPatterns.count = 0>
  [ 11] jmpifz [ 18] ............................ if me.aPatterns.count = 0 then
  [ 14] pusharglistnoret 0 ...................... <>
  [ 16] extcall 92 .............................. return 
  [ 18] getparam 1 .............................. <iPatternIndex>
  [ 20] pusharglist 1 ........................... <iPatternIndex>
  [ 22] extcall 105 ............................. <voidp(iPatternIndex)>
  [ 24] jmpifz [ 31] ............................ if voidp(iPatternIndex) then
  [ 27] pushint8 1 .............................. <1>
  [ 29] setparam 1 .............................. iPatternIndex = 1
  [ 31] getparam 2 .............................. <iColorIndex>
  [ 33] pusharglist 1 ........................... <iColorIndex>
  [ 35] extcall 105 ............................. <voidp(iColorIndex)>
  [ 37] jmpifz [ 44] ............................ if voidp(iColorIndex) then
  [ 40] pushint8 1 .............................. <1>
  [ 42] setparam 2 .............................. iColorIndex = 1
  [ 44] getparam 1 .............................. <iPatternIndex>
  [ 46] pushint8 1 .............................. <1>
  [ 48] lt ...................................... <iPatternIndex < 1>
  [ 49] getparam 1 .............................. <iPatternIndex>
  [ 51] getparam 0 .............................. <me>
  [ 53] pushsymb 930 ............................ <#aPatterns>
  [ 56] pusharglist 2 ........................... <me, #aPatterns>
  [ 58] objcall 169 ............................. <me.aPatterns.count>
  [ 60] gt ...................................... <iPatternIndex > me.aPatterns.count>
  [ 61] or ...................................... <(iPatternIndex < 1) or (iPatternIndex > me.aPatterns.count)>
  [ 62] jmpifz [ 69] ............................ if (iPatternIndex < 1) or (iPatternIndex > me.aPatterns.count) then
  [ 65] pushint8 1 .............................. <1>
  [ 67] setparam 1 .............................. iPatternIndex = 1
  [ 69] getparam 0 .............................. <me>
  [ 71] getchainedprop 930 ...................... <me.aPatterns>
  [ 74] getparam 1 .............................. <iPatternIndex>
  [ 76] pusharglist 2 ........................... <me.aPatterns, iPatternIndex>
  [ 78] objcall 899 ............................. <me.aPatterns.getPropAt(iPatternIndex)>
  [ 81] setlocal 0 .............................. sPatternName = me.aPatterns.getPropAt(iPatternIndex)
  [ 83] getparam 0 .............................. <me>
  [ 85] pushsymb 930 ............................ <#aPatterns>
  [ 88] getparam 1 .............................. <iPatternIndex>
  [ 90] pusharglist 3 ........................... <me, #aPatterns, iPatternIndex>
  [ 92] objcall 577 ............................. <me.aPatterns[iPatternIndex]>
  [ 95] setlocal 1 .............................. aColors = me.aPatterns[iPatternIndex]
  [ 97] getparam 2 .............................. <iColorIndex>
  [ 99] pushint8 1 .............................. <1>
  [101] lt ...................................... <iColorIndex < 1>
  [102] getparam 2 .............................. <iColorIndex>
  [104] getlocal 1 .............................. <aColors>
  [106] getobjprop 169 .......................... <aColors.count>
  [108] gt ...................................... <iColorIndex > aColors.count>
  [109] or ...................................... <(iColorIndex < 1) or (iColorIndex > aColors.count)>
  [110] jmpifz [117] ............................ if (iColorIndex < 1) or (iColorIndex > aColors.count) then
  [113] pushint8 1 .............................. <1>
  [115] setparam 2 .............................. iColorIndex = 1
  [117] getlocal 1 .............................. <aColors>
  [119] getparam 2 .............................. <iColorIndex>
  [121] pusharglist 2 ........................... <aColors, iColorIndex>
  [123] objcall 196 ............................. <aColors[iColorIndex]>
  [125] setlocal 2 .............................. aColorData = aColors[iColorIndex]
  [127] getparam 3 .............................. <iSprite>
  [129] pusharglist 1 ........................... <iSprite>
  [131] extcall 105 ............................. <voidp(iSprite)>
  [133] jmpifz [190] ............................ if voidp(iSprite) then / else
  [136] getparam 0 .............................. <me>
  [138] getobjprop 932 .......................... <me.aTileSprites>
  [141] peek 0
  [143] pusharglist 1
  [145] extcall 169
  [147] pushint8 1
  [149] peek 0
  [151] peek 2
  [153] lteq
  [154] jmpifz [185] ............................ repeat with i in me.aTileSprites
  [157] peek 2
  [159] peek 1
  [161] pusharglist 2
  [163] extcall 196
  [165] setlocal 3
  [167] getparam 0 .............................. <me>
  [169] getlocal 0 .............................. <sPatternName>
  [171] getlocal 2 .............................. <aColorData>
  [173] getlocal 3 .............................. <i>
  [175] pusharglistnoret 4 ...................... <me, sPatternName, aColorData, i>
  [177] objcall 928 ............................. me.displayPattern(sPatternName, aColorData, i)
  [180] pushint8 1
  [182] add
  [183] endrepeat [149]
  [185] pop 3
  [187] jmp [203]
  [190] getparam 0 .............................. <me>
  [192] getlocal 0 .............................. <sPatternName>
  [194] getlocal 2 .............................. <aColorData>
  [196] getparam 3 .............................. <iSprite>
  [198] pusharglistnoret 4 ...................... <me, sPatternName, aColorData, iSprite>
  [200] objcall 928 ............................. me.displayPattern(sPatternName, aColorData, iSprite)
  [203] ret
end

on displayPattern me, sPatternName, aColorData, iSprite
  [  0] getparam 3 .............................. <iSprite>
  [  2] pushsymb 977 ............................ <#getId1>
  [  5] pusharglist 2 ........................... <iSprite, #getId1>
  [  7] extcall 197 ............................. <sendSprite(iSprite, #getId1)>
  [  9] setlocal 0 .............................. sDir = sendSprite(iSprite, #getId1)
  [ 11] getlocal 0 .............................. <sDir>
  [ 13] pushcons 6 .............................. <"right">
  [ 15] eq ...................................... <sDir = "right">
  [ 16] jmpifz [ 26] ............................ if sDir = "right" then / else
  [ 19] pushint8 2 .............................. <2>
  [ 21] setlocal 1 .............................. iDir = 2
  [ 23] jmp [ 30]
  [ 26] pushint8 1 .............................. <1>
  [ 28] setlocal 1 .............................. iDir = 1
  [ 30] getparam 3 .............................. <iSprite>
  [ 32] pushsymb 978 ............................ <#getId2>
  [ 35] pusharglist 2 ........................... <iSprite, #getId2>
  [ 37] extcall 197 ............................. <sendSprite(iSprite, #getId2)>
  [ 39] setlocal 2 .............................. sImageBase = sendSprite(iSprite, #getId2)
  [ 41] getparam 3 .............................. <iSprite>
  [ 43] pushsymb 979 ............................ <#getId3>
  [ 46] pusharglist 2 ........................... <iSprite, #getId3>
  [ 48] extcall 197 ............................. <sendSprite(iSprite, #getId3)>
  [ 50] setlocal 3 .............................. sType = sendSprite(iSprite, #getId3)
  [ 52] getlocal 3 .............................. <sType>
  [ 54] peek 0 .................................. case sType of
  [ 56] pushcons 9 .............................. <"color">
  [ 58] eq
  [ 59] jmpifz [132] ............................ (case) "color":
  [ 62] getlocal 2 .............................. <sImageBase>
  [ 64] pushcons 18 ............................. <"_">
  [ 66] joinstr ................................. <sImageBase & "_">
  [ 67] getparam 2 .............................. <aColorData>
  [ 69] getobjprop 980 .......................... <aColorData.dirtStyle>
  [ 72] joinstr ................................. <sImageBase & "_" & aColorData.dirtStyle>
  [ 73] pushcons 19 ............................. <"_b_0_">
  [ 75] joinstr ................................. <sImageBase & "_" & aColorData.dirtStyle & "_b_0_">
  [ 76] getlocal 1 .............................. <iDir>
  [ 78] joinstr ................................. <sImageBase & "_" & aColorData.dirtStyle & "_b_0_" & iDir>
  [ 79] pushcons 20 ............................. <"_0">
  [ 81] joinstr ................................. <sImageBase & "_" & aColorData.dirtStyle & "_b_0_" & iDir & "_0">
  [ 82] setlocal 4 .............................. sMember = sImageBase & "_" & aColorData.dirtStyle & "_b_0_" & iDir & "_0"
  [ 84] getparam 3 .............................. <iSprite>
  [ 86] pusharglist 1 ........................... <iSprite>
  [ 88] extcall 451 ............................. <sprite(iSprite)>
  [ 91] getparam 2 .............................. <aColorData>
  [ 93] getobjprop 494 .......................... <aColorData.color>
  [ 96] setobjprop 494 .......................... sprite(iSprite).color = aColorData.color
  [ 99] getparam 3 .............................. <iSprite>
  [101] pusharglist 1 ........................... <iSprite>
  [103] extcall 451 ............................. <sprite(iSprite)>
  [106] getparam 2 .............................. <aColorData>
  [108] getobjprop 981 .......................... <aColorData.bgColor>
  [111] setobjprop 981 .......................... sprite(iSprite).bgColor = aColorData.bgColor
  [114] getparam 3 .............................. <iSprite>
  [116] pusharglist 1 ........................... <iSprite>
  [118] extcall 451 ............................. <sprite(iSprite)>
  [121] getparam 2 .............................. <aColorData>
  [123] getobjprop 982 .......................... <aColorData.dirtBlend>
  [126] setobjprop 463 .......................... sprite(iSprite).blend = aColorData.dirtBlend
  [129] jmp [192]
  [132] peek 0
  [134] pushcons 11 ............................. <"texture">
  [136] eq
  [137] jmpifz [192] ............................ (case) "texture":
  [140] getlocal 0 .............................. <sDir>
  [142] pushcons 21 ............................. <"_wall_">
  [144] joinstr ................................. <sDir & "_wall_">
  [145] getparam 2 .............................. <aColorData>
  [147] getobjprop 607 .......................... <aColorData.palette>
  [150] joinstr ................................. <sDir & "_wall_" & aColorData.palette>
  [151] setlocal 5 .............................. sPaletteMember = sDir & "_wall_" & aColorData.palette
  [153] getparam 3 .............................. <iSprite>
  [155] pusharglist 1 ........................... <iSprite>
  [157] extcall 451 ............................. <sprite(iSprite)>
  [160] getchainedprop 454 ...................... <sprite(iSprite).member>
  [163] getlocal 5 .............................. <sPaletteMember>
  [165] getparam 0 .............................. <me>
  [167] getobjprop 253 .......................... <me.sCastLib>
  [169] pusharglist 2 ........................... <sPaletteMember, me.sCastLib>
  [171] extcall 454 ............................. <member(sPaletteMember, me.sCastLib)>
  [174] setobjprop 607 .......................... sprite(iSprite).member.palette = member(sPaletteMember, me.sCastLib)
  [177] getparam 3 .............................. <iSprite>
  [179] pusharglist 1 ........................... <iSprite>
  [181] extcall 451 ............................. <sprite(iSprite)>
  [184] getparam 2 .............................. <aColorData>
  [186] getobjprop 963 .......................... <aColorData.textureBlend>
  [189] setobjprop 463 .......................... sprite(iSprite).blend = aColorData.textureBlend
  [192] pop 1 ................................... end case
  [194] ret
end

on setRandomPattern me
  [  0] getparam 0 .............................. <me>
  [  2] pushsymb 930 ............................ <#aPatterns>
  [  5] pusharglist 2 ........................... <me, #aPatterns>
  [  7] objcall 169 ............................. <me.aPatterns.count>
  [  9] pusharglist 1 ........................... <me.aPatterns.count>
  [ 11] extcall 469 ............................. <random(me.aPatterns.count)>
  [ 14] setlocal 0 .............................. iPatternIndex = random(me.aPatterns.count)
  [ 16] getparam 0 .............................. <me>
  [ 18] pushsymb 930 ............................ <#aPatterns>
  [ 21] getlocal 0 .............................. <iPatternIndex>
  [ 23] pusharglist 3 ........................... <me, #aPatterns, iPatternIndex>
  [ 25] objcall 577 ............................. <me.aPatterns[iPatternIndex]>
  [ 28] setlocal 1 .............................. aColors = me.aPatterns[iPatternIndex]
  [ 30] getlocal 1 .............................. <aColors>
  [ 32] getobjprop 169 .......................... <aColors.count>
  [ 34] pusharglist 1 ........................... <aColors.count>
  [ 36] extcall 469 ............................. <random(aColors.count)>
  [ 39] setlocal 2 .............................. iColorIndex = random(aColors.count)
  [ 41] getparam 0 .............................. <me>
  [ 43] getlocal 0 .............................. <iPatternIndex>
  [ 45] getlocal 2 .............................. <iColorIndex>
  [ 47] pusharglistnoret 3 ...................... <me, iPatternIndex, iColorIndex>
  [ 49] objcall 926 ............................. me.setPattern(iPatternIndex, iColorIndex)
  [ 52] ret
end
