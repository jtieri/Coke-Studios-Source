on base64Encode aBinaryString, aNoWrap, aUrlSafe
  [  0] getparam 2 .............................. <aUrlSafe>
  [  2] pushzero ................................ <0>
  [  3] eq ...................................... <aUrlSafe = 0>
  [  4] jmpifz [ 18] ............................ if aUrlSafe = 0 then / else
  [  7] pushcons 0 .............................. <"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/">
  [  9] setlocal 0 .............................. vBase64Lookup = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
  [ 11] pushcons 1 .............................. <"=">
  [ 13] setlocal 1 .............................. vTrail = "="
  [ 15] jmp [ 26]
  [ 18] pushcons 2 .............................. <"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_">
  [ 20] setlocal 0 .............................. vBase64Lookup = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
  [ 22] pushcons 3 .............................. <".">
  [ 24] setlocal 1 .............................. vTrail = "."
  [ 26] pushcons 4 .............................. <EMPTY>
  [ 28] setlocal 2 .............................. vOutput = EMPTY
  [ 30] pushint8 1 .............................. <1>
  [ 32] setlocal 3 .............................. vIndex = 1
  [ 34] getparam 0 .............................. <aBinaryString>
  [ 36] getobjprop 22 ........................... <aBinaryString.length>
  [ 38] pushint8 3 .............................. <3>
  [ 40] mod ..................................... <aBinaryString.length mod 3>
  [ 41] setlocal 4 .............................. vTrailingBytes = aBinaryString.length mod 3
  [ 43] getparam 0 .............................. <aBinaryString>
  [ 45] getobjprop 22 ........................... <aBinaryString.length>
  [ 47] getlocal 4 .............................. <vTrailingBytes>
  [ 49] sub ..................................... <aBinaryString.length - vTrailingBytes>
  [ 50] setlocal 5 .............................. vLengthWhole = aBinaryString.length - vTrailingBytes
  [ 52] getlocal 3 .............................. <vIndex>
  [ 54] getlocal 5 .............................. <vLengthWhole>
  [ 56] lt ...................................... <vIndex < vLengthWhole>
  [ 57] jmpifz [274] ............................ repeat while vIndex < vLengthWhole
  [ 60] getparam 0 .............................. <aBinaryString>
  [ 62] pushsymb 27 ............................. <#char>
  [ 64] getlocal 3 .............................. <vIndex>
  [ 66] pusharglist 3 ........................... <aBinaryString, #char, vIndex>
  [ 68] objcall 28 .............................. <aBinaryString.char[vIndex]>
  [ 70] pusharglist 1 ........................... <aBinaryString.char[vIndex]>
  [ 72] extcall 26 .............................. <charToNum(aBinaryString.char[vIndex])>
  [ 74] setlocal 6 .............................. vByte1 = charToNum(aBinaryString.char[vIndex])
  [ 76] getparam 0 .............................. <aBinaryString>
  [ 78] pushsymb 27 ............................. <#char>
  [ 80] getlocal 3 .............................. <vIndex>
  [ 82] pushint8 1 .............................. <1>
  [ 84] add ..................................... <vIndex + 1>
  [ 85] pusharglist 3 ........................... <aBinaryString, #char, vIndex + 1>
  [ 87] objcall 28 .............................. <aBinaryString.char[vIndex + 1]>
  [ 89] pusharglist 1 ........................... <aBinaryString.char[vIndex + 1]>
  [ 91] extcall 26 .............................. <charToNum(aBinaryString.char[vIndex + 1])>
  [ 93] setlocal 7 .............................. vByte2 = charToNum(aBinaryString.char[vIndex + 1])
  [ 95] getparam 0 .............................. <aBinaryString>
  [ 97] pushsymb 27 ............................. <#char>
  [ 99] getlocal 3 .............................. <vIndex>
  [101] pushint8 2 .............................. <2>
  [103] add ..................................... <vIndex + 2>
  [104] pusharglist 3 ........................... <aBinaryString, #char, vIndex + 2>
  [106] objcall 28 .............................. <aBinaryString.char[vIndex + 2]>
  [108] pusharglist 1 ........................... <aBinaryString.char[vIndex + 2]>
  [110] extcall 26 .............................. <charToNum(aBinaryString.char[vIndex + 2])>
  [112] setlocal 8 .............................. vByte3 = charToNum(aBinaryString.char[vIndex + 2])
  [114] getlocal 0 .............................. <vBase64Lookup>
  [116] pushsymb 27 ............................. <#char>
  [118] getlocal 6 .............................. <vByte1>
  [120] pushint16 252 ........................... <252>
  [123] pusharglist 2 ........................... <vByte1, 252>
  [125] extcall 41 .............................. <bitAnd(vByte1, 252)>
  [127] pushint8 4 .............................. <4>
  [129] div ..................................... <bitAnd(vByte1, 252) / 4>
  [130] pushint8 1 .............................. <1>
  [132] add ..................................... <(bitAnd(vByte1, 252) / 4) + 1>
  [133] pusharglist 3 ........................... <vBase64Lookup, #char, (bitAnd(vByte1, 252) / 4) + 1>
  [135] objcall 28 .............................. <vBase64Lookup.char[(bitAnd(vByte1, 252) / 4) + 1]>
  [137] setlocal 9 .............................. vChar1 = vBase64Lookup.char[(bitAnd(vByte1, 252) / 4) + 1]
  [139] getlocal 0 .............................. <vBase64Lookup>
  [141] pushsymb 27 ............................. <#char>
  [143] getlocal 6 .............................. <vByte1>
  [145] pushint16 256 ........................... <256>
  [148] mul ..................................... <vByte1 * 256>
  [149] getlocal 7 .............................. <vByte2>
  [151] add ..................................... <(vByte1 * 256) + vByte2>
  [152] pushint16 1008 .......................... <1008>
  [155] pusharglist 2 ........................... <(vByte1 * 256) + vByte2, 1008>
  [157] extcall 41 .............................. <bitAnd((vByte1 * 256) + vByte2, 1008)>
  [159] pushint8 16 ............................. <16>
  [161] div ..................................... <bitAnd((vByte1 * 256) + vByte2, 1008) / 16>
  [162] pushint8 1 .............................. <1>
  [164] add ..................................... <(bitAnd((vByte1 * 256) + vByte2, 1008) / 16) + 1>
  [165] pusharglist 3 ........................... <vBase64Lookup, #char, (bitAnd((vByte1 * 256) + vByte2, 1008) / 16) + 1>
  [167] objcall 28 .............................. <vBase64Lookup.char[(bitAnd((vByte1 * 256) + vByte2, 1008) / 16) + 1]>
  [169] setlocal 10 ............................. vChar2 = vBase64Lookup.char[(bitAnd((vByte1 * 256) + vByte2, 1008) / 16) + 1]
  [171] getlocal 0 .............................. <vBase64Lookup>
  [173] pushsymb 27 ............................. <#char>
  [175] getlocal 7 .............................. <vByte2>
  [177] pushint16 256 ........................... <256>
  [180] mul ..................................... <vByte2 * 256>
  [181] getlocal 8 .............................. <vByte3>
  [183] add ..................................... <(vByte2 * 256) + vByte3>
  [184] pushint16 4032 .......................... <4032>
  [187] pusharglist 2 ........................... <(vByte2 * 256) + vByte3, 4032>
  [189] extcall 41 .............................. <bitAnd((vByte2 * 256) + vByte3, 4032)>
  [191] pushint8 64 ............................. <64>
  [193] div ..................................... <bitAnd((vByte2 * 256) + vByte3, 4032) / 64>
  [194] pushint8 1 .............................. <1>
  [196] add ..................................... <(bitAnd((vByte2 * 256) + vByte3, 4032) / 64) + 1>
  [197] pusharglist 3 ........................... <vBase64Lookup, #char, (bitAnd((vByte2 * 256) + vByte3, 4032) / 64) + 1>
  [199] objcall 28 .............................. <vBase64Lookup.char[(bitAnd((vByte2 * 256) + vByte3, 4032) / 64) + 1]>
  [201] setlocal 11 ............................. vChar3 = vBase64Lookup.char[(bitAnd((vByte2 * 256) + vByte3, 4032) / 64) + 1]
  [203] getlocal 0 .............................. <vBase64Lookup>
  [205] pushsymb 27 ............................. <#char>
  [207] getlocal 8 .............................. <vByte3>
  [209] pushint8 63 ............................. <63>
  [211] pusharglist 2 ........................... <vByte3, 63>
  [213] extcall 41 .............................. <bitAnd(vByte3, 63)>
  [215] pushint8 1 .............................. <1>
  [217] add ..................................... <bitAnd(vByte3, 63) + 1>
  [218] pusharglist 3 ........................... <vBase64Lookup, #char, bitAnd(vByte3, 63) + 1>
  [220] objcall 28 .............................. <vBase64Lookup.char[bitAnd(vByte3, 63) + 1]>
  [222] setlocal 12 ............................. vChar4 = vBase64Lookup.char[bitAnd(vByte3, 63) + 1]
  [224] getlocal 9 .............................. <vChar1>
  [226] getlocal 10 ............................. <vChar2>
  [228] joinstr ................................. <vChar1 & vChar2>
  [229] getlocal 11 ............................. <vChar3>
  [231] joinstr ................................. <vChar1 & vChar2 & vChar3>
  [232] getlocal 12 ............................. <vChar4>
  [234] joinstr ................................. <vChar1 & vChar2 & vChar3 & vChar4>
  [235] pushint8 2 .............................. <2>
  [237] put 37 .................................. put vChar1 & vChar2 & vChar3 & vChar4 after vOutput
  [239] getlocal 3 .............................. <vIndex>
  [241] pushint8 3 .............................. <3>
  [243] add ..................................... <vIndex + 3>
  [244] setlocal 3 .............................. vIndex = vIndex + 3
  [246] getparam 1 .............................. <aNoWrap>
  [248] pushzero ................................ <0>
  [249] eq ...................................... <aNoWrap = 0>
  [250] jmpifz [272] ............................ if aNoWrap = 0 then
  [253] getlocal 3 .............................. <vIndex>
  [255] pushint8 1 .............................. <1>
  [257] sub ..................................... <vIndex - 1>
  [258] pushint8 57 ............................. <57>
  [260] mod ..................................... <(vIndex - 1) mod 57>
  [261] pushzero ................................ <0>
  [262] eq ...................................... <((vIndex - 1) mod 57) = 0>
  [263] jmpifz [272] ............................ if ((vIndex - 1) mod 57) = 0 then
  [266] pushcons 5 .............................. <RETURN>
  [268] pushint8 2 .............................. <2>
  [270] put 37 .................................. put RETURN after vOutput
  [272] endrepeat [ 52]
  [274] getlocal 4 .............................. <vTrailingBytes>
  [276] pushint8 1 .............................. <1>
  [278] eq ...................................... <vTrailingBytes = 1>
  [279] jmpifz [378] ............................ if vTrailingBytes = 1 then / else
  [282] getparam 0 .............................. <aBinaryString>
  [284] pushsymb 27 ............................. <#char>
  [286] getlocal 3 .............................. <vIndex>
  [288] pusharglist 3 ........................... <aBinaryString, #char, vIndex>
  [290] objcall 28 .............................. <aBinaryString.char[vIndex]>
  [292] pusharglist 1 ........................... <aBinaryString.char[vIndex]>
  [294] extcall 26 .............................. <charToNum(aBinaryString.char[vIndex])>
  [296] setlocal 6 .............................. vByte1 = charToNum(aBinaryString.char[vIndex])
  [298] getlocal 0 .............................. <vBase64Lookup>
  [300] pushsymb 27 ............................. <#char>
  [302] getlocal 6 .............................. <vByte1>
  [304] pushint16 252 ........................... <252>
  [307] pusharglist 2 ........................... <vByte1, 252>
  [309] extcall 41 .............................. <bitAnd(vByte1, 252)>
  [311] pushint8 4 .............................. <4>
  [313] div ..................................... <bitAnd(vByte1, 252) / 4>
  [314] pushint8 1 .............................. <1>
  [316] add ..................................... <(bitAnd(vByte1, 252) / 4) + 1>
  [317] pusharglist 3 ........................... <vBase64Lookup, #char, (bitAnd(vByte1, 252) / 4) + 1>
  [319] objcall 28 .............................. <vBase64Lookup.char[(bitAnd(vByte1, 252) / 4) + 1]>
  [321] setlocal 9 .............................. vChar1 = vBase64Lookup.char[(bitAnd(vByte1, 252) / 4) + 1]
  [323] getlocal 0 .............................. <vBase64Lookup>
  [325] pushsymb 27 ............................. <#char>
  [327] getlocal 6 .............................. <vByte1>
  [329] pushint16 256 ........................... <256>
  [332] mul ..................................... <vByte1 * 256>
  [333] pushint16 1008 .......................... <1008>
  [336] pusharglist 2 ........................... <vByte1 * 256, 1008>
  [338] extcall 41 .............................. <bitAnd(vByte1 * 256, 1008)>
  [340] pushint8 16 ............................. <16>
  [342] div ..................................... <bitAnd(vByte1 * 256, 1008) / 16>
  [343] pushint8 1 .............................. <1>
  [345] add ..................................... <(bitAnd(vByte1 * 256, 1008) / 16) + 1>
  [346] pusharglist 3 ........................... <vBase64Lookup, #char, (bitAnd(vByte1 * 256, 1008) / 16) + 1>
  [348] objcall 28 .............................. <vBase64Lookup.char[(bitAnd(vByte1 * 256, 1008) / 16) + 1]>
  [350] setlocal 10 ............................. vChar2 = vBase64Lookup.char[(bitAnd(vByte1 * 256, 1008) / 16) + 1]
  [352] getlocal 1 .............................. <vTrail>
  [354] setlocal 11 ............................. vChar3 = vTrail
  [356] getlocal 1 .............................. <vTrail>
  [358] setlocal 12 ............................. vChar4 = vTrail
  [360] getlocal 9 .............................. <vChar1>
  [362] getlocal 10 ............................. <vChar2>
  [364] joinstr ................................. <vChar1 & vChar2>
  [365] getlocal 11 ............................. <vChar3>
  [367] joinstr ................................. <vChar1 & vChar2 & vChar3>
  [368] getlocal 12 ............................. <vChar4>
  [370] joinstr ................................. <vChar1 & vChar2 & vChar3 & vChar4>
  [371] pushint8 2 .............................. <2>
  [373] put 37 .................................. put vChar1 & vChar2 & vChar3 & vChar4 after vOutput
  [375] jmp [526]
  [378] getlocal 4 .............................. <vTrailingBytes>
  [380] pushint8 2 .............................. <2>
  [382] eq ...................................... <vTrailingBytes = 2>
  [383] jmpifz [526] ............................ if vTrailingBytes = 2 then
  [386] getparam 0 .............................. <aBinaryString>
  [388] pushsymb 27 ............................. <#char>
  [390] getlocal 3 .............................. <vIndex>
  [392] pusharglist 3 ........................... <aBinaryString, #char, vIndex>
  [394] objcall 28 .............................. <aBinaryString.char[vIndex]>
  [396] pusharglist 1 ........................... <aBinaryString.char[vIndex]>
  [398] extcall 26 .............................. <charToNum(aBinaryString.char[vIndex])>
  [400] setlocal 6 .............................. vByte1 = charToNum(aBinaryString.char[vIndex])
  [402] getparam 0 .............................. <aBinaryString>
  [404] pushsymb 27 ............................. <#char>
  [406] getlocal 3 .............................. <vIndex>
  [408] pushint8 1 .............................. <1>
  [410] add ..................................... <vIndex + 1>
  [411] pusharglist 3 ........................... <aBinaryString, #char, vIndex + 1>
  [413] objcall 28 .............................. <aBinaryString.char[vIndex + 1]>
  [415] pusharglist 1 ........................... <aBinaryString.char[vIndex + 1]>
  [417] extcall 26 .............................. <charToNum(aBinaryString.char[vIndex + 1])>
  [419] setlocal 7 .............................. vByte2 = charToNum(aBinaryString.char[vIndex + 1])
  [421] getlocal 0 .............................. <vBase64Lookup>
  [423] pushsymb 27 ............................. <#char>
  [425] getlocal 6 .............................. <vByte1>
  [427] pushint16 252 ........................... <252>
  [430] pusharglist 2 ........................... <vByte1, 252>
  [432] extcall 41 .............................. <bitAnd(vByte1, 252)>
  [434] pushint8 4 .............................. <4>
  [436] div ..................................... <bitAnd(vByte1, 252) / 4>
  [437] pushint8 1 .............................. <1>
  [439] add ..................................... <(bitAnd(vByte1, 252) / 4) + 1>
  [440] pusharglist 3 ........................... <vBase64Lookup, #char, (bitAnd(vByte1, 252) / 4) + 1>
  [442] objcall 28 .............................. <vBase64Lookup.char[(bitAnd(vByte1, 252) / 4) + 1]>
  [444] setlocal 9 .............................. vChar1 = vBase64Lookup.char[(bitAnd(vByte1, 252) / 4) + 1]
  [446] getlocal 0 .............................. <vBase64Lookup>
  [448] pushsymb 27 ............................. <#char>
  [450] getlocal 6 .............................. <vByte1>
  [452] pushint16 256 ........................... <256>
  [455] mul ..................................... <vByte1 * 256>
  [456] getlocal 7 .............................. <vByte2>
  [458] add ..................................... <(vByte1 * 256) + vByte2>
  [459] pushint16 1008 .......................... <1008>
  [462] pusharglist 2 ........................... <(vByte1 * 256) + vByte2, 1008>
  [464] extcall 41 .............................. <bitAnd((vByte1 * 256) + vByte2, 1008)>
  [466] pushint8 16 ............................. <16>
  [468] div ..................................... <bitAnd((vByte1 * 256) + vByte2, 1008) / 16>
  [469] pushint8 1 .............................. <1>
  [471] add ..................................... <(bitAnd((vByte1 * 256) + vByte2, 1008) / 16) + 1>
  [472] pusharglist 3 ........................... <vBase64Lookup, #char, (bitAnd((vByte1 * 256) + vByte2, 1008) / 16) + 1>
  [474] objcall 28 .............................. <vBase64Lookup.char[(bitAnd((vByte1 * 256) + vByte2, 1008) / 16) + 1]>
  [476] setlocal 10 ............................. vChar2 = vBase64Lookup.char[(bitAnd((vByte1 * 256) + vByte2, 1008) / 16) + 1]
  [478] getlocal 0 .............................. <vBase64Lookup>
  [480] pushsymb 27 ............................. <#char>
  [482] getlocal 7 .............................. <vByte2>
  [484] pushint16 256 ........................... <256>
  [487] mul ..................................... <vByte2 * 256>
  [488] pushint16 4032 .......................... <4032>
  [491] pusharglist 2 ........................... <vByte2 * 256, 4032>
  [493] extcall 41 .............................. <bitAnd(vByte2 * 256, 4032)>
  [495] pushint8 64 ............................. <64>
  [497] div ..................................... <bitAnd(vByte2 * 256, 4032) / 64>
  [498] pushint8 1 .............................. <1>
  [500] add ..................................... <(bitAnd(vByte2 * 256, 4032) / 64) + 1>
  [501] pusharglist 3 ........................... <vBase64Lookup, #char, (bitAnd(vByte2 * 256, 4032) / 64) + 1>
  [503] objcall 28 .............................. <vBase64Lookup.char[(bitAnd(vByte2 * 256, 4032) / 64) + 1]>
  [505] setlocal 11 ............................. vChar3 = vBase64Lookup.char[(bitAnd(vByte2 * 256, 4032) / 64) + 1]
  [507] getlocal 1 .............................. <vTrail>
  [509] setlocal 12 ............................. vChar4 = vTrail
  [511] getlocal 9 .............................. <vChar1>
  [513] getlocal 10 ............................. <vChar2>
  [515] joinstr ................................. <vChar1 & vChar2>
  [516] getlocal 11 ............................. <vChar3>
  [518] joinstr ................................. <vChar1 & vChar2 & vChar3>
  [519] getlocal 12 ............................. <vChar4>
  [521] joinstr ................................. <vChar1 & vChar2 & vChar3 & vChar4>
  [522] pushint8 2 .............................. <2>
  [524] put 37 .................................. put vChar1 & vChar2 & vChar3 & vChar4 after vOutput
  [526] getlocal 2 .............................. <vOutput>
  [528] pusharglistnoret 1 ...................... <vOutput>
  [530] extcall 18 .............................. return vOutput
  [532] ret
end

on base64Decode aEncodedString, aUrlSafe
  [  0] pushcons 6 .............................. <"A">
  [  2] pushzero ................................ <0>
  [  3] pushcons 7 .............................. <"B">
  [  5] pushint8 1 .............................. <1>
  [  7] pushcons 8 .............................. <"C">
  [  9] pushint8 2 .............................. <2>
  [ 11] pushcons 9 .............................. <"D">
  [ 13] pushint8 3 .............................. <3>
  [ 15] pushcons 10 ............................. <"E">
  [ 17] pushint8 4 .............................. <4>
  [ 19] pushcons 11 ............................. <"F">
  [ 21] pushint8 5 .............................. <5>
  [ 23] pushcons 12 ............................. <"G">
  [ 25] pushint8 6 .............................. <6>
  [ 27] pushcons 13 ............................. <"H">
  [ 29] pushint8 7 .............................. <7>
  [ 31] pushcons 14 ............................. <"I">
  [ 33] pushint8 8 .............................. <8>
  [ 35] pushcons 15 ............................. <"J">
  [ 37] pushint8 9 .............................. <9>
  [ 39] pushcons 16 ............................. <"K">
  [ 41] pushint8 10 ............................. <10>
  [ 43] pushcons 17 ............................. <"L">
  [ 45] pushint8 11 ............................. <11>
  [ 47] pushcons 18 ............................. <"M">
  [ 49] pushint8 12 ............................. <12>
  [ 51] pushcons 19 ............................. <"N">
  [ 53] pushint8 13 ............................. <13>
  [ 55] pushcons 20 ............................. <"O">
  [ 57] pushint8 14 ............................. <14>
  [ 59] pushcons 21 ............................. <"P">
  [ 61] pushint8 15 ............................. <15>
  [ 63] pushcons 22 ............................. <"Q">
  [ 65] pushint8 16 ............................. <16>
  [ 67] pushcons 23 ............................. <"R">
  [ 69] pushint8 17 ............................. <17>
  [ 71] pushcons 24 ............................. <"S">
  [ 73] pushint8 18 ............................. <18>
  [ 75] pushcons 25 ............................. <"T">
  [ 77] pushint8 19 ............................. <19>
  [ 79] pushcons 26 ............................. <"U">
  [ 81] pushint8 20 ............................. <20>
  [ 83] pushcons 27 ............................. <"V">
  [ 85] pushint8 21 ............................. <21>
  [ 87] pushcons 28 ............................. <"W">
  [ 89] pushint8 22 ............................. <22>
  [ 91] pushcons 29 ............................. <"X">
  [ 93] pushint8 23 ............................. <23>
  [ 95] pushcons 30 ............................. <"Y">
  [ 97] pushint8 24 ............................. <24>
  [ 99] pushcons 31 ............................. <"Z">
  [101] pushint8 25 ............................. <25>
  [103] pushcons 32 ............................. <"a">
  [105] pushint8 26 ............................. <26>
  [107] pushcons 33 ............................. <"b">
  [109] pushint8 27 ............................. <27>
  [111] pushcons 34 ............................. <"c">
  [113] pushint8 28 ............................. <28>
  [115] pushcons 35 ............................. <"d">
  [117] pushint8 29 ............................. <29>
  [119] pushcons 36 ............................. <"e">
  [121] pushint8 30 ............................. <30>
  [123] pushcons 37 ............................. <"f">
  [125] pushint8 31 ............................. <31>
  [127] pushcons 38 ............................. <"g">
  [129] pushint8 32 ............................. <32>
  [131] pushcons 39 ............................. <"h">
  [133] pushint8 33 ............................. <33>
  [135] pushcons 40 ............................. <"i">
  [137] pushint8 34 ............................. <34>
  [139] pushcons 41 ............................. <"j">
  [141] pushint8 35 ............................. <35>
  [143] pushcons 42 ............................. <"k">
  [145] pushint8 36 ............................. <36>
  [147] pushcons 43 ............................. <"l">
  [149] pushint8 37 ............................. <37>
  [151] pushcons 44 ............................. <"m">
  [153] pushint8 38 ............................. <38>
  [155] pushcons 45 ............................. <"n">
  [157] pushint8 39 ............................. <39>
  [159] pushcons 46 ............................. <"o">
  [161] pushint8 40 ............................. <40>
  [163] pushcons 47 ............................. <"p">
  [165] pushint8 41 ............................. <41>
  [167] pushcons 48 ............................. <"q">
  [169] pushint8 42 ............................. <42>
  [171] pushcons 49 ............................. <"r">
  [173] pushint8 43 ............................. <43>
  [175] pushcons 50 ............................. <"s">
  [177] pushint8 44 ............................. <44>
  [179] pushcons 51 ............................. <"t">
  [181] pushint8 45 ............................. <45>
  [183] pushcons 52 ............................. <"u">
  [185] pushint8 46 ............................. <46>
  [187] pushcons 53 ............................. <"v">
  [189] pushint8 47 ............................. <47>
  [191] pushcons 54 ............................. <"w">
  [193] pushint8 48 ............................. <48>
  [195] pushcons 55 ............................. <"x">
  [197] pushint8 49 ............................. <49>
  [199] pushcons 56 ............................. <"y">
  [201] pushint8 50 ............................. <50>
  [203] pushcons 57 ............................. <"z">
  [205] pushint8 51 ............................. <51>
  [207] pushcons 58 ............................. <"0">
  [209] pushint8 52 ............................. <52>
  [211] pushcons 59 ............................. <"1">
  [213] pushint8 53 ............................. <53>
  [215] pushcons 60 ............................. <"2">
  [217] pushint8 54 ............................. <54>
  [219] pushcons 61 ............................. <"3">
  [221] pushint8 55 ............................. <55>
  [223] pushcons 62 ............................. <"4">
  [225] pushint8 56 ............................. <56>
  [227] pushcons 63 ............................. <"5">
  [229] pushint8 57 ............................. <57>
  [231] pushcons 64 ............................. <"6">
  [233] pushint8 58 ............................. <58>
  [235] pushcons 65 ............................. <"7">
  [237] pushint8 59 ............................. <59>
  [239] pushcons 66 ............................. <"8">
  [241] pushint8 60 ............................. <60>
  [243] pushcons 67 ............................. <"9">
  [245] pushint8 61 ............................. <61>
  [247] pusharglist 124 ......................... <["A": 0, "B": 1, "C": 2, "D": 3, "E": 4, "F": 5, "G": 6, "H": 7, "I": 8, "J": 9, "K": 10, "L": 11, "M": 12, "N": 13, "O": 14, "P": 15, "Q": 16, "R": 17, "S": 18, "T": 19, "U": 20, "V": 21, "W": 22, "X": 23, "Y": 24, "Z": 25, "a": 26, "b": 27, "c": 28, "d": 29, "e": 30, "f": 31, "g": 32, "h": 33, "i": 34, "j": 35, "k": 36, "l": 37, "m": 38, "n": 39, "o": 40, "p": 41, "q": 42, "r": 43, "s": 44, "t": 45, "u": 46, "v": 47, "w": 48, "x": 49, "y": 50, "z": 51, "0": 52, "1": 53, "2": 54, "3": 55, "4": 56, "5": 57, "6": 58, "7": 59, "8": 60, "9": 61]>
  [249] pushproplist ............................ <["A": 0, "B": 1, "C": 2, "D": 3, "E": 4, "F": 5, "G": 6, "H": 7, "I": 8, "J": 9, "K": 10, "L": 11, "M": 12, "N": 13, "O": 14, "P": 15, "Q": 16, "R": 17, "S": 18, "T": 19, "U": 20, "V": 21, "W": 22, "X": 23, "Y": 24, "Z": 25, "a": 26, "b": 27, "c": 28, "d": 29, "e": 30, "f": 31, "g": 32, "h": 33, "i": 34, "j": 35, "k": 36, "l": 37, "m": 38, "n": 39, "o": 40, "p": 41, "q": 42, "r": 43, "s": 44, "t": 45, "u": 46, "v": 47, "w": 48, "x": 49, "y": 50, "z": 51, "0": 52, "1": 53, "2": 54, "3": 55, "4": 56, "5": 57, "6": 58, "7": 59, "8": 60, "9": 61]>
  [250] setlocal 0 .............................. vBase64Lookup = ["A": 0, "B": 1, "C": 2, "D": 3, "E": 4, "F": 5, "G": 6, "H": 7, "I": 8, "J": 9, "K": 10, "L": 11, "M": 12, "N": 13, "O": 14, "P": 15, "Q": 16, "R": 17, "S": 18, "T": 19, "U": 20, "V": 21, "W": 22, "X": 23, "Y": 24, "Z": 25, "a": 26, "b": 27, "c": 28, "d": 29, "e": 30, "f": 31, "g": 32, "h": 33, "i": 34, "j": 35, "k": 36, "l": 37, "m": 38, "n": 39, "o": 40, "p": 41, "q": 42, "r": 43, "s": 44, "t": 45, "u": 46, "v": 47, "w": 48, "x": 49, "y": 50, "z": 51, "0": 52, "1": 53, "2": 54, "3": 55, "4": 56, "5": 57, "6": 58, "7": 59, "8": 60, "9": 61]
  [252] getparam 1 .............................. <aUrlSafe>
  [254] pushzero ................................ <0>
  [255] eq ...................................... <aUrlSafe = 0>
  [256] jmpifz [282] ............................ if aUrlSafe = 0 then / else
  [259] getlocal 0 .............................. <vBase64Lookup>
  [261] pushcons 68 ............................. <"+">
  [263] pushint8 62 ............................. <62>
  [265] pusharglistnoret 3 ...................... <vBase64Lookup, "+", 62>
  [267] objcall 31 .............................. vBase64Lookup["+"] = 62
  [269] getlocal 0 .............................. <vBase64Lookup>
  [271] pushcons 69 ............................. <"/">
  [273] pushint8 63 ............................. <63>
  [275] pusharglistnoret 3 ...................... <vBase64Lookup, "/", 63>
  [277] objcall 31 .............................. vBase64Lookup["/"] = 63
  [279] jmp [302]
  [282] getlocal 0 .............................. <vBase64Lookup>
  [284] pushcons 70 ............................. <"-">
  [286] pushint8 62 ............................. <62>
  [288] pusharglistnoret 3 ...................... <vBase64Lookup, "-", 62>
  [290] objcall 31 .............................. vBase64Lookup["-"] = 62
  [292] getlocal 0 .............................. <vBase64Lookup>
  [294] pushcons 71 ............................. <"_">
  [296] pushint8 63 ............................. <63>
  [298] pusharglistnoret 3 ...................... <vBase64Lookup, "_", 63>
  [300] objcall 31 .............................. vBase64Lookup["_"] = 63
  [302] pushcons 4 .............................. <EMPTY>
  [304] setlocal 1 .............................. vOutput = EMPTY
  [306] pusharglist 0 ........................... <[]>
  [308] pushlist ................................ <[]>
  [309] setlocal 2 .............................. vQuanta = []
  [311] pushint8 1 .............................. <1>
  [313] setlocal 3
  [315] getlocal 3
  [317] getparam 0 .............................. <aEncodedString>
  [319] getobjprop 22 ........................... <aEncodedString.length>
  [321] lteq
  [322] jmpifz [502] ............................ repeat with vIndex = 1 to aEncodedString.length
  [325] getlocal 0 .............................. <vBase64Lookup>
  [327] getparam 0 .............................. <aEncodedString>
  [329] pushsymb 27 ............................. <#char>
  [331] getlocal 3 .............................. <vIndex>
  [333] pusharglist 3 ........................... <aEncodedString, #char, vIndex>
  [335] objcall 28 .............................. <aEncodedString.char[vIndex]>
  [337] pusharglist 2 ........................... <vBase64Lookup, aEncodedString.char[vIndex]>
  [339] objcall 71 .............................. <vBase64Lookup.getaProp(aEncodedString.char[vIndex])>
  [341] setlocal 4 .............................. ch = vBase64Lookup.getaProp(aEncodedString.char[vIndex])
  [343] getlocal 4 .............................. <ch>
  [345] pusharglist 1 ........................... <ch>
  [347] extcall 72 .............................. <voidp(ch)>
  [349] not ..................................... <not voidp(ch)>
  [350] jmpifz [361] ............................ if not voidp(ch) then
  [353] getlocal 2 .............................. <vQuanta>
  [355] getlocal 4 .............................. <ch>
  [357] pusharglistnoret 2 ...................... <vQuanta, ch>
  [359] objcall 73 .............................. vQuanta.add(ch)
  [361] getlocal 2 .............................. <vQuanta>
  [363] getobjprop 74 ........................... <vQuanta.count>
  [365] pushint8 4 .............................. <4>
  [367] eq ...................................... <vQuanta.count = 4>
  [368] jmpifz [493] ............................ if vQuanta.count = 4 then
  [371] getlocal 2 .............................. <vQuanta>
  [373] pushint8 1 .............................. <1>
  [375] pusharglist 2 ........................... <vQuanta, 1>
  [377] objcall 30 .............................. <vQuanta[1]>
  [379] pushint8 64 ............................. <64>
  [381] mul ..................................... <vQuanta[1] * 64>
  [382] getlocal 2 .............................. <vQuanta>
  [384] pushint8 2 .............................. <2>
  [386] pusharglist 2 ........................... <vQuanta, 2>
  [388] objcall 30 .............................. <vQuanta[2]>
  [390] add ..................................... <(vQuanta[1] * 64) + vQuanta[2]>
  [391] pushint16 4080 .......................... <4080>
  [394] pusharglist 2 ........................... <(vQuanta[1] * 64) + vQuanta[2], 4080>
  [396] extcall 41 .............................. <bitAnd((vQuanta[1] * 64) + vQuanta[2], 4080)>
  [398] pushint8 16 ............................. <16>
  [400] div ..................................... <bitAnd((vQuanta[1] * 64) + vQuanta[2], 4080) / 16>
  [401] pusharglist 1 ........................... <bitAnd((vQuanta[1] * 64) + vQuanta[2], 4080) / 16>
  [403] extcall 40 .............................. <numToChar(bitAnd((vQuanta[1] * 64) + vQuanta[2], 4080) / 16)>
  [405] setlocal 5 .............................. vByte1 = numToChar(bitAnd((vQuanta[1] * 64) + vQuanta[2], 4080) / 16)
  [407] getlocal 2 .............................. <vQuanta>
  [409] pushint8 2 .............................. <2>
  [411] pusharglist 2 ........................... <vQuanta, 2>
  [413] objcall 30 .............................. <vQuanta[2]>
  [415] pushint8 64 ............................. <64>
  [417] mul ..................................... <vQuanta[2] * 64>
  [418] getlocal 2 .............................. <vQuanta>
  [420] pushint8 3 .............................. <3>
  [422] pusharglist 2 ........................... <vQuanta, 3>
  [424] objcall 30 .............................. <vQuanta[3]>
  [426] add ..................................... <(vQuanta[2] * 64) + vQuanta[3]>
  [427] pushint16 1020 .......................... <1020>
  [430] pusharglist 2 ........................... <(vQuanta[2] * 64) + vQuanta[3], 1020>
  [432] extcall 41 .............................. <bitAnd((vQuanta[2] * 64) + vQuanta[3], 1020)>
  [434] pushint8 4 .............................. <4>
  [436] div ..................................... <bitAnd((vQuanta[2] * 64) + vQuanta[3], 1020) / 4>
  [437] pusharglist 1 ........................... <bitAnd((vQuanta[2] * 64) + vQuanta[3], 1020) / 4>
  [439] extcall 40 .............................. <numToChar(bitAnd((vQuanta[2] * 64) + vQuanta[3], 1020) / 4)>
  [441] setlocal 6 .............................. vByte2 = numToChar(bitAnd((vQuanta[2] * 64) + vQuanta[3], 1020) / 4)
  [443] getlocal 2 .............................. <vQuanta>
  [445] pushint8 3 .............................. <3>
  [447] pusharglist 2 ........................... <vQuanta, 3>
  [449] objcall 30 .............................. <vQuanta[3]>
  [451] pushint8 64 ............................. <64>
  [453] mul ..................................... <vQuanta[3] * 64>
  [454] getlocal 2 .............................. <vQuanta>
  [456] pushint8 4 .............................. <4>
  [458] pusharglist 2 ........................... <vQuanta, 4>
  [460] objcall 30 .............................. <vQuanta[4]>
  [462] add ..................................... <(vQuanta[3] * 64) + vQuanta[4]>
  [463] pushint16 255 ........................... <255>
  [466] pusharglist 2 ........................... <(vQuanta[3] * 64) + vQuanta[4], 255>
  [468] extcall 41 .............................. <bitAnd((vQuanta[3] * 64) + vQuanta[4], 255)>
  [470] pusharglist 1 ........................... <bitAnd((vQuanta[3] * 64) + vQuanta[4], 255)>
  [472] extcall 40 .............................. <numToChar(bitAnd((vQuanta[3] * 64) + vQuanta[4], 255))>
  [474] setlocal 7 .............................. vByte3 = numToChar(bitAnd((vQuanta[3] * 64) + vQuanta[4], 255))
  [476] getlocal 5 .............................. <vByte1>
  [478] getlocal 6 .............................. <vByte2>
  [480] joinstr ................................. <vByte1 & vByte2>
  [481] getlocal 7 .............................. <vByte3>
  [483] joinstr ................................. <vByte1 & vByte2 & vByte3>
  [484] pushint8 1 .............................. <1>
  [486] put 37 .................................. put vByte1 & vByte2 & vByte3 after vOutput
  [488] pusharglist 0 ........................... <[]>
  [490] pushlist ................................ <[]>
  [491] setlocal 2 .............................. vQuanta = []
  [493] pushint8 1
  [495] getlocal 3
  [497] add
  [498] setlocal 3
  [500] endrepeat [315]
  [502] getlocal 2 .............................. <vQuanta>
  [504] getobjprop 74 ........................... <vQuanta.count>
  [506] pushint8 3 .............................. <3>
  [508] eq ...................................... <vQuanta.count = 3>
  [509] jmpifz [596] ............................ if vQuanta.count = 3 then / else
  [512] getlocal 2 .............................. <vQuanta>
  [514] pushint8 1 .............................. <1>
  [516] pusharglist 2 ........................... <vQuanta, 1>
  [518] objcall 30 .............................. <vQuanta[1]>
  [520] pushint8 64 ............................. <64>
  [522] mul ..................................... <vQuanta[1] * 64>
  [523] getlocal 2 .............................. <vQuanta>
  [525] pushint8 2 .............................. <2>
  [527] pusharglist 2 ........................... <vQuanta, 2>
  [529] objcall 30 .............................. <vQuanta[2]>
  [531] add ..................................... <(vQuanta[1] * 64) + vQuanta[2]>
  [532] pushint16 4080 .......................... <4080>
  [535] pusharglist 2 ........................... <(vQuanta[1] * 64) + vQuanta[2], 4080>
  [537] extcall 41 .............................. <bitAnd((vQuanta[1] * 64) + vQuanta[2], 4080)>
  [539] pushint8 16 ............................. <16>
  [541] div ..................................... <bitAnd((vQuanta[1] * 64) + vQuanta[2], 4080) / 16>
  [542] pusharglist 1 ........................... <bitAnd((vQuanta[1] * 64) + vQuanta[2], 4080) / 16>
  [544] extcall 40 .............................. <numToChar(bitAnd((vQuanta[1] * 64) + vQuanta[2], 4080) / 16)>
  [546] setlocal 5 .............................. vByte1 = numToChar(bitAnd((vQuanta[1] * 64) + vQuanta[2], 4080) / 16)
  [548] getlocal 2 .............................. <vQuanta>
  [550] pushint8 2 .............................. <2>
  [552] pusharglist 2 ........................... <vQuanta, 2>
  [554] objcall 30 .............................. <vQuanta[2]>
  [556] pushint8 64 ............................. <64>
  [558] mul ..................................... <vQuanta[2] * 64>
  [559] getlocal 2 .............................. <vQuanta>
  [561] pushint8 3 .............................. <3>
  [563] pusharglist 2 ........................... <vQuanta, 3>
  [565] objcall 30 .............................. <vQuanta[3]>
  [567] add ..................................... <(vQuanta[2] * 64) + vQuanta[3]>
  [568] pushint16 1020 .......................... <1020>
  [571] pusharglist 2 ........................... <(vQuanta[2] * 64) + vQuanta[3], 1020>
  [573] extcall 41 .............................. <bitAnd((vQuanta[2] * 64) + vQuanta[3], 1020)>
  [575] pushint8 4 .............................. <4>
  [577] div ..................................... <bitAnd((vQuanta[2] * 64) + vQuanta[3], 1020) / 4>
  [578] pusharglist 1 ........................... <bitAnd((vQuanta[2] * 64) + vQuanta[3], 1020) / 4>
  [580] extcall 40 .............................. <numToChar(bitAnd((vQuanta[2] * 64) + vQuanta[3], 1020) / 4)>
  [582] setlocal 6 .............................. vByte2 = numToChar(bitAnd((vQuanta[2] * 64) + vQuanta[3], 1020) / 4)
  [584] getlocal 5 .............................. <vByte1>
  [586] getlocal 6 .............................. <vByte2>
  [588] joinstr ................................. <vByte1 & vByte2>
  [589] pushint8 1 .............................. <1>
  [591] put 37 .................................. put vByte1 & vByte2 after vOutput
  [593] jmp [648]
  [596] getlocal 2 .............................. <vQuanta>
  [598] getobjprop 74 ........................... <vQuanta.count>
  [600] pushint8 2 .............................. <2>
  [602] eq ...................................... <vQuanta.count = 2>
  [603] jmpifz [648] ............................ if vQuanta.count = 2 then
  [606] getlocal 2 .............................. <vQuanta>
  [608] pushint8 1 .............................. <1>
  [610] pusharglist 2 ........................... <vQuanta, 1>
  [612] objcall 30 .............................. <vQuanta[1]>
  [614] pushint8 64 ............................. <64>
  [616] mul ..................................... <vQuanta[1] * 64>
  [617] getlocal 2 .............................. <vQuanta>
  [619] pushint8 2 .............................. <2>
  [621] pusharglist 2 ........................... <vQuanta, 2>
  [623] objcall 30 .............................. <vQuanta[2]>
  [625] add ..................................... <(vQuanta[1] * 64) + vQuanta[2]>
  [626] pushint16 4080 .......................... <4080>
  [629] pusharglist 2 ........................... <(vQuanta[1] * 64) + vQuanta[2], 4080>
  [631] extcall 41 .............................. <bitAnd((vQuanta[1] * 64) + vQuanta[2], 4080)>
  [633] pushint8 16 ............................. <16>
  [635] div ..................................... <bitAnd((vQuanta[1] * 64) + vQuanta[2], 4080) / 16>
  [636] pusharglist 1 ........................... <bitAnd((vQuanta[1] * 64) + vQuanta[2], 4080) / 16>
  [638] extcall 40 .............................. <numToChar(bitAnd((vQuanta[1] * 64) + vQuanta[2], 4080) / 16)>
  [640] setlocal 5 .............................. vByte1 = numToChar(bitAnd((vQuanta[1] * 64) + vQuanta[2], 4080) / 16)
  [642] getlocal 5 .............................. <vByte1>
  [644] pushint8 1 .............................. <1>
  [646] put 37 .................................. put vByte1 after vOutput
  [648] getlocal 1 .............................. <vOutput>
  [650] pusharglistnoret 1 ...................... <vOutput>
  [652] extcall 18 .............................. return vOutput
  [654] ret
end
