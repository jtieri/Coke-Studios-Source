property bDebug

on new me
  [  0] getparam 0 .............................. <me>
  [  2] pushzero ................................ <0>
  [  3] setobjprop 338 .......................... me.bDebug = 0
  [  6] getparam 0 .............................. <me>
  [  8] pusharglistnoret 1 ...................... <me>
  [ 10] extcall 52 .............................. return me
  [ 12] ret
end

on direction me, oP1, oP2
  [  0] getparam 1 .............................. <oP1>
  [  2] getobjprop 143 .......................... <oP1.locH>
  [  4] getparam 2 .............................. <oP2>
  [  6] getobjprop 143 .......................... <oP2.locH>
  [  8] sub ..................................... <oP1.locH - oP2.locH>
  [  9] getparam 1 .............................. <oP1>
  [ 11] getobjprop 122 .......................... <oP1.locV>
  [ 13] getparam 2 .............................. <oP2>
  [ 15] getobjprop 122 .......................... <oP2.locV>
  [ 17] sub ..................................... <oP1.locV - oP2.locV>
  [ 18] pusharglist 2 ........................... <oP1.locH - oP2.locH, oP1.locV - oP2.locV>
  [ 20] extcall 39 .............................. <point(oP1.locH - oP2.locH, oP1.locV - oP2.locV)>
  [ 22] pusharglistnoret 1 ...................... <point(oP1.locH - oP2.locH, oP1.locV - oP2.locV)>
  [ 24] extcall 52 .............................. return point(oP1.locH - oP2.locH, oP1.locV - oP2.locV)
  [ 26] ret
end

on length me, Op
  [  0] getparam 1 .............................. <Op>
  [  2] getobjprop 143 .......................... <Op.locH>
  [  4] getparam 1 .............................. <Op>
  [  6] getobjprop 143 .......................... <Op.locH>
  [  8] mul ..................................... <Op.locH * Op.locH>
  [  9] getparam 1 .............................. <Op>
  [ 11] getobjprop 122 .......................... <Op.locV>
  [ 13] getparam 1 .............................. <Op>
  [ 15] getobjprop 122 .......................... <Op.locV>
  [ 17] mul ..................................... <Op.locV * Op.locV>
  [ 18] add ..................................... <(Op.locH * Op.locH) + (Op.locV * Op.locV)>
  [ 19] pusharglist 1 ........................... <(Op.locH * Op.locH) + (Op.locV * Op.locV)>
  [ 21] extcall 618 ............................. <sqrt((Op.locH * Op.locH) + (Op.locV * Op.locV))>
  [ 24] pusharglistnoret 1 ...................... <sqrt((Op.locH * Op.locH) + (Op.locV * Op.locV))>
  [ 26] extcall 52 .............................. return sqrt((Op.locH * Op.locH) + (Op.locV * Op.locV))
  [ 28] ret
end

on unit me, Op
  [  0] getparam 0 .............................. <me>
  [  2] getparam 1 .............................. <Op>
  [  4] pusharglist 2 ........................... <me, Op>
  [  6] objcall 208 ............................. <me.length(Op)>
  [  8] setlocal 0 .............................. iLength = me.length(Op)
  [ 10] getlocal 0 .............................. <iLength>
  [ 12] pushzero ................................ <0>
  [ 13] eq ...................................... <iLength = 0>
  [ 14] jmpifz [ 23] ............................ if iLength = 0 then
  [ 17] getparam 1 .............................. <Op>
  [ 19] pusharglistnoret 1 ...................... <Op>
  [ 21] extcall 52 .............................. return Op
  [ 23] getparam 1 .............................. <Op>
  [ 25] getobjprop 143 .......................... <Op.locH>
  [ 27] getlocal 0 .............................. <iLength>
  [ 29] div ..................................... <Op.locH / iLength>
  [ 30] getparam 1 .............................. <Op>
  [ 32] getobjprop 122 .......................... <Op.locV>
  [ 34] getlocal 0 .............................. <iLength>
  [ 36] div ..................................... <Op.locV / iLength>
  [ 37] pusharglist 2 ........................... <Op.locH / iLength, Op.locV / iLength>
  [ 39] extcall 39 .............................. <point(Op.locH / iLength, Op.locV / iLength)>
  [ 41] pusharglistnoret 1 ...................... <point(Op.locH / iLength, Op.locV / iLength)>
  [ 43] extcall 52 .............................. return point(Op.locH / iLength, Op.locV / iLength)
  [ 45] ret
end

on dotProduct me, oP1, oP2
  [  0] getparam 0 .............................. <me>
  [  2] getparam 1 .............................. <oP1>
  [  4] pusharglist 2 ........................... <me, oP1>
  [  6] objcall 604 ............................. <me.unit(oP1)>
  [  9] setparam 1 .............................. oP1 = me.unit(oP1)
  [ 11] getparam 0 .............................. <me>
  [ 13] getparam 2 .............................. <oP2>
  [ 15] pusharglist 2 ........................... <me, oP2>
  [ 17] objcall 604 ............................. <me.unit(oP2)>
  [ 20] setparam 2 .............................. oP2 = me.unit(oP2)
  [ 22] getparam 0 .............................. <me>
  [ 24] getparam 1 .............................. <oP1>
  [ 26] getobjprop 143 .......................... <oP1.locH>
  [ 28] getparam 2 .............................. <oP2>
  [ 30] getobjprop 143 .......................... <oP2.locH>
  [ 32] mul ..................................... <oP1.locH * oP2.locH>
  [ 33] getparam 1 .............................. <oP1>
  [ 35] getobjprop 122 .......................... <oP1.locV>
  [ 37] getparam 2 .............................. <oP2>
  [ 39] getobjprop 122 .......................... <oP2.locV>
  [ 41] mul ..................................... <oP1.locV * oP2.locV>
  [ 42] add ..................................... <(oP1.locH * oP2.locH) + (oP1.locV * oP2.locV)>
  [ 43] pusharglist 2 ........................... <me, (oP1.locH * oP2.locH) + (oP1.locV * oP2.locV)>
  [ 45] objcall 607 ............................. <me.arccos((oP1.locH * oP2.locH) + (oP1.locV * oP2.locV))>
  [ 48] pusharglistnoret 1 ...................... <me.arccos((oP1.locH * oP2.locH) + (oP1.locV * oP2.locV))>
  [ 50] extcall 52 .............................. return me.arccos((oP1.locH * oP2.locH) + (oP1.locV * oP2.locV))
  [ 52] ret
end

on arcsin me, x
  [  0] getparam 1 .............................. <x>
  [  2] pushint8 1 .............................. <1>
  [  4] getparam 1 .............................. <x>
  [  6] getparam 1 .............................. <x>
  [  8] mul ..................................... <x * x>
  [  9] sub ..................................... <1 - (x * x)>
  [ 10] pusharglist 1 ........................... <1 - (x * x)>
  [ 12] extcall 618 ............................. <sqrt(1 - (x * x))>
  [ 15] div ..................................... <x / sqrt(1 - (x * x))>
  [ 16] pusharglist 1 ........................... <x / sqrt(1 - (x * x))>
  [ 18] extcall 621 ............................. <atan(x / sqrt(1 - (x * x)))>
  [ 21] setlocal 0 .............................. y = atan(x / sqrt(1 - (x * x)))
  [ 23] getlocal 0 .............................. <y>
  [ 25] pusharglistnoret 1 ...................... <y>
  [ 27] extcall 52 .............................. return y
  [ 29] ret
end

on arccos me, x
  [  0] pushint8 1 .............................. <1>
  [  2] getparam 1 .............................. <x>
  [  4] getparam 1 .............................. <x>
  [  6] mul ..................................... <x * x>
  [  7] sub ..................................... <1 - (x * x)>
  [  8] pusharglist 1 ........................... <1 - (x * x)>
  [ 10] extcall 618 ............................. <sqrt(1 - (x * x))>
  [ 13] getparam 1 .............................. <x>
  [ 15] div ..................................... <sqrt(1 - (x * x)) / x>
  [ 16] pusharglist 1 ........................... <sqrt(1 - (x * x)) / x>
  [ 18] extcall 621 ............................. <atan(sqrt(1 - (x * x)) / x)>
  [ 21] setlocal 0 .............................. y = atan(sqrt(1 - (x * x)) / x)
  [ 23] getlocal 0 .............................. <y>
  [ 25] pusharglistnoret 1 ...................... <y>
  [ 27] extcall 52 .............................. return y
  [ 29] ret
end

on distance me, oP1, oP2
  [  0] getparam 1 .............................. <oP1>
  [  2] getobjprop 143 .......................... <oP1.locH>
  [  4] getparam 2 .............................. <oP2>
  [  6] getobjprop 143 .......................... <oP2.locH>
  [  8] sub ..................................... <oP1.locH - oP2.locH>
  [  9] setlocal 0 .............................. idx = oP1.locH - oP2.locH
  [ 11] getparam 1 .............................. <oP1>
  [ 13] getobjprop 122 .......................... <oP1.locV>
  [ 15] getparam 2 .............................. <oP2>
  [ 17] getobjprop 122 .......................... <oP2.locV>
  [ 19] sub ..................................... <oP1.locV - oP2.locV>
  [ 20] setlocal 1 .............................. iDy = oP1.locV - oP2.locV
  [ 22] getlocal 0 .............................. <idx>
  [ 24] getlocal 0 .............................. <idx>
  [ 26] mul ..................................... <idx * idx>
  [ 27] getlocal 1 .............................. <iDy>
  [ 29] getlocal 1 .............................. <iDy>
  [ 31] mul ..................................... <iDy * iDy>
  [ 32] add ..................................... <(idx * idx) + (iDy * iDy)>
  [ 33] pusharglist 1 ........................... <(idx * idx) + (iDy * iDy)>
  [ 35] extcall 618 ............................. <sqrt((idx * idx) + (iDy * iDy))>
  [ 38] pusharglistnoret 1 ...................... <sqrt((idx * idx) + (iDy * iDy))>
  [ 40] extcall 52 .............................. return sqrt((idx * idx) + (iDy * iDy))
  [ 42] ret
end

on rad me, iDeg
  [  0] getparam 1 .............................. <iDeg>
  [  2] pusharglist 0 ........................... <>
  [  4] extcall 624 ............................. <PI>
  [  7] mul ..................................... <iDeg * PI>
  [  8] pushint16 180 ........................... <180>
  [ 11] div ..................................... <iDeg * PI / 180>
  [ 12] pusharglistnoret 1 ...................... <iDeg * PI / 180>
  [ 14] extcall 52 .............................. return iDeg * PI / 180
  [ 16] ret
end

on deg me, iRad
  [  0] pushint16 180 ........................... <180>
  [  3] getparam 1 .............................. <iRad>
  [  5] mul ..................................... <180 * iRad>
  [  6] pusharglist 0 ........................... <>
  [  8] extcall 624 ............................. <PI>
  [ 11] div ..................................... <180 * iRad / PI>
  [ 12] pusharglistnoret 1 ...................... <180 * iRad / PI>
  [ 14] extcall 52 .............................. return 180 * iRad / PI
  [ 16] ret
end

on translatePoints me, aPoints, iXChange, iYChange
  [  0] pusharglist 0 ........................... <[]>
  [  2] pushlist ................................ <[]>
  [  3] setlocal 0 .............................. aTranslatedPoints = []
  [  5] pushint8 1 .............................. <1>
  [  7] setlocal 1
  [  9] getlocal 1
  [ 11] getparam 1 .............................. <aPoints>
  [ 13] getobjprop 155 .......................... <aPoints.count>
  [ 15] lteq
  [ 16] jmpifz [ 60] ............................ repeat with i = 1 to aPoints.count
  [ 19] getparam 1 .............................. <aPoints>
  [ 21] getlocal 1 .............................. <i>
  [ 23] pusharglist 2 ........................... <aPoints, i>
  [ 25] objcall 72 .............................. <aPoints[i]>
  [ 27] setlocal 2 .............................. aPoint = aPoints[i]
  [ 29] getlocal 2 .............................. <aPoint>
  [ 31] getparam 2 .............................. <iXChange>
  [ 33] getparam 3 .............................. <iYChange>
  [ 35] pusharglist 2 ........................... <iXChange, iYChange>
  [ 37] extcall 39 .............................. <point(iXChange, iYChange)>
  [ 39] add ..................................... <aPoint + point(iXChange, iYChange)>
  [ 40] setlocal 3 .............................. aNewPoint = aPoint + point(iXChange, iYChange)
  [ 42] getlocal 0 .............................. <aTranslatedPoints>
  [ 44] getlocal 3 .............................. <aNewPoint>
  [ 46] pusharglistnoret 2 ...................... <aTranslatedPoints, aNewPoint>
  [ 48] objcall 627 ............................. aTranslatedPoints.append(aNewPoint)
  [ 51] pushint8 1
  [ 53] getlocal 1
  [ 55] add
  [ 56] setlocal 1
  [ 58] endrepeat [  9]
  [ 60] getlocal 0 .............................. <aTranslatedPoints>
  [ 62] pusharglistnoret 1 ...................... <aTranslatedPoints>
  [ 64] extcall 52 .............................. return aTranslatedPoints
  [ 66] ret
end

on rotatePoints me, aPoints, iTheta
  [  0] pusharglist 0 ........................... <[]>
  [  2] pushlist ................................ <[]>
  [  3] setlocal 0 .............................. aRotatedPoints = []
  [  5] pushint8 1 .............................. <1>
  [  7] setlocal 1
  [  9] getlocal 1
  [ 11] getparam 1 .............................. <aPoints>
  [ 13] getobjprop 155 .......................... <aPoints.count>
  [ 15] lteq
  [ 16] jmpifz [107] ............................ repeat with i = 1 to aPoints.count
  [ 19] getparam 1 .............................. <aPoints>
  [ 21] getlocal 1 .............................. <i>
  [ 23] pusharglist 2 ........................... <aPoints, i>
  [ 25] objcall 72 .............................. <aPoints[i]>
  [ 27] setlocal 2 .............................. aPoint = aPoints[i]
  [ 29] getlocal 2 .............................. <aPoint>
  [ 31] getobjprop 143 .......................... <aPoint.locH>
  [ 33] getparam 2 .............................. <iTheta>
  [ 35] pusharglist 1 ........................... <iTheta>
  [ 37] extcall 351 ............................. <cos(iTheta)>
  [ 40] mul ..................................... <aPoint.locH * cos(iTheta)>
  [ 41] getlocal 2 .............................. <aPoint>
  [ 43] getobjprop 122 .......................... <aPoint.locV>
  [ 45] getparam 2 .............................. <iTheta>
  [ 47] pusharglist 1 ........................... <iTheta>
  [ 49] extcall 347 ............................. <sin(iTheta)>
  [ 52] mul ..................................... <aPoint.locV * sin(iTheta)>
  [ 53] sub ..................................... <(aPoint.locH * cos(iTheta)) - (aPoint.locV * sin(iTheta))>
  [ 54] setlocal 3 .............................. iX = (aPoint.locH * cos(iTheta)) - (aPoint.locV * sin(iTheta))
  [ 56] getlocal 2 .............................. <aPoint>
  [ 58] getobjprop 143 .......................... <aPoint.locH>
  [ 60] getparam 2 .............................. <iTheta>
  [ 62] pusharglist 1 ........................... <iTheta>
  [ 64] extcall 347 ............................. <sin(iTheta)>
  [ 67] mul ..................................... <aPoint.locH * sin(iTheta)>
  [ 68] getlocal 2 .............................. <aPoint>
  [ 70] getobjprop 122 .......................... <aPoint.locV>
  [ 72] getparam 2 .............................. <iTheta>
  [ 74] pusharglist 1 ........................... <iTheta>
  [ 76] extcall 351 ............................. <cos(iTheta)>
  [ 79] mul ..................................... <aPoint.locV * cos(iTheta)>
  [ 80] add ..................................... <(aPoint.locH * sin(iTheta)) + (aPoint.locV * cos(iTheta))>
  [ 81] setlocal 4 .............................. iY = (aPoint.locH * sin(iTheta)) + (aPoint.locV * cos(iTheta))
  [ 83] getlocal 0 .............................. <aRotatedPoints>
  [ 85] getlocal 3 .............................. <iX>
  [ 87] getlocal 4 .............................. <iY>
  [ 89] pusharglist 2 ........................... <iX, iY>
  [ 91] extcall 39 .............................. <point(iX, iY)>
  [ 93] pusharglistnoret 2 ...................... <aRotatedPoints, point(iX, iY)>
  [ 95] objcall 627 ............................. aRotatedPoints.append(point(iX, iY))
  [ 98] pushint8 1
  [100] getlocal 1
  [102] add
  [103] setlocal 1
  [105] endrepeat [  9]
  [107] getlocal 0 .............................. <aRotatedPoints>
  [109] pusharglistnoret 1 ...................... <aRotatedPoints>
  [111] extcall 52 .............................. return aRotatedPoints
  [113] ret
end

on scalePoint
  [  0] ret
end

on rotatePoint me, aPoint, iDeg
  [  0] getparam 0 .............................. <me>
  [  2] getparam 2 .............................. <iDeg>
  [  4] pusharglist 2 ........................... <me, iDeg>
  [  6] objcall 348 ............................. <me.rad(iDeg)>
  [  9] setlocal 0 .............................. iTheta = me.rad(iDeg)
  [ 11] getparam 1 .............................. <aPoint>
  [ 13] getobjprop 143 .......................... <aPoint.locH>
  [ 15] getlocal 0 .............................. <iTheta>
  [ 17] pusharglist 1 ........................... <iTheta>
  [ 19] extcall 351 ............................. <cos(iTheta)>
  [ 22] mul ..................................... <aPoint.locH * cos(iTheta)>
  [ 23] getparam 1 .............................. <aPoint>
  [ 25] getobjprop 122 .......................... <aPoint.locV>
  [ 27] getlocal 0 .............................. <iTheta>
  [ 29] pusharglist 1 ........................... <iTheta>
  [ 31] extcall 347 ............................. <sin(iTheta)>
  [ 34] mul ..................................... <aPoint.locV * sin(iTheta)>
  [ 35] sub ..................................... <(aPoint.locH * cos(iTheta)) - (aPoint.locV * sin(iTheta))>
  [ 36] setlocal 1 .............................. iX = (aPoint.locH * cos(iTheta)) - (aPoint.locV * sin(iTheta))
  [ 38] getparam 1 .............................. <aPoint>
  [ 40] getobjprop 143 .......................... <aPoint.locH>
  [ 42] getlocal 0 .............................. <iTheta>
  [ 44] pusharglist 1 ........................... <iTheta>
  [ 46] extcall 347 ............................. <sin(iTheta)>
  [ 49] mul ..................................... <aPoint.locH * sin(iTheta)>
  [ 50] getparam 1 .............................. <aPoint>
  [ 52] getobjprop 122 .......................... <aPoint.locV>
  [ 54] getlocal 0 .............................. <iTheta>
  [ 56] pusharglist 1 ........................... <iTheta>
  [ 58] extcall 351 ............................. <cos(iTheta)>
  [ 61] mul ..................................... <aPoint.locV * cos(iTheta)>
  [ 62] add ..................................... <(aPoint.locH * sin(iTheta)) + (aPoint.locV * cos(iTheta))>
  [ 63] setlocal 2 .............................. iY = (aPoint.locH * sin(iTheta)) + (aPoint.locV * cos(iTheta))
  [ 65] getlocal 1 .............................. <iX>
  [ 67] getlocal 2 .............................. <iY>
  [ 69] pusharglist 2 ........................... <iX, iY>
  [ 71] extcall 39 .............................. <point(iX, iY)>
  [ 73] pusharglistnoret 1 ...................... <point(iX, iY)>
  [ 75] extcall 52 .............................. return point(iX, iY)
  [ 77] ret
end

on slope me, aPoint1, aPoint2
  [  0] getparam 2 .............................. <aPoint2>
  [  2] getobjprop 143 .......................... <aPoint2.locH>
  [  4] getparam 1 .............................. <aPoint1>
  [  6] getobjprop 122 .......................... <aPoint1.locV>
  [  8] sub ..................................... <aPoint2.locH - aPoint1.locV>
  [  9] getparam 2 .............................. <aPoint2>
  [ 11] getobjprop 143 .......................... <aPoint2.locH>
  [ 13] getparam 1 .............................. <aPoint1>
  [ 15] getobjprop 143 .......................... <aPoint1.locH>
  [ 17] sub ..................................... <aPoint2.locH - aPoint1.locH>
  [ 18] div ..................................... <(aPoint2.locH - aPoint1.locV) / (aPoint2.locH - aPoint1.locH)>
  [ 19] pusharglistnoret 1 ...................... <(aPoint2.locH - aPoint1.locV) / (aPoint2.locH - aPoint1.locH)>
  [ 21] extcall 52 .............................. return (aPoint2.locH - aPoint1.locV) / (aPoint2.locH - aPoint1.locH)
  [ 23] ret
end

on map me, inVal, inLow, inHi, outLow, outHi
  [  0] getparam 1 .............................. <inVal>
  [  2] getparam 2 .............................. <inLow>
  [  4] sub ..................................... <inVal - inLow>
  [  5] getparam 3 .............................. <inHi>
  [  7] getparam 2 .............................. <inLow>
  [  9] sub ..................................... <inHi - inLow>
  [ 10] div ..................................... <(inVal - inLow) / (inHi - inLow)>
  [ 11] getparam 5 .............................. <outHi>
  [ 13] getparam 4 .............................. <outLow>
  [ 15] sub ..................................... <outHi - outLow>
  [ 16] mul ..................................... <(inVal - inLow) / (inHi - inLow) * (outHi - outLow)>
  [ 17] getparam 4 .............................. <outLow>
  [ 19] add ..................................... <((inVal - inLow) / (inHi - inLow) * (outHi - outLow)) + outLow>
  [ 20] setlocal 0 .............................. outVal = ((inVal - inLow) / (inHi - inLow) * (outHi - outLow)) + outLow
  [ 22] getlocal 0 .............................. <outVal>
  [ 24] pusharglistnoret 1 ...................... <outVal>
  [ 26] extcall 52 .............................. return outVal
  [ 28] ret
end
