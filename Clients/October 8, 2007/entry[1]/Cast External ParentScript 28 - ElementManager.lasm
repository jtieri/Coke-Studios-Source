property pOpenWindows, pLastUsedSprite, oMessenger, oSequencer, oMixer, oCdplayer, oTrader, oJukebox, oLoader, bDebug, pSelectedCatId, pSelectedAttributes
global oStudioManager, oDenizenManager, oCatalogManager, oPossessionManager, oSession, oRoom, oStudio, oStudioMap, oIsoScene, TextMgr, ElementMgr, oRoomServlet, oUserServlet, gMembersToDelete, sLanguageSetting, sCatalogText, ochat, gFeatureSet

on new me
  [  0] pushzero ................................ <0>
  [  1] setprop 75 .............................. bDebug = 0
  [  3] pusharglist 0 ........................... <[:]>
  [  5] pushproplist ............................ <[:]>
  [  6] setprop 76 .............................. pOpenWindows = [:]
  [  8] pushint8 1 .............................. <1>
  [ 10] setprop 77 .............................. pLastUsedSprite = 1
  [ 12] getparam 0 .............................. <me>
  [ 14] pusharglistnoret 1 ...................... <me>
  [ 16] extcall 78 .............................. return me
  [ 18] ret
end

on debug me, sMessage, bForce
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 75 ........................... <me.bDebug>
  [  4] getparam 2 .............................. <bForce>
  [  6] or ...................................... <me.bDebug or bForce>
  [  7] jmpifz [ 19] ............................ if me.bDebug or bForce then
  [ 10] pushcons 0 .............................. <"ElementManager: ">
  [ 12] getparam 1 .............................. <sMessage>
  [ 14] joinstr ................................. <"ElementManager: " & sMessage>
  [ 15] pusharglistnoret 1 ...................... <"ElementManager: " & sMessage>
  [ 17] extcall 80 .............................. put "ElementManager: " & sMessage
  [ 19] ret
end

on newwindow me, description, whichrect
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 1 .............................. <"newWindow()">
  [  4] pushcons 2 .............................. <"description:">
  [  6] joinpadstr .............................. <"newWindow()" && "description:">
  [  7] getparam 1 .............................. <description>
  [  9] joinpadstr .............................. <"newWindow()" && "description:" && description>
  [ 10] pushcons 3 .............................. <"whichRect:">
  [ 12] joinpadstr .............................. <"newWindow()" && "description:" && description && "whichRect:">
  [ 13] getparam 2 .............................. <whichrect>
  [ 15] joinpadstr .............................. <"newWindow()" && "description:" && description && "whichRect:" && whichrect>
  [ 16] pushint8 1 .............................. <1>
  [ 18] pusharglistnoret 3 ...................... <me, "newWindow()" && "description:" && description && "whichRect:" && whichrect, 1>
  [ 20] objcall 1 ............................... me.debug("newWindow()" && "description:" && description && "whichRect:" && whichrect, 1)
  [ 22] getparam 1 .............................. <description>
  [ 24] pushcons 4 .............................. <"nav_private">
  [ 26] eq ...................................... <description = "nav_private">
  [ 27] jmpifz [ 54] ............................ if description = "nav_private" then
  [ 30] getglobal 83 ............................ <gFeatureSet>
  [ 32] pushsymb 84 ............................. <#PRIVATE_STUDIOS>
  [ 34] pusharglist 2 ........................... <gFeatureSet, #PRIVATE_STUDIOS>
  [ 36] objcall 85 .............................. <gFeatureSet.isEnabled(#PRIVATE_STUDIOS)>
  [ 38] not ..................................... <not gFeatureSet.isEnabled(#PRIVATE_STUDIOS)>
  [ 39] jmpifz [ 54] ............................ if not gFeatureSet.isEnabled(#PRIVATE_STUDIOS) then
  [ 42] getglobal 86 ............................ <ElementMgr>
  [ 44] pushcons 5 .............................. <"FEATURE_DISABLED">
  [ 46] pusharglistnoret 2 ...................... <ElementMgr, "FEATURE_DISABLED">
  [ 48] objcall 10 .............................. ElementMgr.alert("FEATURE_DISABLED")
  [ 50] pusharglistnoret 0 ...................... <>
  [ 52] extcall 78 .............................. return 
  [ 54] getparam 0 .............................. <me>
  [ 56] getparam 1 .............................. <description>
  [ 58] pusharglist 2 ........................... <me, description>
  [ 60] objcall 3 ............................... <me.parsewindow(description)>
  [ 62] setlocal 0 .............................. MyData = me.parsewindow(description)
  [ 64] getparam 2 .............................. <whichrect>
  [ 66] pusharglist 1 ........................... <whichrect>
  [ 68] extcall 87 .............................. <voidp(whichrect)>
  [ 70] pushzero ................................ <0>
  [ 71] eq ...................................... <voidp(whichrect) = 0>
  [ 72] jmpifz [ 81] ............................ if voidp(whichrect) = 0 then
  [ 75] getlocal 0 .............................. <MyData>
  [ 77] getparam 2 .............................. <whichrect>
  [ 79] setobjprop 88 ........................... MyData.rect = whichrect
  [ 81] getprop 76 .............................. <pOpenWindows>
  [ 83] getlocal 0 .............................. <MyData>
  [ 85] getobjprop 90 ........................... <MyData.name>
  [ 87] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [ 89] extcall 89 .............................. <getaProp(pOpenWindows, MyData.name)>
  [ 91] setlocal 1 .............................. MyWindow = getaProp(pOpenWindows, MyData.name)
  [ 93] getlocal 1 .............................. <MyWindow>
  [ 95] pusharglist 1 ........................... <MyWindow>
  [ 97] extcall 87 .............................. <voidp(MyWindow)>
  [ 99] pushzero ................................ <0>
  [100] eq ...................................... <voidp(MyWindow) = 0>
  [101] jmpifz [113] ............................ if voidp(MyWindow) = 0 then / else
  [104] getlocal 1 .............................. <MyWindow>
  [106] pusharglistnoret 1 ...................... <MyWindow>
  [108] objcall 91 .............................. MyWindow.bringtofront()
  [110] jmp [156]
  [113] pushcons 6 .............................. <"Windows Script">
  [115] pusharglist 1 ........................... <"Windows Script">
  [117] extcall 92 .............................. <script("Windows Script")>
  [119] getlocal 0 .............................. <MyData>
  [121] pusharglist 2 ........................... <script("Windows Script"), MyData>
  [123] extcall 0 ............................... <new(script("Windows Script"), MyData)>
  [125] setlocal 1 .............................. MyWindow = new(script("Windows Script"), MyData)
  [127] getprop 76 .............................. <pOpenWindows>
  [129] getlocal 0 .............................. <MyData>
  [131] getobjprop 90 ........................... <MyData.name>
  [133] getlocal 1 .............................. <MyWindow>
  [135] pusharglistnoret 3 ...................... <pOpenWindows, MyData.name, MyWindow>
  [137] extcall 93 .............................. addProp(pOpenWindows, MyData.name, MyWindow)
  [139] getlocal 1 .............................. <MyWindow>
  [141] pushint32 1000000 ....................... <1000000>
  [146] pusharglistnoret 2 ...................... <MyWindow, 1000000>
  [148] objcall 94 .............................. MyWindow.boostup(1000000)
  [150] getlocal 1 .............................. <MyWindow>
  [152] pusharglistnoret 1 ...................... <MyWindow>
  [154] objcall 91 .............................. MyWindow.bringtofront()
  [156] getparam 1 .............................. <description>
  [158] pushcons 7 .............................. <"nav_public">
  [160] containsstr ............................. <description contains "nav_public">
  [161] jmpifz [191] ............................ if description contains "nav_public" then / else
  [164] getprop 76 .............................. <pOpenWindows>
  [166] getlocal 0 .............................. <MyData>
  [168] getobjprop 90 ........................... <MyData.name>
  [170] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [172] objcall 95 .............................. <pOpenWindows[MyData.name]>
  [174] getchainedprop 96 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [176] getchainedprop 97 ....................... <pOpenWindows[MyData.name].pScrollingLists.roomlist>
  [178] pusharglistnoret 1 ...................... <pOpenWindows[MyData.name].pScrollingLists.roomlist>
  [180] objcall 98 .............................. pOpenWindows[MyData.name].pScrollingLists.roomlist.displayloading()
  [182] getglobal 99 ............................ <oStudioManager>
  [184] pusharglistnoret 1 ...................... <oStudioManager>
  [186] objcall 100 ............................. oStudioManager.getAllPublicStudios()
  [188] jmp [379]
  [191] getparam 1 .............................. <description>
  [193] pushcons 4 .............................. <"nav_private">
  [195] containsstr ............................. <description contains "nav_private">
  [196] jmpifz [379] ............................ if description contains "nav_private" then
  [199] pushcons 8 .............................. <"userlist">
  [201] pusharglist 1 ........................... <"userlist">
  [203] extcall 101 ............................. <member("userlist")>
  [205] getobjprop 102 .......................... <member("userlist").memberNum>
  [207] pushzero ................................ <0>
  [208] gt ...................................... <member("userlist").memberNum > 0>
  [209] jmpifz [373] ............................ if member("userlist").memberNum > 0 then / else
  [212] pushcons 8 .............................. <"userlist">
  [214] pusharglist 1 ........................... <"userlist">
  [216] extcall 101 ............................. <member("userlist")>
  [218] getobjprop 103 .......................... <member("userlist").comments>
  [220] pushcons 9 .............................. <"blocked">
  [222] nteq .................................... <member("userlist").comments <> "blocked">
  [223] pushcons 8 .............................. <"userlist">
  [225] pusharglist 1 ........................... <"userlist">
  [227] extcall 101 ............................. <member("userlist")>
  [229] getobjprop 103 .......................... <member("userlist").comments>
  [231] pushcons 10 ............................. <EMPTY>
  [233] nteq .................................... <member("userlist").comments <> EMPTY>
  [234] and ..................................... <(member("userlist").comments <> "blocked") and (member("userlist").comments <> EMPTY)>
  [235] jmpifz [350] ............................ if (member("userlist").comments <> "blocked") and (member("userlist").comments <> EMPTY) then / else
  [238] getprop 76 .............................. <pOpenWindows>
  [240] getlocal 0 .............................. <MyData>
  [242] getobjprop 90 ........................... <MyData.name>
  [244] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [246] objcall 95 .............................. <pOpenWindows[MyData.name]>
  [248] getobjprop 96 ........................... <pOpenWindows[MyData.name].pScrollingLists>
  [250] pusharglist 1 ........................... <pOpenWindows[MyData.name].pScrollingLists>
  [252] extcall 104 ............................. <count(pOpenWindows[MyData.name].pScrollingLists)>
  [254] jmpifz [347] ............................ if count(pOpenWindows[MyData.name].pScrollingLists) then
  [257] getprop 76 .............................. <pOpenWindows>
  [259] getlocal 0 .............................. <MyData>
  [261] getobjprop 90 ........................... <MyData.name>
  [263] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [265] objcall 95 .............................. <pOpenWindows[MyData.name]>
  [267] getchainedprop 96 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [269] getchainedprop 105 ...................... <pOpenWindows[MyData.name].pScrollingLists.userList>
  [271] pushcons 8 .............................. <"userlist">
  [273] pusharglist 1 ........................... <"userlist">
  [275] extcall 101 ............................. <member("userlist")>
  [277] getchainedprop 103 ...................... <member("userlist").comments>
  [279] pushsymb 107 ............................ <#line>
  [281] pushint8 1 .............................. <1>
  [283] pusharglist 3 ........................... <member("userlist").comments, #line, 1>
  [285] objcall 108 ............................. <member("userlist").comments.line[1]>
  [287] pusharglist 1 ........................... <member("userlist").comments.line[1]>
  [289] extcall 106 ............................. <value(member("userlist").comments.line[1])>
  [291] setobjprop 109 .......................... pOpenWindows[MyData.name].pScrollingLists.userList.pUserData = value(member("userlist").comments.line[1])
  [293] getprop 76 .............................. <pOpenWindows>
  [295] getlocal 0 .............................. <MyData>
  [297] getobjprop 90 ........................... <MyData.name>
  [299] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [301] objcall 95 .............................. <pOpenWindows[MyData.name]>
  [303] getchainedprop 96 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [305] getchainedprop 105 ...................... <pOpenWindows[MyData.name].pScrollingLists.userList>
  [307] pushcons 8 .............................. <"userlist">
  [309] pusharglist 1 ........................... <"userlist">
  [311] extcall 101 ............................. <member("userlist")>
  [313] getchainedprop 103 ...................... <member("userlist").comments>
  [315] pushsymb 107 ............................ <#line>
  [317] pushint8 2 .............................. <2>
  [319] pusharglist 3 ........................... <member("userlist").comments, #line, 2>
  [321] objcall 108 ............................. <member("userlist").comments.line[2]>
  [323] pusharglist 1 ........................... <member("userlist").comments.line[2]>
  [325] extcall 106 ............................. <value(member("userlist").comments.line[2])>
  [327] setobjprop 110 .......................... pOpenWindows[MyData.name].pScrollingLists.userList.pScrollIndex = value(member("userlist").comments.line[2])
  [329] getprop 76 .............................. <pOpenWindows>
  [331] getlocal 0 .............................. <MyData>
  [333] getobjprop 90 ........................... <MyData.name>
  [335] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [337] objcall 95 .............................. <pOpenWindows[MyData.name]>
  [339] getchainedprop 96 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [341] getchainedprop 105 ...................... <pOpenWindows[MyData.name].pScrollingLists.userList>
  [343] pusharglistnoret 1 ...................... <pOpenWindows[MyData.name].pScrollingLists.userList>
  [345] objcall 111 ............................. pOpenWindows[MyData.name].pScrollingLists.userList.updatecontent()
  [347] jmp [370]
  [350] pushcons 8 .............................. <"userlist">
  [352] pusharglist 1 ........................... <"userlist">
  [354] extcall 101 ............................. <member("userlist")>
  [356] getobjprop 103 .......................... <member("userlist").comments>
  [358] pushcons 9 .............................. <"blocked">
  [360] nteq .................................... <member("userlist").comments <> "blocked">
  [361] jmpifz [370] ............................ if member("userlist").comments <> "blocked" then
  [364] getglobal 99 ............................ <oStudioManager>
  [366] pusharglistnoret 1 ...................... <oStudioManager>
  [368] objcall 112 ............................. oStudioManager.getAllPrivateStudios()
  [370] jmp [379]
  [373] getglobal 99 ............................ <oStudioManager>
  [375] pusharglistnoret 1 ...................... <oStudioManager>
  [377] objcall 112 ............................. oStudioManager.getAllPrivateStudios()
  [379] getparam 1 .............................. <description>
  [381] pushcons 11 ............................. <"people">
  [383] containsstr ............................. <description contains "people">
  [384] jmpifz [457] ............................ if description contains "people" then
  [387] getlocal 0 .............................. <MyData>
  [389] getobjprop 90 ........................... <MyData.name>
  [391] pushcons 12 ............................. <"public">
  [393] containsstr ............................. <MyData.name contains "public">
  [394] jmpifz [428] ............................ if MyData.name contains "public" then / else
  [397] getprop 76 .............................. <pOpenWindows>
  [399] getlocal 0 .............................. <MyData>
  [401] getobjprop 90 ........................... <MyData.name>
  [403] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [405] objcall 95 .............................. <pOpenWindows[MyData.name]>
  [407] getchainedprop 96 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [409] getchainedprop 97 ....................... <pOpenWindows[MyData.name].pScrollingLists.roomlist>
  [411] getchainedprop 113 ...................... <pOpenWindows[MyData.name].pScrollingLists.roomlist.pLastClicked>
  [413] getobjprop 114 .......................... <pOpenWindows[MyData.name].pScrollingLists.roomlist.pLastClicked.studioId>
  [415] setlocal 2 .............................. sRoomId = pOpenWindows[MyData.name].pScrollingLists.roomlist.pLastClicked.studioId
  [417] getglobal 99 ............................ <oStudioManager>
  [419] getlocal 2 .............................. <sRoomId>
  [421] pusharglistnoret 2 ...................... <oStudioManager, sRoomId>
  [423] objcall 115 ............................. oStudioManager.getOccupantsByStudioId(sRoomId)
  [425] jmp [457]
  [428] getmovieprop 116 ........................ <the runMode>
  [430] pushcons 13 ............................. <"Author">
  [432] eq ...................................... <the runMode = "Author">
  [433] jmpifz [443] ............................ if the runMode = "Author" then / else
  [436] pushcons 10 ............................. <EMPTY>
  [438] setlocal 2 .............................. sRoomId = EMPTY
  [440] jmp [449]
  [443] pushcons 14 ............................. <"userroomID">
  [445] pushzero ................................ <0>
  [446] getfield ................................ <field("userroomID")>
  [447] setlocal 2 .............................. sRoomId = field("userroomID")
  [449] getglobal 99 ............................ <oStudioManager>
  [451] getlocal 2 .............................. <sRoomId>
  [453] pusharglistnoret 2 ...................... <oStudioManager, sRoomId>
  [455] objcall 115 ............................. oStudioManager.getOccupantsByStudioId(sRoomId)
  [457] getparam 1 .............................. <description>
  [459] pushcons 15 ............................. <"jukebox.catalog">
  [461] containsstr ............................. <description contains "jukebox.catalog">
  [462] jmpifz [521] ............................ if description contains "jukebox.catalog" then / else
  [465] getprop 76 .............................. <pOpenWindows>
  [467] getlocal 0 .............................. <MyData>
  [469] getobjprop 90 ........................... <MyData.name>
  [471] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [473] objcall 95 .............................. <pOpenWindows[MyData.name]>
  [475] getchainedprop 96 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [477] getchainedprop 117 ...................... <pOpenWindows[MyData.name].pScrollingLists.cataloglist>
  [479] pusharglistnoret 1 ...................... <pOpenWindows[MyData.name].pScrollingLists.cataloglist>
  [481] objcall 98 .............................. pOpenWindows[MyData.name].pScrollingLists.cataloglist.displayloading()
  [483] getmovieprop 116 ........................ <the runMode>
  [485] pushcons 16 ............................. <"author">
  [487] eq ...................................... <the runMode = "author">
  [488] jmpifz [512] ............................ if the runMode = "author" then / else
  [491] getprop 76 .............................. <pOpenWindows>
  [493] getlocal 0 .............................. <MyData>
  [495] getobjprop 90 ........................... <MyData.name>
  [497] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [499] objcall 95 .............................. <pOpenWindows[MyData.name]>
  [501] getchainedprop 96 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [503] getchainedprop 117 ...................... <pOpenWindows[MyData.name].pScrollingLists.cataloglist>
  [505] pusharglistnoret 1 ...................... <pOpenWindows[MyData.name].pScrollingLists.cataloglist>
  [507] objcall 111 ............................. pOpenWindows[MyData.name].pScrollingLists.cataloglist.updatecontent()
  [509] jmp [518]
  [512] getglobal 118 ........................... <oDenizenManager>
  [514] pusharglistnoret 1 ...................... <oDenizenManager>
  [516] objcall 119 ............................. oDenizenManager.getGenres()
  [518] jmp [646]
  [521] getparam 1 .............................. <description>
  [523] pushcons 17 ............................. <"jukebox.playlist">
  [525] containsstr ............................. <description contains "jukebox.playlist">
  [526] jmpifz [585] ............................ if description contains "jukebox.playlist" then / else
  [529] getprop 76 .............................. <pOpenWindows>
  [531] getlocal 0 .............................. <MyData>
  [533] getobjprop 90 ........................... <MyData.name>
  [535] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [537] objcall 95 .............................. <pOpenWindows[MyData.name]>
  [539] getchainedprop 96 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [541] getchainedprop 120 ...................... <pOpenWindows[MyData.name].pScrollingLists.playList>
  [543] pusharglistnoret 1 ...................... <pOpenWindows[MyData.name].pScrollingLists.playList>
  [545] objcall 98 .............................. pOpenWindows[MyData.name].pScrollingLists.playList.displayloading()
  [547] getmovieprop 116 ........................ <the runMode>
  [549] pushcons 16 ............................. <"author">
  [551] eq ...................................... <the runMode = "author">
  [552] jmpifz [576] ............................ if the runMode = "author" then / else
  [555] getprop 76 .............................. <pOpenWindows>
  [557] getlocal 0 .............................. <MyData>
  [559] getobjprop 90 ........................... <MyData.name>
  [561] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [563] objcall 95 .............................. <pOpenWindows[MyData.name]>
  [565] getchainedprop 96 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [567] getchainedprop 120 ...................... <pOpenWindows[MyData.name].pScrollingLists.playList>
  [569] pusharglistnoret 1 ...................... <pOpenWindows[MyData.name].pScrollingLists.playList>
  [571] objcall 111 ............................. pOpenWindows[MyData.name].pScrollingLists.playList.updatecontent()
  [573] jmp [582]
  [576] getglobal 118 ........................... <oDenizenManager>
  [578] pusharglistnoret 1 ...................... <oDenizenManager>
  [580] objcall 121 ............................. oDenizenManager.getPlaylist()
  [582] jmp [646]
  [585] getparam 1 .............................. <description>
  [587] pushcons 18 ............................. <"jukebox.playback">
  [589] containsstr ............................. <description contains "jukebox.playback">
  [590] jmpifz [646] ............................ if description contains "jukebox.playback" then
  [593] getprop 76 .............................. <pOpenWindows>
  [595] getlocal 0 .............................. <MyData>
  [597] getobjprop 90 ........................... <MyData.name>
  [599] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [601] objcall 95 .............................. <pOpenWindows[MyData.name]>
  [603] getchainedprop 96 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [605] getchainedprop 120 ...................... <pOpenWindows[MyData.name].pScrollingLists.playList>
  [607] pusharglistnoret 1 ...................... <pOpenWindows[MyData.name].pScrollingLists.playList>
  [609] objcall 98 .............................. pOpenWindows[MyData.name].pScrollingLists.playList.displayloading()
  [611] getmovieprop 116 ........................ <the runMode>
  [613] pushcons 16 ............................. <"author">
  [615] eq ...................................... <the runMode = "author">
  [616] jmpifz [640] ............................ if the runMode = "author" then / else
  [619] getprop 76 .............................. <pOpenWindows>
  [621] getlocal 0 .............................. <MyData>
  [623] getobjprop 90 ........................... <MyData.name>
  [625] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [627] objcall 95 .............................. <pOpenWindows[MyData.name]>
  [629] getchainedprop 96 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [631] getchainedprop 120 ...................... <pOpenWindows[MyData.name].pScrollingLists.playList>
  [633] pusharglistnoret 1 ...................... <pOpenWindows[MyData.name].pScrollingLists.playList>
  [635] objcall 111 ............................. pOpenWindows[MyData.name].pScrollingLists.playList.updatecontent()
  [637] jmp [646]
  [640] getglobal 118 ........................... <oDenizenManager>
  [642] pusharglistnoret 1 ...................... <oDenizenManager>
  [644] objcall 121 ............................. oDenizenManager.getPlaylist()
  [646] getparam 0 .............................. <me>
  [648] pusharglistnoret 1 ...................... <me>
  [650] objcall 25 .............................. me.bringAlertToFront()
  [652] getlocal 1 .............................. <MyWindow>
  [654] pusharglistnoret 1 ...................... <MyWindow>
  [656] extcall 78 .............................. return MyWindow
  [658] ret
end

on parsewindow me, description
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 19 ............................. <"parseWindow()">
  [  4] pushcons 2 .............................. <"description:">
  [  6] joinpadstr .............................. <"parseWindow()" && "description:">
  [  7] getparam 1 .............................. <description>
  [  9] joinpadstr .............................. <"parseWindow()" && "description:" && description>
  [ 10] pusharglistnoret 2 ...................... <me, "parseWindow()" && "description:" && description>
  [ 12] objcall 1 ............................... me.debug("parseWindow()" && "description:" && description)
  [ 14] pushcons 20 ............................. <"XML">
  [ 16] pusharglist 1 ........................... <"XML">
  [ 18] extcall 127 ............................. <newObject("XML")>
  [ 20] setlocal 0 .............................. oXml = newObject("XML")
  [ 22] getlocal 0 .............................. <oXml>
  [ 24] pushint8 1 .............................. <1>
  [ 26] setobjprop 128 .......................... oXml.ignoreWhite = 1
  [ 28] getlocal 0 .............................. <oXml>
  [ 30] getparam 1 .............................. <description>
  [ 32] pusharglist 1 ........................... <description>
  [ 34] extcall 101 ............................. <member(description)>
  [ 36] getobjprop 129 .......................... <member(description).text>
  [ 38] pusharglistnoret 2 ...................... <oXml, member(description).text>
  [ 40] objcall 130 ............................. oXml.parseXML(member(description).text)
  [ 42] getlocal 0 .............................. <oXml>
  [ 44] pushcons 21 ............................. <"window">
  [ 46] pusharglist 2 ........................... <oXml, "window">
  [ 48] extcall 131 ............................. <getNode(oXml, "window")>
  [ 50] setlocal 1 .............................. oWindow = getNode(oXml, "window")
  [ 52] getlocal 1 .............................. <oWindow>
  [ 54] pushcons 22 ............................. <"name">
  [ 56] pusharglist 2 ........................... <oWindow, "name">
  [ 58] extcall 131 ............................. <getNode(oWindow, "name")>
  [ 60] setlocal 2 .............................. oName = getNode(oWindow, "name")
  [ 62] getlocal 1 .............................. <oWindow>
  [ 64] pushcons 23 ............................. <"date">
  [ 66] pusharglist 2 ........................... <oWindow, "date">
  [ 68] extcall 131 ............................. <getNode(oWindow, "date")>
  [ 70] setlocal 3 .............................. oDAte = getNode(oWindow, "date")
  [ 72] getlocal 1 .............................. <oWindow>
  [ 74] pushcons 24 ............................. <"version">
  [ 76] pusharglist 2 ........................... <oWindow, "version">
  [ 78] extcall 131 ............................. <getNode(oWindow, "version")>
  [ 80] setlocal 4 .............................. oVersion = getNode(oWindow, "version")
  [ 82] getlocal 1 .............................. <oWindow>
  [ 84] pushcons 25 ............................. <"elements">
  [ 86] pusharglist 2 ........................... <oWindow, "elements">
  [ 88] extcall 131 ............................. <getNode(oWindow, "elements")>
  [ 90] setlocal 5 .............................. oElements = getNode(oWindow, "elements")
  [ 92] getlocal 1 .............................. <oWindow>
  [ 94] pushcons 26 ............................. <"rect">
  [ 96] pusharglist 2 ........................... <oWindow, "rect">
  [ 98] extcall 131 ............................. <getNode(oWindow, "rect")>
  [100] setlocal 6 .............................. oRect = getNode(oWindow, "rect")
  [102] getlocal 1 .............................. <oWindow>
  [104] pushcons 27 ............................. <"border">
  [106] pusharglist 2 ........................... <oWindow, "border">
  [108] extcall 131 ............................. <getNode(oWindow, "border")>
  [110] setlocal 7 .............................. oBorder = getNode(oWindow, "border")
  [112] pushint8 9 .............................. <9>
  [114] pushint8 10 ............................. <10>
  [116] pushint8 13 ............................. <13>
  [118] pusharglist 3 ........................... <[9, 10, 13]>
  [120] pushlist ................................ <[9, 10, 13]>
  [121] setlocal 8 .............................. aStripChars = [9, 10, 13]
  [123] getlocal 2 .............................. <oName>
  [125] pusharglist 1 ........................... <oName>
  [127] extcall 87 .............................. <voidp(oName)>
  [129] not ..................................... <not voidp(oName)>
  [130] jmpifz [147] ............................ if not voidp(oName) then
  [133] getlocal 2 .............................. <oName>
  [135] getchainedprop 133 ...................... <oName.firstChild>
  [137] getobjprop 134 .......................... <oName.firstChild.nodeValue>
  [139] getlocal 8 .............................. <aStripChars>
  [141] pusharglist 2 ........................... <oName.firstChild.nodeValue, aStripChars>
  [143] extcall 132 ............................. <stripChars(oName.firstChild.nodeValue, aStripChars)>
  [145] setlocal 9 .............................. sName = stripChars(oName.firstChild.nodeValue, aStripChars)
  [147] getlocal 3 .............................. <oDAte>
  [149] pusharglist 1 ........................... <oDAte>
  [151] extcall 87 .............................. <voidp(oDAte)>
  [153] not ..................................... <not voidp(oDAte)>
  [154] jmpifz [171] ............................ if not voidp(oDAte) then
  [157] getlocal 3 .............................. <oDAte>
  [159] getchainedprop 133 ...................... <oDAte.firstChild>
  [161] getobjprop 134 .......................... <oDAte.firstChild.nodeValue>
  [163] getlocal 8 .............................. <aStripChars>
  [165] pusharglist 2 ........................... <oDAte.firstChild.nodeValue, aStripChars>
  [167] extcall 132 ............................. <stripChars(oDAte.firstChild.nodeValue, aStripChars)>
  [169] setlocal 10 ............................. sDate = stripChars(oDAte.firstChild.nodeValue, aStripChars)
  [171] getlocal 4 .............................. <oVersion>
  [173] pusharglist 1 ........................... <oVersion>
  [175] extcall 87 .............................. <voidp(oVersion)>
  [177] not ..................................... <not voidp(oVersion)>
  [178] jmpifz [195] ............................ if not voidp(oVersion) then
  [181] getlocal 4 .............................. <oVersion>
  [183] getchainedprop 133 ...................... <oVersion.firstChild>
  [185] getobjprop 134 .......................... <oVersion.firstChild.nodeValue>
  [187] getlocal 8 .............................. <aStripChars>
  [189] pusharglist 2 ........................... <oVersion.firstChild.nodeValue, aStripChars>
  [191] extcall 132 ............................. <stripChars(oVersion.firstChild.nodeValue, aStripChars)>
  [193] setlocal 11 ............................. sVersion = stripChars(oVersion.firstChild.nodeValue, aStripChars)
  [195] getlocal 5 .............................. <oElements>
  [197] pusharglist 1 ........................... <oElements>
  [199] extcall 87 .............................. <voidp(oElements)>
  [201] not ..................................... <not voidp(oElements)>
  [202] jmpifz [219] ............................ if not voidp(oElements) then
  [205] getlocal 5 .............................. <oElements>
  [207] getchainedprop 133 ...................... <oElements.firstChild>
  [209] getobjprop 134 .......................... <oElements.firstChild.nodeValue>
  [211] getlocal 8 .............................. <aStripChars>
  [213] pusharglist 2 ........................... <oElements.firstChild.nodeValue, aStripChars>
  [215] extcall 132 ............................. <stripChars(oElements.firstChild.nodeValue, aStripChars)>
  [217] setlocal 12 ............................. sElements = stripChars(oElements.firstChild.nodeValue, aStripChars)
  [219] getlocal 6 .............................. <oRect>
  [221] pusharglist 1 ........................... <oRect>
  [223] extcall 87 .............................. <voidp(oRect)>
  [225] not ..................................... <not voidp(oRect)>
  [226] jmpifz [243] ............................ if not voidp(oRect) then
  [229] getlocal 6 .............................. <oRect>
  [231] getchainedprop 133 ...................... <oRect.firstChild>
  [233] getobjprop 134 .......................... <oRect.firstChild.nodeValue>
  [235] getlocal 8 .............................. <aStripChars>
  [237] pusharglist 2 ........................... <oRect.firstChild.nodeValue, aStripChars>
  [239] extcall 132 ............................. <stripChars(oRect.firstChild.nodeValue, aStripChars)>
  [241] setlocal 13 ............................. sRect = stripChars(oRect.firstChild.nodeValue, aStripChars)
  [243] getlocal 7 .............................. <oBorder>
  [245] pusharglist 1 ........................... <oBorder>
  [247] extcall 87 .............................. <voidp(oBorder)>
  [249] not ..................................... <not voidp(oBorder)>
  [250] jmpifz [267] ............................ if not voidp(oBorder) then
  [253] getlocal 7 .............................. <oBorder>
  [255] getchainedprop 133 ...................... <oBorder.firstChild>
  [257] getobjprop 134 .......................... <oBorder.firstChild.nodeValue>
  [259] getlocal 8 .............................. <aStripChars>
  [261] pusharglist 2 ........................... <oBorder.firstChild.nodeValue, aStripChars>
  [263] extcall 132 ............................. <stripChars(oBorder.firstChild.nodeValue, aStripChars)>
  [265] setlocal 14 ............................. sBorder = stripChars(oBorder.firstChild.nodeValue, aStripChars)
  [267] getlocal 9 .............................. <sName>
  [269] setlocal 15 ............................. myName = sName
  [271] pusharglist 0 ........................... <[]>
  [273] pushlist ................................ <[]>
  [274] setlocal 16 ............................. myElements = []
  [276] getmovieprop 135 ........................ <the itemDelimiter>
  [278] setlocal 17 ............................. sOldDelimiter = the itemDelimiter
  [280] pushcons 28 ............................. <"]">
  [282] setmovieprop 135 ........................ the itemDelimiter = "]"
  [284] getlocal 12 ............................. <sElements>
  [286] pushsymb 136 ............................ <#items>
  [288] pusharglist 2 ........................... <sElements, #items>
  [290] objcall 104 ............................. <sElements.items.count>
  [292] setlocal 18 ............................. iLength = sElements.items.count
  [294] pushint8 1 .............................. <1>
  [296] setlocal 19
  [298] getlocal 19
  [300] getlocal 18 ............................. <iLength>
  [302] lteq
  [303] jmpifz [428] ............................ repeat with i = 1 to iLength
  [306] getlocal 12 ............................. <sElements>
  [308] pushsymb 137 ............................ <#item>
  [310] getlocal 19 ............................. <i>
  [312] pusharglist 3 ........................... <sElements, #item, i>
  [314] objcall 108 ............................. <sElements.item[i]>
  [316] pushcons 28 ............................. <"]">
  [318] joinstr ................................. <sElements.item[i] & "]">
  [319] setlocal 20 ............................. sElement = sElements.item[i] & "]"
  [321] getlocal 20 ............................. <sElement>
  [323] pusharglist 1 ........................... <sElement>
  [325] extcall 106 ............................. <value(sElement)>
  [327] setlocal 21 ............................. aElement = value(sElement)
  [329] getlocal 21 ............................. <aElement>
  [331] pusharglist 1 ........................... <aElement>
  [333] extcall 87 .............................. <voidp(aElement)>
  [335] not ..................................... <not voidp(aElement)>
  [336] jmpifz [350] ............................ if not voidp(aElement) then
  [339] getlocal 16 ............................. <myElements>
  [341] getlocal 21 ............................. <aElement>
  [343] pusharglistnoret 2 ...................... <myElements, aElement>
  [345] objcall 138 ............................. myElements.add(aElement)
  [347] jmp [419] ............................... next repeat
  [350] getlocal 20 ............................. <sElement>
  [352] pushcons 29 ............................. <"[">
  [354] containsstr ............................. <sElement contains "[">
  [355] jmpifz [419] ............................ if sElement contains "[" then
  [358] getlocal 12 ............................. <sElements>
  [360] pushsymb 137 ............................ <#item>
  [362] getlocal 19 ............................. <i>
  [364] pusharglist 3 ........................... <sElements, #item, i>
  [366] objcall 108 ............................. <sElements.item[i]>
  [368] pushcons 28 ............................. <"]">
  [370] joinstr ................................. <sElements.item[i] & "]">
  [371] getlocal 12 ............................. <sElements>
  [373] pushsymb 137 ............................ <#item>
  [375] getlocal 19 ............................. <i>
  [377] pushint8 1 .............................. <1>
  [379] add ..................................... <i + 1>
  [380] pusharglist 3 ........................... <sElements, #item, i + 1>
  [382] objcall 108 ............................. <sElements.item[i + 1]>
  [384] joinstr ................................. <sElements.item[i] & "]" & sElements.item[i + 1]>
  [385] pushcons 28 ............................. <"]">
  [387] joinstr ................................. <sElements.item[i] & "]" & sElements.item[i + 1] & "]">
  [388] setlocal 20 ............................. sElement = sElements.item[i] & "]" & sElements.item[i + 1] & "]"
  [390] getlocal 20 ............................. <sElement>
  [392] pusharglist 1 ........................... <sElement>
  [394] extcall 106 ............................. <value(sElement)>
  [396] setlocal 21 ............................. aElement = value(sElement)
  [398] getlocal 21 ............................. <aElement>
  [400] pusharglist 1 ........................... <aElement>
  [402] extcall 87 .............................. <voidp(aElement)>
  [404] not ..................................... <not voidp(aElement)>
  [405] jmpifz [416] ............................ if not voidp(aElement) then
  [408] getlocal 16 ............................. <myElements>
  [410] getlocal 21 ............................. <aElement>
  [412] pusharglistnoret 2 ...................... <myElements, aElement>
  [414] objcall 138 ............................. myElements.add(aElement)
  [416] jmp [419] ............................... next repeat
  [419] pushint8 1
  [421] getlocal 19
  [423] add
  [424] setlocal 19
  [426] endrepeat [298]
  [428] getlocal 17 ............................. <sOldDelimiter>
  [430] setmovieprop 135 ........................ the itemDelimiter = sOldDelimiter
  [432] getlocal 13 ............................. <sRect>
  [434] pusharglist 1 ........................... <sRect>
  [436] extcall 106 ............................. <value(sRect)>
  [438] setlocal 22 ............................. myRect = value(sRect)
  [440] pushsymb 90 ............................. <#name>
  [442] getlocal 15 ............................. <myName>
  [444] pushsymb 139 ............................ <#elements>
  [446] getlocal 16 ............................. <myElements>
  [448] pushsymb 88 ............................. <#rect>
  [450] getlocal 22 ............................. <myRect>
  [452] pusharglist 6 ........................... <[#name: myName, #elements: myElements, #rect: myRect]>
  [454] pushproplist ............................ <[#name: myName, #elements: myElements, #rect: myRect]>
  [455] pusharglistnoret 1 ...................... <[#name: myName, #elements: myElements, #rect: myRect]>
  [457] extcall 78 .............................. return [#name: myName, #elements: myElements, #rect: myRect]
  [459] ret
end

on cleanupdata myString
  [  0] getparam 0 .............................. <myString>
  [  2] pushcons 30 ............................. <TAB>
  [  4] containsstr ............................. <myString contains TAB>
  [  5] jmpifz [ 32] ............................ repeat while myString contains TAB
  [  8] pushcons 30 ............................. <TAB>
  [ 10] getparam 0 .............................. <myString>
  [ 12] pusharglist 2 ........................... <TAB, myString>
  [ 14] extcall 163 ............................. <offset(TAB, myString)>
  [ 16] setlocal 0 .............................. mychar = offset(TAB, myString)
  [ 18] getlocal 0 .............................. <mychar>
  [ 20] pushzero ................................ <0>
  [ 21] pushzero ................................ <0>
  [ 22] pushzero ................................ <0>
  [ 23] pushzero ................................ <0>
  [ 24] pushzero ................................ <0>
  [ 25] pushzero ................................ <0>
  [ 26] pushzero ................................ <0>
  [ 27] pushzero ................................ <0>
  [ 28] deletechunk 4 ........................... delete char mychar of myString
  [ 30] endrepeat [  0]
  [ 32] getparam 0 .............................. <myString>
  [ 34] pushsymb 107 ............................ <#line>
  [ 36] pusharglist 2 ........................... <myString, #line>
  [ 38] objcall 104 ............................. <myString.line.count>
  [ 40] setlocal 1
  [ 42] getlocal 1
  [ 44] pushint8 1 .............................. <1>
  [ 46] gteq
  [ 47] jmpifz [104] ............................ repeat with n = myString.line.count down to 1
  [ 50] getparam 0 .............................. <myString>
  [ 52] pushsymb 107 ............................ <#line>
  [ 54] getlocal 1 .............................. <n>
  [ 56] pusharglist 3 ........................... <myString, #line, n>
  [ 58] objcall 108 ............................. <myString.line[n]>
  [ 60] pushcons 10 ............................. <EMPTY>
  [ 62] eq ...................................... <myString.line[n] = EMPTY>
  [ 63] jmpifz [ 81] ............................ if myString.line[n] = EMPTY then
  [ 66] pushzero ................................ <0>
  [ 67] pushzero ................................ <0>
  [ 68] pushzero ................................ <0>
  [ 69] pushzero ................................ <0>
  [ 70] pushzero ................................ <0>
  [ 71] pushzero ................................ <0>
  [ 72] getlocal 1 .............................. <n>
  [ 74] pushzero ................................ <0>
  [ 75] pushzero ................................ <0>
  [ 76] deletechunk 4 ........................... delete line n of myString
  [ 78] jmp [ 95] ............................... next repeat
  [ 81] pushzero ................................ <0>
  [ 82] pushzero ................................ <0>
  [ 83] pushzero ................................ <0>
  [ 84] pushzero ................................ <0>
  [ 85] pushzero ................................ <0>
  [ 86] pushzero ................................ <0>
  [ 87] getlocal 1 .............................. <n>
  [ 89] pushzero ................................ <0>
  [ 90] getparam 0 .............................. <myString>
  [ 92] getchunk ................................ <line n of myString>
  [ 93] setlocal 2 .............................. myLine = line n of myString
  [ 95] pushint8 -1
  [ 97] getlocal 1
  [ 99] add
  [100] setlocal 1
  [102] endrepeat [ 42]
  [104] getparam 0 .............................. <myString>
  [106] pushsymb 164 ............................ <#char>
  [108] getparam 0 .............................. <myString>
  [110] pusharglist 1 ........................... <myString>
  [112] extcall 165 ............................. <length(myString)>
  [114] pusharglist 3 ........................... <myString, #char, length(myString)>
  [116] objcall 108 ............................. <myString.char[length(myString)]>
  [118] pushcons 31 ............................. <" ">
  [120] eq ...................................... <myString.char[length(myString)] = " ">
  [121] jmpifz [142] ............................ repeat while myString.char[length(myString)] = " "
  [124] getparam 0 .............................. <myString>
  [126] pusharglist 1 ........................... <myString>
  [128] extcall 165 ............................. <length(myString)>
  [130] pushzero ................................ <0>
  [131] pushzero ................................ <0>
  [132] pushzero ................................ <0>
  [133] pushzero ................................ <0>
  [134] pushzero ................................ <0>
  [135] pushzero ................................ <0>
  [136] pushzero ................................ <0>
  [137] pushzero ................................ <0>
  [138] deletechunk 4 ........................... delete char length(myString) of myString
  [140] endrepeat [104]
  [142] getparam 0 .............................. <myString>
  [144] pushsymb 164 ............................ <#char>
  [146] pushint8 1 .............................. <1>
  [148] pusharglist 3 ........................... <myString, #char, 1>
  [150] objcall 108 ............................. <myString.char[1]>
  [152] pushcons 32 ............................. <QUOTE>
  [154] eq ...................................... <myString.char[1] = QUOTE>
  [155] getparam 0 .............................. <myString>
  [157] pushsymb 164 ............................ <#char>
  [159] getparam 0 .............................. <myString>
  [161] pusharglist 1 ........................... <myString>
  [163] extcall 165 ............................. <length(myString)>
  [165] pusharglist 3 ........................... <myString, #char, length(myString)>
  [167] objcall 108 ............................. <myString.char[length(myString)]>
  [169] pushcons 32 ............................. <QUOTE>
  [171] eq ...................................... <myString.char[length(myString)] = QUOTE>
  [172] and ..................................... <(myString.char[1] = QUOTE) and (myString.char[length(myString)] = QUOTE)>
  [173] jmpifz [204] ............................ if (myString.char[1] = QUOTE) and (myString.char[length(myString)] = QUOTE) then
  [176] getparam 0 .............................. <myString>
  [178] pusharglist 1 ........................... <myString>
  [180] extcall 165 ............................. <length(myString)>
  [182] pushzero ................................ <0>
  [183] pushzero ................................ <0>
  [184] pushzero ................................ <0>
  [185] pushzero ................................ <0>
  [186] pushzero ................................ <0>
  [187] pushzero ................................ <0>
  [188] pushzero ................................ <0>
  [189] pushzero ................................ <0>
  [190] deletechunk 4 ........................... delete char length(myString) of myString
  [192] pushint8 1 .............................. <1>
  [194] pushzero ................................ <0>
  [195] pushzero ................................ <0>
  [196] pushzero ................................ <0>
  [197] pushzero ................................ <0>
  [198] pushzero ................................ <0>
  [199] pushzero ................................ <0>
  [200] pushzero ................................ <0>
  [201] pushzero ................................ <0>
  [202] deletechunk 4 ........................... delete char 1 of myString
  [204] getparam 0 .............................. <myString>
  [206] pusharglistnoret 1 ...................... <myString>
  [208] extcall 78 .............................. return myString
  [210] ret
end

on displayPublicStudios me, aRoomData
  [  0] getprop 76 .............................. <pOpenWindows>
  [  2] peek 0
  [  4] pusharglist 1
  [  6] extcall 104
  [  8] pushint8 1
  [ 10] peek 0
  [ 12] peek 2
  [ 14] lteq
  [ 15] jmpifz [ 84] ............................ repeat with n in pOpenWindows
  [ 18] peek 2
  [ 20] peek 1
  [ 22] pusharglist 2
  [ 24] extcall 95
  [ 26] setlocal 0
  [ 28] getlocal 0 .............................. <n>
  [ 30] getobjprop 96 ........................... <n.pScrollingLists>
  [ 32] pusharglist 1 ........................... <n.pScrollingLists>
  [ 34] extcall 104 ............................. <count(n.pScrollingLists)>
  [ 36] jmpifz [ 79] ............................ if count(n.pScrollingLists) then
  [ 39] getlocal 0 .............................. <n>
  [ 41] getobjprop 96 ........................... <n.pScrollingLists>
  [ 43] pushsymb 97 ............................. <#roomlist>
  [ 45] pusharglist 2 ........................... <n.pScrollingLists, #roomlist>
  [ 47] extcall 89 .............................. <getaProp(n.pScrollingLists, #roomlist)>
  [ 49] pusharglist 1 ........................... <getaProp(n.pScrollingLists, #roomlist)>
  [ 51] extcall 87 .............................. <voidp(getaProp(n.pScrollingLists, #roomlist))>
  [ 53] pushzero ................................ <0>
  [ 54] eq ...................................... <voidp(getaProp(n.pScrollingLists, #roomlist)) = 0>
  [ 55] jmpifz [ 79] ............................ if voidp(getaProp(n.pScrollingLists, #roomlist)) = 0 then
  [ 58] getlocal 0 .............................. <n>
  [ 60] getchainedprop 96 ....................... <n.pScrollingLists>
  [ 62] getchainedprop 97 ....................... <n.pScrollingLists.roomlist>
  [ 64] getparam 1 .............................. <aRoomData>
  [ 66] setobjprop 170 .......................... n.pScrollingLists.roomlist.pRoomData = aRoomData
  [ 68] getlocal 0 .............................. <n>
  [ 70] getchainedprop 96 ....................... <n.pScrollingLists>
  [ 72] getchainedprop 97 ....................... <n.pScrollingLists.roomlist>
  [ 74] pusharglistnoret 1 ...................... <n.pScrollingLists.roomlist>
  [ 76] objcall 111 ............................. n.pScrollingLists.roomlist.updatecontent()
  [ 78] ret ..................................... exit
  [ 79] pushint8 1
  [ 81] add
  [ 82] endrepeat [ 10]
  [ 84] pop 3
  [ 86] ret
end

on displayStudioDetail me, aDetail
  [  0] getprop 76 .............................. <pOpenWindows>
  [  2] peek 0
  [  4] pusharglist 1
  [  6] extcall 104
  [  8] pushint8 1
  [ 10] peek 0
  [ 12] peek 2
  [ 14] lteq
  [ 15] jmpifz [111] ............................ repeat with n in pOpenWindows
  [ 18] peek 2
  [ 20] peek 1
  [ 22] pusharglist 2
  [ 24] extcall 95
  [ 26] setlocal 0
  [ 28] getlocal 0 .............................. <n>
  [ 30] getobjprop 96 ........................... <n.pScrollingLists>
  [ 32] pusharglist 1 ........................... <n.pScrollingLists>
  [ 34] extcall 104 ............................. <count(n.pScrollingLists)>
  [ 36] jmpifz [106] ............................ if count(n.pScrollingLists) then
  [ 39] getlocal 0 .............................. <n>
  [ 41] getobjprop 96 ........................... <n.pScrollingLists>
  [ 43] pushsymb 97 ............................. <#roomlist>
  [ 45] pusharglist 2 ........................... <n.pScrollingLists, #roomlist>
  [ 47] extcall 89 .............................. <getaProp(n.pScrollingLists, #roomlist)>
  [ 49] pusharglist 1 ........................... <getaProp(n.pScrollingLists, #roomlist)>
  [ 51] extcall 87 .............................. <voidp(getaProp(n.pScrollingLists, #roomlist))>
  [ 53] pushzero ................................ <0>
  [ 54] eq ...................................... <voidp(getaProp(n.pScrollingLists, #roomlist)) = 0>
  [ 55] jmpifz [ 74] ............................ if voidp(getaProp(n.pScrollingLists, #roomlist)) = 0 then
  [ 58] getlocal 0 .............................. <n>
  [ 60] getchainedprop 96 ....................... <n.pScrollingLists>
  [ 62] getchainedprop 97 ....................... <n.pScrollingLists.roomlist>
  [ 64] getparam 1 .............................. <aDetail>
  [ 66] pusharglistnoret 2 ...................... <n.pScrollingLists.roomlist, aDetail>
  [ 68] objcall 172 ............................. n.pScrollingLists.roomlist.displayRoomDetail(aDetail)
  [ 70] ret ..................................... exit
  [ 71] jmp [106] ............................... next repeat
  [ 74] getlocal 0 .............................. <n>
  [ 76] getobjprop 96 ........................... <n.pScrollingLists>
  [ 78] pushsymb 105 ............................ <#userList>
  [ 80] pusharglist 2 ........................... <n.pScrollingLists, #userList>
  [ 82] extcall 89 .............................. <getaProp(n.pScrollingLists, #userList)>
  [ 84] pusharglist 1 ........................... <getaProp(n.pScrollingLists, #userList)>
  [ 86] extcall 87 .............................. <voidp(getaProp(n.pScrollingLists, #userList))>
  [ 88] pushzero ................................ <0>
  [ 89] eq ...................................... <voidp(getaProp(n.pScrollingLists, #userList)) = 0>
  [ 90] jmpifz [106] ............................ if voidp(getaProp(n.pScrollingLists, #userList)) = 0 then
  [ 93] getlocal 0 .............................. <n>
  [ 95] getchainedprop 96 ....................... <n.pScrollingLists>
  [ 97] getchainedprop 105 ...................... <n.pScrollingLists.userList>
  [ 99] getparam 1 .............................. <aDetail>
  [101] pusharglistnoret 2 ...................... <n.pScrollingLists.userList, aDetail>
  [103] objcall 172 ............................. n.pScrollingLists.userList.displayRoomDetail(aDetail)
  [105] ret ..................................... exit
  [106] pushint8 1
  [108] add
  [109] endrepeat [ 10]
  [111] pop 3
  [113] ret
end

on displayPrivateStudios me, aRoomData
  [  0] getprop 76 .............................. <pOpenWindows>
  [  2] peek 0
  [  4] pusharglist 1
  [  6] extcall 104
  [  8] pushint8 1
  [ 10] peek 0
  [ 12] peek 2
  [ 14] lteq
  [ 15] jmpifz [ 84] ............................ repeat with n in pOpenWindows
  [ 18] peek 2
  [ 20] peek 1
  [ 22] pusharglist 2
  [ 24] extcall 95
  [ 26] setlocal 0
  [ 28] getlocal 0 .............................. <n>
  [ 30] getobjprop 96 ........................... <n.pScrollingLists>
  [ 32] pusharglist 1 ........................... <n.pScrollingLists>
  [ 34] extcall 104 ............................. <count(n.pScrollingLists)>
  [ 36] jmpifz [ 79] ............................ if count(n.pScrollingLists) then
  [ 39] getlocal 0 .............................. <n>
  [ 41] getobjprop 96 ........................... <n.pScrollingLists>
  [ 43] pushsymb 105 ............................ <#userList>
  [ 45] pusharglist 2 ........................... <n.pScrollingLists, #userList>
  [ 47] extcall 89 .............................. <getaProp(n.pScrollingLists, #userList)>
  [ 49] pusharglist 1 ........................... <getaProp(n.pScrollingLists, #userList)>
  [ 51] extcall 87 .............................. <voidp(getaProp(n.pScrollingLists, #userList))>
  [ 53] pushzero ................................ <0>
  [ 54] eq ...................................... <voidp(getaProp(n.pScrollingLists, #userList)) = 0>
  [ 55] jmpifz [ 79] ............................ if voidp(getaProp(n.pScrollingLists, #userList)) = 0 then
  [ 58] getlocal 0 .............................. <n>
  [ 60] getchainedprop 96 ....................... <n.pScrollingLists>
  [ 62] getchainedprop 105 ...................... <n.pScrollingLists.userList>
  [ 64] getparam 1 .............................. <aRoomData>
  [ 66] setobjprop 109 .......................... n.pScrollingLists.userList.pUserData = aRoomData
  [ 68] getlocal 0 .............................. <n>
  [ 70] getchainedprop 96 ....................... <n.pScrollingLists>
  [ 72] getchainedprop 105 ...................... <n.pScrollingLists.userList>
  [ 74] pusharglistnoret 1 ...................... <n.pScrollingLists.userList>
  [ 76] objcall 111 ............................. n.pScrollingLists.userList.updatecontent()
  [ 78] ret ..................................... exit
  [ 79] pushint8 1
  [ 81] add
  [ 82] endrepeat [ 10]
  [ 84] pop 3
  [ 86] ret
end

on displayStudioPeople me, aPeople
  [  0] getprop 76 .............................. <pOpenWindows>
  [  2] peek 0
  [  4] pusharglist 1
  [  6] extcall 104
  [  8] pushint8 1
  [ 10] peek 0
  [ 12] peek 2
  [ 14] lteq
  [ 15] jmpifz [ 86] ............................ repeat with n in pOpenWindows
  [ 18] peek 2
  [ 20] peek 1
  [ 22] pusharglist 2
  [ 24] extcall 95
  [ 26] setlocal 0
  [ 28] getlocal 0 .............................. <n>
  [ 30] getobjprop 96 ........................... <n.pScrollingLists>
  [ 32] pusharglist 1 ........................... <n.pScrollingLists>
  [ 34] extcall 104 ............................. <count(n.pScrollingLists)>
  [ 36] jmpifz [ 81] ............................ if count(n.pScrollingLists) then
  [ 39] getlocal 0 .............................. <n>
  [ 41] getobjprop 96 ........................... <n.pScrollingLists>
  [ 43] pushsymb 174 ............................ <#peoplelist>
  [ 45] pusharglist 2 ........................... <n.pScrollingLists, #peoplelist>
  [ 47] extcall 89 .............................. <getaProp(n.pScrollingLists, #peoplelist)>
  [ 49] pusharglist 1 ........................... <getaProp(n.pScrollingLists, #peoplelist)>
  [ 51] extcall 87 .............................. <voidp(getaProp(n.pScrollingLists, #peoplelist))>
  [ 53] pushzero ................................ <0>
  [ 54] eq ...................................... <voidp(getaProp(n.pScrollingLists, #peoplelist)) = 0>
  [ 55] jmpifz [ 81] ............................ if voidp(getaProp(n.pScrollingLists, #peoplelist)) = 0 then
  [ 58] getlocal 0 .............................. <n>
  [ 60] getchainedprop 96 ....................... <n.pScrollingLists>
  [ 62] getchainedprop 174 ...................... <n.pScrollingLists.peoplelist>
  [ 64] getparam 1 .............................. <aPeople>
  [ 66] setobjprop 109 .......................... n.pScrollingLists.peoplelist.pUserData = aPeople
  [ 68] getlocal 0 .............................. <n>
  [ 70] getchainedprop 96 ....................... <n.pScrollingLists>
  [ 72] getchainedprop 174 ...................... <n.pScrollingLists.peoplelist>
  [ 74] pushint8 1 .............................. <1>
  [ 76] pusharglistnoret 2 ...................... <n.pScrollingLists.peoplelist, 1>
  [ 78] objcall 111 ............................. n.pScrollingLists.peoplelist.updatecontent(1)
  [ 80] ret ..................................... exit
  [ 81] pushint8 1
  [ 83] add
  [ 84] endrepeat [ 10]
  [ 86] pop 3
  [ 88] ret
end

on LastUsedSprite me
  [  0] pushint16 751 ........................... <751>
  [  3] setlocal 0
  [  5] getlocal 0
  [  7] getmovieprop 176 ........................ <the lastChannel>
  [  9] lteq
  [ 10] jmpifz [ 46] ............................ repeat with n = 751 to the lastChannel
  [ 13] getlocal 0 .............................. <n>
  [ 15] pusharglist 1 ........................... <n>
  [ 17] extcall 177 ............................. <sprite(n)>
  [ 19] getobjprop 102 .......................... <sprite(n).memberNum>
  [ 21] pushint8 1 .............................. <1>
  [ 23] lt ...................................... <sprite(n).memberNum < 1>
  [ 24] jmpifz [ 37] ............................ if sprite(n).memberNum < 1 then
  [ 27] getlocal 0 .............................. <n>
  [ 29] setprop 77 .............................. pLastUsedSprite = n
  [ 31] getlocal 0 .............................. <n>
  [ 33] pusharglistnoret 1 ...................... <n>
  [ 35] extcall 78 .............................. return n
  [ 37] pushint8 1
  [ 39] getlocal 0
  [ 41] add
  [ 42] setlocal 0
  [ 44] endrepeat [  5]
  [ 46] ret
end

on alert me, textID, textID2, bDialogWindow
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 33 ............................. <"alert()">
  [  4] pushcons 34 ............................. <"textID:">
  [  6] joinpadstr .............................. <"alert()" && "textID:">
  [  7] getparam 1 .............................. <textID>
  [  9] joinpadstr .............................. <"alert()" && "textID:" && textID>
  [ 10] pushcons 35 ............................. <"textID2:">
  [ 12] joinpadstr .............................. <"alert()" && "textID:" && textID && "textID2:">
  [ 13] getparam 2 .............................. <textID2>
  [ 15] joinpadstr .............................. <"alert()" && "textID:" && textID && "textID2:" && textID2>
  [ 16] pusharglistnoret 2 ...................... <me, "alert()" && "textID:" && textID && "textID2:" && textID2>
  [ 18] objcall 1 ............................... me.debug("alert()" && "textID:" && textID && "textID2:" && textID2)
  [ 20] getparam 3 .............................. <bDialogWindow>
  [ 22] jmpifz [ 69] ............................ if bDialogWindow then / else
  [ 25] getparam 0 .............................. <me>
  [ 27] pushcons 36 ............................. <"whale_wash_dialog.window">
  [ 29] pusharglistnoret 2 ...................... <me, "whale_wash_dialog.window">
  [ 31] objcall 2 ............................... me.newwindow("whale_wash_dialog.window")
  [ 33] getparam 0 .............................. <me>
  [ 35] pushcons 37 ............................. <"textmgr.getreftext(textID):">
  [ 37] getglobal 178 ........................... <TextMgr>
  [ 39] getparam 1 .............................. <textID>
  [ 41] pusharglist 2 ........................... <TextMgr, textID>
  [ 43] objcall 179 ............................. <TextMgr.GetRefText(textID)>
  [ 45] joinpadstr .............................. <"textmgr.getreftext(textID):" && TextMgr.GetRefText(textID)>
  [ 46] pusharglistnoret 2 ...................... <me, "textmgr.getreftext(textID):" && TextMgr.GetRefText(textID)>
  [ 48] objcall 1 ............................... me.debug("textmgr.getreftext(textID):" && TextMgr.GetRefText(textID))
  [ 50] pushcons 38 ............................. <"entry_alertext">
  [ 52] pusharglist 1 ........................... <"entry_alertext">
  [ 54] extcall 101 ............................. <member("entry_alertext")>
  [ 56] getglobal 178 ........................... <TextMgr>
  [ 58] getparam 1 .............................. <textID>
  [ 60] pusharglist 2 ........................... <TextMgr, textID>
  [ 62] objcall 179 ............................. <TextMgr.GetRefText(textID)>
  [ 64] setobjprop 129 .......................... member("entry_alertext").text = TextMgr.GetRefText(textID)
  [ 66] jmp [193]
  [ 69] getparam 2 .............................. <textID2>
  [ 71] pusharglist 1 ........................... <textID2>
  [ 73] extcall 87 .............................. <voidp(textID2)>
  [ 75] jmpifz [105] ............................ if voidp(textID2) then / else
  [ 78] getparam 0 .............................. <me>
  [ 80] pushcons 39 ............................. <"sanfo_general_alert.window">
  [ 82] pusharglistnoret 2 ...................... <me, "sanfo_general_alert.window">
  [ 84] objcall 2 ............................... me.newwindow("sanfo_general_alert.window")
  [ 86] pushcons 38 ............................. <"entry_alertext">
  [ 88] pusharglist 1 ........................... <"entry_alertext">
  [ 90] extcall 101 ............................. <member("entry_alertext")>
  [ 92] getglobal 178 ........................... <TextMgr>
  [ 94] getparam 1 .............................. <textID>
  [ 96] pusharglist 2 ........................... <TextMgr, textID>
  [ 98] objcall 179 ............................. <TextMgr.GetRefText(textID)>
  [100] setobjprop 129 .......................... member("entry_alertext").text = TextMgr.GetRefText(textID)
  [102] jmp [193]
  [105] getparam 0 .............................. <me>
  [107] pushcons 40 ............................. <"sanfo_general_alert_extralong.window">
  [109] pusharglistnoret 2 ...................... <me, "sanfo_general_alert_extralong.window">
  [111] objcall 2 ............................... me.newwindow("sanfo_general_alert_extralong.window")
  [113] getglobal 178 ........................... <TextMgr>
  [115] getparam 2 .............................. <textID2>
  [117] pusharglist 2 ........................... <TextMgr, textID2>
  [119] objcall 179 ............................. <TextMgr.GetRefText(textID2)>
  [121] setlocal 0 .............................. mymessage = TextMgr.GetRefText(textID2)
  [123] getlocal 0 .............................. <mymessage>
  [125] pusharglist 1 ........................... <mymessage>
  [127] extcall 87 .............................. <voidp(mymessage)>
  [129] getlocal 0 .............................. <mymessage>
  [131] pushcons 10 ............................. <EMPTY>
  [133] eq ...................................... <mymessage = EMPTY>
  [134] or ...................................... <voidp(mymessage) or (mymessage = EMPTY)>
  [135] jmpifz [167] ............................ if voidp(mymessage) or (mymessage = EMPTY) then / else
  [138] pushcons 41 ............................. <"bold_alert_text">
  [140] pusharglist 1 ........................... <"bold_alert_text">
  [142] extcall 101 ............................. <member("bold_alert_text")>
  [144] getglobal 178 ........................... <TextMgr>
  [146] getparam 1 .............................. <textID>
  [148] pusharglist 2 ........................... <TextMgr, textID>
  [150] objcall 179 ............................. <TextMgr.GetRefText(textID)>
  [152] setobjprop 129 .......................... member("bold_alert_text").text = TextMgr.GetRefText(textID)
  [154] pushcons 42 ............................. <"entry_bigalertext22">
  [156] pusharglist 1 ........................... <"entry_bigalertext22">
  [158] extcall 101 ............................. <member("entry_bigalertext22")>
  [160] getparam 2 .............................. <textID2>
  [162] setobjprop 129 .......................... member("entry_bigalertext22").text = textID2
  [164] jmp [193]
  [167] pushcons 41 ............................. <"bold_alert_text">
  [169] pusharglist 1 ........................... <"bold_alert_text">
  [171] extcall 101 ............................. <member("bold_alert_text")>
  [173] getglobal 178 ........................... <TextMgr>
  [175] getparam 1 .............................. <textID>
  [177] pusharglist 2 ........................... <TextMgr, textID>
  [179] objcall 179 ............................. <TextMgr.GetRefText(textID)>
  [181] setobjprop 129 .......................... member("bold_alert_text").text = TextMgr.GetRefText(textID)
  [183] pushcons 42 ............................. <"entry_bigalertext22">
  [185] pusharglist 1 ........................... <"entry_bigalertext22">
  [187] extcall 101 ............................. <member("entry_bigalertext22")>
  [189] getlocal 0 .............................. <mymessage>
  [191] setobjprop 129 .......................... member("entry_bigalertext22").text = mymessage
  [193] pushcons 10 ............................. <EMPTY>
  [195] setlocal 1 .............................. sParamString = EMPTY
  [197] getparam 1 .............................. <textID>
  [199] pushcons 43 ............................. <"ALERT_GENERIC">
  [201] eq ...................................... <textID = "ALERT_GENERIC">
  [202] getparam 2 .............................. <textID2>
  [204] pushcons 43 ............................. <"ALERT_GENERIC">
  [206] eq ...................................... <textID2 = "ALERT_GENERIC">
  [207] or ...................................... <(textID = "ALERT_GENERIC") or (textID2 = "ALERT_GENERIC")>
  [208] jmpifz [218] ............................ if (textID = "ALERT_GENERIC") or (textID2 = "ALERT_GENERIC") then / else
  [211] pushcons 44 ............................. <"Problem with the server">
  [213] setlocal 1 .............................. sParamString = "Problem with the server"
  [215] jmp [488]
  [218] getparam 1 .............................. <textID>
  [220] pushcons 45 ............................. <"ALERT_FULL">
  [222] eq ...................................... <textID = "ALERT_FULL">
  [223] getparam 2 .............................. <textID2>
  [225] pushcons 45 ............................. <"ALERT_FULL">
  [227] eq ...................................... <textID2 = "ALERT_FULL">
  [228] or ...................................... <(textID = "ALERT_FULL") or (textID2 = "ALERT_FULL")>
  [229] jmpifz [239] ............................ if (textID = "ALERT_FULL") or (textID2 = "ALERT_FULL") then / else
  [232] pushcons 46 ............................. <"Room is currently full">
  [234] setlocal 1 .............................. sParamString = "Room is currently full"
  [236] jmp [488]
  [239] getparam 1 .............................. <textID>
  [241] pushcons 47 ............................. <"ALERT_BANNED">
  [243] eq ...................................... <textID = "ALERT_BANNED">
  [244] getparam 2 .............................. <textID2>
  [246] pushcons 47 ............................. <"ALERT_BANNED">
  [248] eq ...................................... <textID2 = "ALERT_BANNED">
  [249] or ...................................... <(textID = "ALERT_BANNED") or (textID2 = "ALERT_BANNED")>
  [250] jmpifz [260] ............................ if (textID = "ALERT_BANNED") or (textID2 = "ALERT_BANNED") then / else
  [253] pushcons 48 ............................. <"Temporarily banned">
  [255] setlocal 1 .............................. sParamString = "Temporarily banned"
  [257] jmp [488]
  [260] getparam 1 .............................. <textID>
  [262] pushcons 49 ............................. <"ALERT_STATE_CLOSED">
  [264] eq ...................................... <textID = "ALERT_STATE_CLOSED">
  [265] getparam 2 .............................. <textID2>
  [267] pushcons 49 ............................. <"ALERT_STATE_CLOSED">
  [269] eq ...................................... <textID2 = "ALERT_STATE_CLOSED">
  [270] or ...................................... <(textID = "ALERT_STATE_CLOSED") or (textID2 = "ALERT_STATE_CLOSED")>
  [271] jmpifz [281] ............................ if (textID = "ALERT_STATE_CLOSED") or (textID2 = "ALERT_STATE_CLOSED") then / else
  [274] pushcons 50 ............................. <"CS is now closed">
  [276] setlocal 1 .............................. sParamString = "CS is now closed"
  [278] jmp [488]
  [281] getparam 1 .............................. <textID>
  [283] pushcons 51 ............................. <"ALERT_STATE_FULL">
  [285] eq ...................................... <textID = "ALERT_STATE_FULL">
  [286] getparam 2 .............................. <textID2>
  [288] pushcons 51 ............................. <"ALERT_STATE_FULL">
  [290] eq ...................................... <textID2 = "ALERT_STATE_FULL">
  [291] or ...................................... <(textID = "ALERT_STATE_FULL") or (textID2 = "ALERT_STATE_FULL")>
  [292] jmpifz [302] ............................ if (textID = "ALERT_STATE_FULL") or (textID2 = "ALERT_STATE_FULL") then / else
  [295] pushcons 52 ............................. <"CS is currently full">
  [297] setlocal 1 .............................. sParamString = "CS is currently full"
  [299] jmp [488]
  [302] getparam 1 .............................. <textID>
  [304] pushcons 53 ............................. <"ALERT_NO_CONNECTION">
  [306] eq ...................................... <textID = "ALERT_NO_CONNECTION">
  [307] getparam 2 .............................. <textID2>
  [309] pushcons 53 ............................. <"ALERT_NO_CONNECTION">
  [311] eq ...................................... <textID2 = "ALERT_NO_CONNECTION">
  [312] or ...................................... <(textID = "ALERT_NO_CONNECTION") or (textID2 = "ALERT_NO_CONNECTION")>
  [313] jmpifz [323] ............................ if (textID = "ALERT_NO_CONNECTION") or (textID2 = "ALERT_NO_CONNECTION") then / else
  [316] pushcons 54 ............................. <"No connection with server">
  [318] setlocal 1 .............................. sParamString = "No connection with server"
  [320] jmp [488]
  [323] getparam 1 .............................. <textID>
  [325] pushcons 55 ............................. <"ALERT_DROPPED_CONNECTION">
  [327] eq ...................................... <textID = "ALERT_DROPPED_CONNECTION">
  [328] getparam 2 .............................. <textID2>
  [330] pushcons 55 ............................. <"ALERT_DROPPED_CONNECTION">
  [332] eq ...................................... <textID2 = "ALERT_DROPPED_CONNECTION">
  [333] or ...................................... <(textID = "ALERT_DROPPED_CONNECTION") or (textID2 = "ALERT_DROPPED_CONNECTION")>
  [334] jmpifz [344] ............................ if (textID = "ALERT_DROPPED_CONNECTION") or (textID2 = "ALERT_DROPPED_CONNECTION") then / else
  [337] pushcons 56 ............................. <"Connection dropped">
  [339] setlocal 1 .............................. sParamString = "Connection dropped"
  [341] jmp [488]
  [344] getparam 1 .............................. <textID>
  [346] pushcons 57 ............................. <"ALERT_USER_NOT_FOUND">
  [348] eq ...................................... <textID = "ALERT_USER_NOT_FOUND">
  [349] getparam 2 .............................. <textID2>
  [351] pushcons 57 ............................. <"ALERT_USER_NOT_FOUND">
  [353] eq ...................................... <textID2 = "ALERT_USER_NOT_FOUND">
  [354] or ...................................... <(textID = "ALERT_USER_NOT_FOUND") or (textID2 = "ALERT_USER_NOT_FOUND")>
  [355] jmpifz [365] ............................ if (textID = "ALERT_USER_NOT_FOUND") or (textID2 = "ALERT_USER_NOT_FOUND") then / else
  [358] pushcons 58 ............................. <"Could not authenticate user">
  [360] setlocal 1 .............................. sParamString = "Could not authenticate user"
  [362] jmp [488]
  [365] getparam 1 .............................. <textID>
  [367] pushcons 59 ............................. <"ALERT_DUPLICATE_LOGIN">
  [369] eq ...................................... <textID = "ALERT_DUPLICATE_LOGIN">
  [370] getparam 2 .............................. <textID2>
  [372] pushcons 59 ............................. <"ALERT_DUPLICATE_LOGIN">
  [374] eq ...................................... <textID2 = "ALERT_DUPLICATE_LOGIN">
  [375] or ...................................... <(textID = "ALERT_DUPLICATE_LOGIN") or (textID2 = "ALERT_DUPLICATE_LOGIN")>
  [376] jmpifz [386] ............................ if (textID = "ALERT_DUPLICATE_LOGIN") or (textID2 = "ALERT_DUPLICATE_LOGIN") then / else
  [379] pushcons 60 ............................. <"Connection lost - duplicate login">
  [381] setlocal 1 .............................. sParamString = "Connection lost - duplicate login"
  [383] jmp [488]
  [386] getparam 1 .............................. <textID>
  [388] pushcons 61 ............................. <"ALERT_ROOM_NOT_EXIST">
  [390] eq ...................................... <textID = "ALERT_ROOM_NOT_EXIST">
  [391] getparam 2 .............................. <textID2>
  [393] pushcons 61 ............................. <"ALERT_ROOM_NOT_EXIST">
  [395] eq ...................................... <textID2 = "ALERT_ROOM_NOT_EXIST">
  [396] or ...................................... <(textID = "ALERT_ROOM_NOT_EXIST") or (textID2 = "ALERT_ROOM_NOT_EXIST")>
  [397] jmpifz [407] ............................ if (textID = "ALERT_ROOM_NOT_EXIST") or (textID2 = "ALERT_ROOM_NOT_EXIST") then / else
  [400] pushcons 62 ............................. <"Room does not exist">
  [402] setlocal 1 .............................. sParamString = "Room does not exist"
  [404] jmp [488]
  [407] getparam 1 .............................. <textID>
  [409] pushcons 63 ............................. <"ALERT_MAX_ITEMS_EXCEEDED">
  [411] eq ...................................... <textID = "ALERT_MAX_ITEMS_EXCEEDED">
  [412] getparam 2 .............................. <textID2>
  [414] pushcons 63 ............................. <"ALERT_MAX_ITEMS_EXCEEDED">
  [416] eq ...................................... <textID2 = "ALERT_MAX_ITEMS_EXCEEDED">
  [417] or ...................................... <(textID = "ALERT_MAX_ITEMS_EXCEEDED") or (textID2 = "ALERT_MAX_ITEMS_EXCEEDED")>
  [418] jmpifz [428] ............................ if (textID = "ALERT_MAX_ITEMS_EXCEEDED") or (textID2 = "ALERT_MAX_ITEMS_EXCEEDED") then / else
  [421] pushcons 64 ............................. <"Max items exceeded">
  [423] setlocal 1 .............................. sParamString = "Max items exceeded"
  [425] jmp [488]
  [428] getparam 1 .............................. <textID>
  [430] pushcons 65 ............................. <"ALERT_NO_BLANK_CDS">
  [432] eq ...................................... <textID = "ALERT_NO_BLANK_CDS">
  [433] getparam 2 .............................. <textID2>
  [435] pushcons 65 ............................. <"ALERT_NO_BLANK_CDS">
  [437] eq ...................................... <textID2 = "ALERT_NO_BLANK_CDS">
  [438] or ...................................... <(textID = "ALERT_NO_BLANK_CDS") or (textID2 = "ALERT_NO_BLANK_CDS")>
  [439] jmpifz [449] ............................ if (textID = "ALERT_NO_BLANK_CDS") or (textID2 = "ALERT_NO_BLANK_CDS") then / else
  [442] pushcons 66 ............................. <"No blank CDs">
  [444] setlocal 1 .............................. sParamString = "No blank CDs"
  [446] jmp [488]
  [449] getparam 1 .............................. <textID>
  [451] pushcons 67 ............................. <"ALERT_NO_SERVER_AVAILABLE">
  [453] eq ...................................... <textID = "ALERT_NO_SERVER_AVAILABLE">
  [454] getparam 2 .............................. <textID2>
  [456] pushcons 67 ............................. <"ALERT_NO_SERVER_AVAILABLE">
  [458] eq ...................................... <textID2 = "ALERT_NO_SERVER_AVAILABLE">
  [459] or ...................................... <(textID = "ALERT_NO_SERVER_AVAILABLE") or (textID2 = "ALERT_NO_SERVER_AVAILABLE")>
  [460] jmpifz [470] ............................ if (textID = "ALERT_NO_SERVER_AVAILABLE") or (textID2 = "ALERT_NO_SERVER_AVAILABLE") then / else
  [463] pushcons 68 ............................. <"Problem locating this studio">
  [465] setlocal 1 .............................. sParamString = "Problem locating this studio"
  [467] jmp [488]
  [470] getparam 1 .............................. <textID>
  [472] pushcons 69 ............................. <"ALERT_INVALID_SCREEN_NAME">
  [474] eq ...................................... <textID = "ALERT_INVALID_SCREEN_NAME">
  [475] getparam 2 .............................. <textID2>
  [477] pushcons 69 ............................. <"ALERT_INVALID_SCREEN_NAME">
  [479] eq ...................................... <textID2 = "ALERT_INVALID_SCREEN_NAME">
  [480] or ...................................... <(textID = "ALERT_INVALID_SCREEN_NAME") or (textID2 = "ALERT_INVALID_SCREEN_NAME")>
  [481] jmpifz [488] ............................ if (textID = "ALERT_INVALID_SCREEN_NAME") or (textID2 = "ALERT_INVALID_SCREEN_NAME") then
  [484] pushcons 70 ............................. <"Name with invalid characters">
  [486] setlocal 1 .............................. sParamString = "Name with invalid characters"
  [488] getlocal 1 .............................. <sParamString>
  [490] pushcons 10 ............................. <EMPTY>
  [492] nteq .................................... <sParamString <> EMPTY>
  [493] jmpifz [521] ............................ if sParamString <> EMPTY then
  [496] pushcons 71 ............................. <"javascript:doTrackingCokeStudios('cokestudios.error.alert', '">
  [498] getlocal 1 .............................. <sParamString>
  [500] joinstr ................................. <"javascript:doTrackingCokeStudios('cokestudios.error.alert', '" & sParamString>
  [501] pushcons 72 ............................. <"')">
  [503] joinstr ................................. <"javascript:doTrackingCokeStudios('cokestudios.error.alert', '" & sParamString & "')">
  [504] setlocal 1 .............................. sParamString = "javascript:doTrackingCokeStudios('cokestudios.error.alert', '" & sParamString & "')"
  [506] pushcons 73 ............................. <"sParamString: ">
  [508] getlocal 1 .............................. <sParamString>
  [510] joinstr ................................. <"sParamString: " & sParamString>
  [511] pusharglistnoret 1 ...................... <"sParamString: " & sParamString>
  [513] extcall 80 .............................. put "sParamString: " & sParamString
  [515] getlocal 1 .............................. <sParamString>
  [517] pusharglistnoret 1 ...................... <sParamString>
  [519] extcall 181 ............................. gotoNetPage(sParamString)
  [521] getparam 0 .............................. <me>
  [523] pusharglist 1 ........................... <me>
  [525] objcall 55 .............................. <me.getLoader()>
  [527] pusharglistnoret 1 ...................... <me.getLoader()>
  [529] objcall 180 ............................. me.getLoader().closeWindow()
  [531] ret
end

on decisiondialog me, textID, okbuttonscript
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 74 ............................. <"sanfo_decision_dialog.window">
  [  4] pusharglistnoret 2 ...................... <me, "sanfo_decision_dialog.window">
  [  6] objcall 2 ............................... me.newwindow("sanfo_decision_dialog.window")
  [  8] pushcons 75 ............................. <"entry_bigalertext">
  [ 10] pusharglist 1 ........................... <"entry_bigalertext">
  [ 12] extcall 101 ............................. <member("entry_bigalertext")>
  [ 14] getglobal 178 ........................... <TextMgr>
  [ 16] getparam 1 .............................. <textID>
  [ 18] pusharglist 2 ........................... <TextMgr, textID>
  [ 20] objcall 179 ............................. <TextMgr.GetRefText(textID)>
  [ 22] setobjprop 129 .......................... member("entry_bigalertext").text = TextMgr.GetRefText(textID)
  [ 24] pusharglistnoret 0 ...................... <>
  [ 26] extcall 187 ............................. updateStage()
  [ 28] pushsymb 189 ............................ <#getokbutton>
  [ 30] pusharglist 1 ........................... <#getokbutton>
  [ 32] extcall 188 ............................. <sendAllSprites(#getokbutton)>
  [ 34] setlocal 0 .............................. okbutton = sendAllSprites(#getokbutton)
  [ 36] getlocal 0 .............................. <okbutton>
  [ 38] pusharglist 1 ........................... <okbutton>
  [ 40] extcall 177 ............................. <sprite(okbutton)>
  [ 42] getobjprop 191 .......................... <sprite(okbutton).scriptInstanceList>
  [ 44] getparam 2 .............................. <okbuttonscript>
  [ 46] pusharglist 1 ........................... <okbuttonscript>
  [ 48] extcall 92 .............................. <script(okbuttonscript)>
  [ 50] pusharglist 1 ........................... <script(okbuttonscript)>
  [ 52] extcall 0 ............................... <new(script(okbuttonscript))>
  [ 54] pusharglistnoret 2 ...................... <sprite(okbutton).scriptInstanceList, new(script(okbuttonscript))>
  [ 56] extcall 190 ............................. append(sprite(okbutton).scriptInstanceList, new(script(okbuttonscript)))
  [ 58] ret
end

on URLdialog me, textID, myURL
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 74 ............................. <"sanfo_decision_dialog.window">
  [  4] pusharglistnoret 2 ...................... <me, "sanfo_decision_dialog.window">
  [  6] objcall 2 ............................... me.newwindow("sanfo_decision_dialog.window")
  [  8] pushcons 75 ............................. <"entry_bigalertext">
  [ 10] pusharglist 1 ........................... <"entry_bigalertext">
  [ 12] extcall 101 ............................. <member("entry_bigalertext")>
  [ 14] getglobal 178 ........................... <TextMgr>
  [ 16] getparam 1 .............................. <textID>
  [ 18] pusharglist 2 ........................... <TextMgr, textID>
  [ 20] objcall 179 ............................. <TextMgr.GetRefText(textID)>
  [ 22] setobjprop 129 .......................... member("entry_bigalertext").text = TextMgr.GetRefText(textID)
  [ 24] pusharglistnoret 0 ...................... <>
  [ 26] extcall 187 ............................. updateStage()
  [ 28] pushsymb 189 ............................ <#getokbutton>
  [ 30] pusharglist 1 ........................... <#getokbutton>
  [ 32] extcall 188 ............................. <sendAllSprites(#getokbutton)>
  [ 34] setlocal 0 .............................. okbutton = sendAllSprites(#getokbutton)
  [ 36] getlocal 0 .............................. <okbutton>
  [ 38] pusharglist 1 ........................... <okbutton>
  [ 40] extcall 177 ............................. <sprite(okbutton)>
  [ 42] getobjprop 191 .......................... <sprite(okbutton).scriptInstanceList>
  [ 44] pushcons 76 ............................. <"go to URL ok">
  [ 46] pusharglist 1 ........................... <"go to URL ok">
  [ 48] extcall 92 .............................. <script("go to URL ok")>
  [ 50] getparam 2 .............................. <myURL>
  [ 52] pusharglist 2 ........................... <script("go to URL ok"), myURL>
  [ 54] extcall 0 ............................... <new(script("go to URL ok"), myURL)>
  [ 56] pusharglistnoret 2 ...................... <sprite(okbutton).scriptInstanceList, new(script("go to URL ok"), myURL)>
  [ 58] extcall 190 ............................. append(sprite(okbutton).scriptInstanceList, new(script("go to URL ok"), myURL))
  [ 60] ret
end

on startCreateStudio_Result me, iError, sStudioID
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 42] ............................ (case) 0:
  [  9] getglobal 86 ............................ <ElementMgr>
  [ 11] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [ 13] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 15] getobjprop 196 .......................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [ 17] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [ 19] getglobal 86 ............................ <ElementMgr>
  [ 21] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [ 23] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 25] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 27] objcall 180 ............................. ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [ 29] getglobal 86 ............................ <ElementMgr>
  [ 31] pushcons 77 ............................. <"nav_createroom.window">
  [ 33] getlocal 0 .............................. <myRect>
  [ 35] pusharglistnoret 3 ...................... <ElementMgr, "nav_createroom.window", myRect>
  [ 37] objcall 2 ............................... ElementMgr.newwindow("nav_createroom.window", myRect)
  [ 39] jmp [202]
  [ 42] peek 0
  [ 44] pushint8 1 .............................. <1>
  [ 46] eq
  [ 47] jmpifz [ 91] ............................ (case) 1:
  [ 50] getglobal 86 ............................ <ElementMgr>
  [ 52] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [ 54] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 56] getobjprop 196 .......................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [ 58] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [ 60] getglobal 86 ............................ <ElementMgr>
  [ 62] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [ 64] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 66] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 68] objcall 180 ............................. ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [ 70] getglobal 86 ............................ <ElementMgr>
  [ 72] pushcons 78 ............................. <"nav_private_start.window">
  [ 74] getlocal 0 .............................. <myRect>
  [ 76] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_start.window", myRect>
  [ 78] objcall 2 ............................... ElementMgr.newwindow("nav_private_start.window", myRect)
  [ 80] getparam 0 .............................. <me>
  [ 82] pushcons 43 ............................. <"ALERT_GENERIC">
  [ 84] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [ 86] objcall 10 .............................. me.alert("ALERT_GENERIC")
  [ 88] jmp [202]
  [ 91] peek 0
  [ 93] pushint8 6 .............................. <6>
  [ 95] eq
  [ 96] jmpifz [140] ............................ (case) 6:
  [ 99] getglobal 86 ............................ <ElementMgr>
  [101] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [103] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [105] getobjprop 196 .......................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [107] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [109] getglobal 86 ............................ <ElementMgr>
  [111] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [113] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [115] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [117] objcall 180 ............................. ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [119] getglobal 86 ............................ <ElementMgr>
  [121] pushcons 78 ............................. <"nav_private_start.window">
  [123] getlocal 0 .............................. <myRect>
  [125] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_start.window", myRect>
  [127] objcall 2 ............................... ElementMgr.newwindow("nav_private_start.window", myRect)
  [129] getparam 0 .............................. <me>
  [131] pushcons 43 ............................. <"ALERT_GENERIC">
  [133] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [135] objcall 10 .............................. me.alert("ALERT_GENERIC")
  [137] jmp [202]
  [140] peek 0
  [142] pushint8 9 .............................. <9>
  [144] eq
  [145] jmpifz [202] ............................ (case) 9:
  [148] getglobal 86 ............................ <ElementMgr>
  [150] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [152] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [154] getobjprop 196 .......................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [156] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [158] getglobal 86 ............................ <ElementMgr>
  [160] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [162] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [164] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [166] objcall 180 ............................. ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [168] getglobal 86 ............................ <ElementMgr>
  [170] pushcons 78 ............................. <"nav_private_start.window">
  [172] getlocal 0 .............................. <myRect>
  [174] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_start.window", myRect>
  [176] objcall 2 ............................... ElementMgr.newwindow("nav_private_start.window", myRect)
  [178] getglobal 118 ........................... <oDenizenManager>
  [180] pusharglist 1 ........................... <oDenizenManager>
  [182] objcall 197 ............................. <oDenizenManager.getScreenName()>
  [184] setlocal 1 .............................. myscreenname = oDenizenManager.getScreenName()
  [186] getglobal 99 ............................ <oStudioManager>
  [188] getlocal 1 .............................. <myscreenname>
  [190] pusharglistnoret 2 ...................... <oStudioManager, myscreenname>
  [192] objcall 198 ............................. oStudioManager.getByOwnerName(myscreenname)
  [194] getparam 0 .............................. <me>
  [196] pushcons 79 ............................. <"ALERT_OVER_LIMIT">
  [198] pusharglistnoret 2 ...................... <me, "ALERT_OVER_LIMIT">
  [200] objcall 10 .............................. me.alert("ALERT_OVER_LIMIT")
  [202] pop 1 ................................... end case
  [204] ret
end

on createStudio_Result me, iError, sStudioName, sStudioID
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 98] ............................ (case) 0:
  [  9] getglobal 86 ............................ <ElementMgr>
  [ 11] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [ 13] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 15] getobjprop 196 .......................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [ 17] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [ 19] getglobal 86 ............................ <ElementMgr>
  [ 21] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [ 23] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 25] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 27] objcall 180 ............................. ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [ 29] getglobal 86 ............................ <ElementMgr>
  [ 31] pushcons 80 ............................. <"nav_roomready.window">
  [ 33] getlocal 0 .............................. <myRect>
  [ 35] pusharglistnoret 3 ...................... <ElementMgr, "nav_roomready.window", myRect>
  [ 37] objcall 2 ............................... ElementMgr.newwindow("nav_roomready.window", myRect)
  [ 39] pushcons 81 ............................. <"nav_studio_own_createdname">
  [ 41] pusharglist 1 ........................... <"nav_studio_own_createdname">
  [ 43] extcall 101 ............................. <member("nav_studio_own_createdname")>
  [ 45] getparam 2 .............................. <sStudioName>
  [ 47] setobjprop 129 .......................... member("nav_studio_own_createdname").text = sStudioName
  [ 49] pushcons 82 ............................. <"userroomid">
  [ 51] pusharglist 1 ........................... <"userroomid">
  [ 53] extcall 101 ............................. <member("userroomid")>
  [ 55] getobjprop 102 .......................... <member("userroomid").memberNum>
  [ 57] pushint8 1 .............................. <1>
  [ 59] lt ...................................... <member("userroomid").memberNum < 1>
  [ 60] jmpifz [ 85] ............................ if member("userroomid").memberNum < 1 then
  [ 63] pushsymb 202 ............................ <#field>
  [ 65] pusharglist 1 ........................... <#field>
  [ 67] extcall 0 ............................... <new(#field)>
  [ 69] setlocal 1 .............................. myMember = new(#field)
  [ 71] getlocal 1 .............................. <myMember>
  [ 73] pushcons 82 ............................. <"userroomid">
  [ 75] setobjprop 90 ........................... myMember.name = "userroomid"
  [ 77] getglobal 203 ........................... <gMembersToDelete>
  [ 79] getlocal 1 .............................. <myMember>
  [ 81] pusharglistnoret 2 ...................... <gMembersToDelete, myMember>
  [ 83] extcall 190 ............................. append(gMembersToDelete, myMember)
  [ 85] pushcons 82 ............................. <"userroomid">
  [ 87] pusharglist 1 ........................... <"userroomid">
  [ 89] extcall 101 ............................. <member("userroomid")>
  [ 91] getparam 3 .............................. <sStudioID>
  [ 93] setobjprop 129 .......................... member("userroomid").text = sStudioID
  [ 95] jmp [356]
  [ 98] peek 0
  [100] pushint8 1 .............................. <1>
  [102] eq
  [103] jmpifz [147] ............................ (case) 1:
  [106] getglobal 86 ............................ <ElementMgr>
  [108] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [110] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [112] getobjprop 196 .......................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [114] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [116] getglobal 86 ............................ <ElementMgr>
  [118] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [120] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [122] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [124] objcall 180 ............................. ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [126] getglobal 86 ............................ <ElementMgr>
  [128] pushcons 77 ............................. <"nav_createroom.window">
  [130] getlocal 0 .............................. <myRect>
  [132] pusharglistnoret 3 ...................... <ElementMgr, "nav_createroom.window", myRect>
  [134] objcall 2 ............................... ElementMgr.newwindow("nav_createroom.window", myRect)
  [136] getparam 0 .............................. <me>
  [138] pushcons 43 ............................. <"ALERT_GENERIC">
  [140] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [142] objcall 10 .............................. me.alert("ALERT_GENERIC")
  [144] jmp [356]
  [147] peek 0
  [149] pushint8 6 .............................. <6>
  [151] eq
  [152] jmpifz [196] ............................ (case) 6:
  [155] getglobal 86 ............................ <ElementMgr>
  [157] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [159] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [161] getobjprop 196 .......................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [163] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [165] getglobal 86 ............................ <ElementMgr>
  [167] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [169] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [171] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [173] objcall 180 ............................. ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [175] getglobal 86 ............................ <ElementMgr>
  [177] pushcons 77 ............................. <"nav_createroom.window">
  [179] getlocal 0 .............................. <myRect>
  [181] pusharglistnoret 3 ...................... <ElementMgr, "nav_createroom.window", myRect>
  [183] objcall 2 ............................... ElementMgr.newwindow("nav_createroom.window", myRect)
  [185] getparam 0 .............................. <me>
  [187] pushcons 43 ............................. <"ALERT_GENERIC">
  [189] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [191] objcall 10 .............................. me.alert("ALERT_GENERIC")
  [193] jmp [356]
  [196] peek 0
  [198] pushint8 7 .............................. <7>
  [200] eq
  [201] jmpifz [245] ............................ (case) 7:
  [204] getglobal 86 ............................ <ElementMgr>
  [206] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [208] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [210] getobjprop 196 .......................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [212] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [214] getglobal 86 ............................ <ElementMgr>
  [216] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [218] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [220] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [222] objcall 180 ............................. ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [224] getglobal 86 ............................ <ElementMgr>
  [226] pushcons 77 ............................. <"nav_createroom.window">
  [228] getlocal 0 .............................. <myRect>
  [230] pusharglistnoret 3 ...................... <ElementMgr, "nav_createroom.window", myRect>
  [232] objcall 2 ............................... ElementMgr.newwindow("nav_createroom.window", myRect)
  [234] getparam 0 .............................. <me>
  [236] pushcons 83 ............................. <"ALERT_ST_NAME_LANG">
  [238] pusharglistnoret 2 ...................... <me, "ALERT_ST_NAME_LANG">
  [240] objcall 10 .............................. me.alert("ALERT_ST_NAME_LANG")
  [242] jmp [356]
  [245] peek 0
  [247] pushint8 8 .............................. <8>
  [249] eq
  [250] jmpifz [294] ............................ (case) 8:
  [253] getglobal 86 ............................ <ElementMgr>
  [255] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [257] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [259] getobjprop 196 .......................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [261] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [263] getglobal 86 ............................ <ElementMgr>
  [265] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [267] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [269] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [271] objcall 180 ............................. ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [273] getglobal 86 ............................ <ElementMgr>
  [275] pushcons 77 ............................. <"nav_createroom.window">
  [277] getlocal 0 .............................. <myRect>
  [279] pusharglistnoret 3 ...................... <ElementMgr, "nav_createroom.window", myRect>
  [281] objcall 2 ............................... ElementMgr.newwindow("nav_createroom.window", myRect)
  [283] getparam 0 .............................. <me>
  [285] pushcons 84 ............................. <"ALERT_ST_DESC_LANG">
  [287] pusharglistnoret 2 ...................... <me, "ALERT_ST_DESC_LANG">
  [289] objcall 10 .............................. me.alert("ALERT_ST_DESC_LANG")
  [291] jmp [356]
  [294] peek 0
  [296] pushint8 9 .............................. <9>
  [298] eq
  [299] jmpifz [356] ............................ (case) 9:
  [302] getglobal 86 ............................ <ElementMgr>
  [304] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [306] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [308] getobjprop 196 .......................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [310] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [312] getglobal 86 ............................ <ElementMgr>
  [314] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [316] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [318] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [320] objcall 180 ............................. ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [322] getglobal 86 ............................ <ElementMgr>
  [324] pushcons 78 ............................. <"nav_private_start.window">
  [326] getlocal 0 .............................. <myRect>
  [328] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_start.window", myRect>
  [330] objcall 2 ............................... ElementMgr.newwindow("nav_private_start.window", myRect)
  [332] getglobal 118 ........................... <oDenizenManager>
  [334] pusharglist 1 ........................... <oDenizenManager>
  [336] objcall 197 ............................. <oDenizenManager.getScreenName()>
  [338] setlocal 2 .............................. myscreenname = oDenizenManager.getScreenName()
  [340] getglobal 99 ............................ <oStudioManager>
  [342] getlocal 2 .............................. <myscreenname>
  [344] pusharglistnoret 2 ...................... <oStudioManager, myscreenname>
  [346] objcall 198 ............................. oStudioManager.getByOwnerName(myscreenname)
  [348] getparam 0 .............................. <me>
  [350] pushcons 79 ............................. <"ALERT_OVER_LIMIT">
  [352] pusharglistnoret 2 ...................... <me, "ALERT_OVER_LIMIT">
  [354] objcall 10 .............................. me.alert("ALERT_OVER_LIMIT")
  [356] pop 1 ................................... end case
  [358] ret
end

on startModifyStudio_Result me, iError, sStudioName, sStudioDescription
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 66] ............................ (case) 0:
  [  9] getparam 0 .............................. <me>
  [ 11] getchainedprop 76 ....................... <me.pOpenWindows>
  [ 13] getchainedprop 206 ...................... <me.pOpenWindows.nav_private_info>
  [ 15] getobjprop 196 .......................... <me.pOpenWindows.nav_private_info.prect>
  [ 17] setlocal 0 .............................. myRect = me.pOpenWindows.nav_private_info.prect
  [ 19] getparam 0 .............................. <me>
  [ 21] getchainedprop 76 ....................... <me.pOpenWindows>
  [ 23] getchainedprop 206 ...................... <me.pOpenWindows.nav_private_info>
  [ 25] pusharglistnoret 1 ...................... <me.pOpenWindows.nav_private_info>
  [ 27] objcall 180 ............................. me.pOpenWindows.nav_private_info.closeWindow()
  [ 29] getparam 0 .............................. <me>
  [ 31] pushcons 85 ............................. <"nav_private_modify.window">
  [ 33] getlocal 0 .............................. <myRect>
  [ 35] pusharglistnoret 3 ...................... <me, "nav_private_modify.window", myRect>
  [ 37] objcall 2 ............................... me.newwindow("nav_private_modify.window", myRect)
  [ 39] pushcons 86 ............................. <"nav_modify_studio_name">
  [ 41] pusharglist 1 ........................... <"nav_modify_studio_name">
  [ 43] extcall 101 ............................. <member("nav_modify_studio_name")>
  [ 45] getparam 2 .............................. <sStudioName>
  [ 47] setobjprop 129 .......................... member("nav_modify_studio_name").text = sStudioName
  [ 49] pushcons 87 ............................. <"nav_modify_studio_desc">
  [ 51] pusharglist 1 ........................... <"nav_modify_studio_desc">
  [ 53] extcall 101 ............................. <member("nav_modify_studio_desc")>
  [ 55] getparam 3 .............................. <sStudioDescription>
  [ 57] pusharglist 1 ........................... <sStudioDescription>
  [ 59] extcall 207 ............................. <string(sStudioDescription)>
  [ 61] setobjprop 129 .......................... member("nav_modify_studio_desc").text = string(sStudioDescription)
  [ 63] jmp [ 98]
  [ 66] peek 0
  [ 68] pushint8 1 .............................. <1>
  [ 70] nteq
  [ 71] jmpifz [ 90] ............................ (case) 1, ...
  [ 74] peek 0
  [ 76] pushint8 2 .............................. <2>
  [ 78] nteq
  [ 79] jmpifz [ 90] ............................ (case) ..., 2, ...
  [ 82] peek 0
  [ 84] pushint8 3 .............................. <3>
  [ 86] eq
  [ 87] jmpifz [ 98] ............................ (case) ..., 3:
  [ 90] getparam 0 .............................. <me>
  [ 92] pushcons 43 ............................. <"ALERT_GENERIC">
  [ 94] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [ 96] objcall 10 .............................. me.alert("ALERT_GENERIC")
  [ 98] pop 1 ................................... end case
  [100] ret
end

on deleteStudio_Result me, iError
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 42] ............................ (case) 0:
  [  9] getparam 0 .............................. <me>
  [ 11] getchainedprop 76 ....................... <me.pOpenWindows>
  [ 13] getchainedprop 209 ...................... <me.pOpenWindows.nav_private_modify_delete2>
  [ 15] getobjprop 196 .......................... <me.pOpenWindows.nav_private_modify_delete2.prect>
  [ 17] setlocal 0 .............................. myRect = me.pOpenWindows.nav_private_modify_delete2.prect
  [ 19] getparam 0 .............................. <me>
  [ 21] getchainedprop 76 ....................... <me.pOpenWindows>
  [ 23] getchainedprop 209 ...................... <me.pOpenWindows.nav_private_modify_delete2>
  [ 25] pusharglistnoret 1 ...................... <me.pOpenWindows.nav_private_modify_delete2>
  [ 27] objcall 180 ............................. me.pOpenWindows.nav_private_modify_delete2.closeWindow()
  [ 29] getparam 0 .............................. <me>
  [ 31] pushcons 88 ............................. <"nav_private_modify_delete3.window">
  [ 33] getlocal 0 .............................. <myRect>
  [ 35] pusharglistnoret 3 ...................... <me, "nav_private_modify_delete3.window", myRect>
  [ 37] objcall 2 ............................... me.newwindow("nav_private_modify_delete3.window", myRect)
  [ 39] jmp [153]
  [ 42] peek 0
  [ 44] pushint8 1 .............................. <1>
  [ 46] nteq
  [ 47] jmpifz [ 66] ............................ (case) 1, ...
  [ 50] peek 0
  [ 52] pushint8 2 .............................. <2>
  [ 54] nteq
  [ 55] jmpifz [ 66] ............................ (case) ..., 2, ...
  [ 58] peek 0
  [ 60] pushint8 3 .............................. <3>
  [ 62] eq
  [ 63] jmpifz [107] ............................ (case) ..., 3:
  [ 66] getparam 0 .............................. <me>
  [ 68] getchainedprop 76 ....................... <me.pOpenWindows>
  [ 70] getchainedprop 209 ...................... <me.pOpenWindows.nav_private_modify_delete2>
  [ 72] getobjprop 196 .......................... <me.pOpenWindows.nav_private_modify_delete2.prect>
  [ 74] setlocal 0 .............................. myRect = me.pOpenWindows.nav_private_modify_delete2.prect
  [ 76] getparam 0 .............................. <me>
  [ 78] getchainedprop 76 ....................... <me.pOpenWindows>
  [ 80] getchainedprop 209 ...................... <me.pOpenWindows.nav_private_modify_delete2>
  [ 82] pusharglistnoret 1 ...................... <me.pOpenWindows.nav_private_modify_delete2>
  [ 84] objcall 180 ............................. me.pOpenWindows.nav_private_modify_delete2.closeWindow()
  [ 86] getparam 0 .............................. <me>
  [ 88] pushcons 78 ............................. <"nav_private_start.window">
  [ 90] getlocal 0 .............................. <myRect>
  [ 92] pusharglistnoret 3 ...................... <me, "nav_private_start.window", myRect>
  [ 94] objcall 2 ............................... me.newwindow("nav_private_start.window", myRect)
  [ 96] getparam 0 .............................. <me>
  [ 98] pushcons 43 ............................. <"ALERT_GENERIC">
  [100] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [102] objcall 10 .............................. me.alert("ALERT_GENERIC")
  [104] jmp [153]
  [107] peek 0
  [109] pushint8 17 ............................. <17>
  [111] eq
  [112] jmpifz [153] ............................ (case) 17:
  [115] getparam 0 .............................. <me>
  [117] getchainedprop 76 ....................... <me.pOpenWindows>
  [119] getchainedprop 209 ...................... <me.pOpenWindows.nav_private_modify_delete2>
  [121] getobjprop 196 .......................... <me.pOpenWindows.nav_private_modify_delete2.prect>
  [123] setlocal 0 .............................. myRect = me.pOpenWindows.nav_private_modify_delete2.prect
  [125] getparam 0 .............................. <me>
  [127] getchainedprop 76 ....................... <me.pOpenWindows>
  [129] getchainedprop 209 ...................... <me.pOpenWindows.nav_private_modify_delete2>
  [131] pusharglistnoret 1 ...................... <me.pOpenWindows.nav_private_modify_delete2>
  [133] objcall 180 ............................. me.pOpenWindows.nav_private_modify_delete2.closeWindow()
  [135] getparam 0 .............................. <me>
  [137] pushcons 78 ............................. <"nav_private_start.window">
  [139] getlocal 0 .............................. <myRect>
  [141] pusharglistnoret 3 ...................... <me, "nav_private_start.window", myRect>
  [143] objcall 2 ............................... me.newwindow("nav_private_start.window", myRect)
  [145] getparam 0 .............................. <me>
  [147] pushcons 89 ............................. <"ALERT_STUDIO_NOT_EMPTY">
  [149] pusharglistnoret 2 ...................... <me, "ALERT_STUDIO_NOT_EMPTY">
  [151] objcall 10 .............................. me.alert("ALERT_STUDIO_NOT_EMPTY")
  [153] pop 1 ................................... end case
  [155] ret
end

on getDenizenByScreenName_Result me, iError, sScreenName, sLastAccess, sLastSeen, sAvatarMission, sAvatarString, bOnline, bExists, sLastSeenInName
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [426] ............................ (case) 0:
  [  9] getparam 8 .............................. <bExists>
  [ 11] not ..................................... <not bExists>
  [ 12] jmpifz [ 93] ............................ if not bExists then / else
  [ 15] getparam 0 .............................. <me>
  [ 17] getobjprop 76 ........................... <me.pOpenWindows>
  [ 19] pushsymb 210 ............................ <#nav_search_results>
  [ 21] pusharglist 2 ........................... <me.pOpenWindows, #nav_search_results>
  [ 23] extcall 89 .............................. <getaProp(me.pOpenWindows, #nav_search_results)>
  [ 25] pusharglist 1 ........................... <getaProp(me.pOpenWindows, #nav_search_results)>
  [ 27] extcall 87 .............................. <voidp(getaProp(me.pOpenWindows, #nav_search_results))>
  [ 29] pushzero ................................ <0>
  [ 30] eq ...................................... <voidp(getaProp(me.pOpenWindows, #nav_search_results)) = 0>
  [ 31] jmpifz [ 64] ............................ if voidp(getaProp(me.pOpenWindows, #nav_search_results)) = 0 then
  [ 34] getparam 0 .............................. <me>
  [ 36] getchainedprop 76 ....................... <me.pOpenWindows>
  [ 38] getchainedprop 210 ...................... <me.pOpenWindows.nav_search_results>
  [ 40] getobjprop 196 .......................... <me.pOpenWindows.nav_search_results.prect>
  [ 42] setlocal 0 .............................. myRect = me.pOpenWindows.nav_search_results.prect
  [ 44] getparam 0 .............................. <me>
  [ 46] getchainedprop 76 ....................... <me.pOpenWindows>
  [ 48] getchainedprop 210 ...................... <me.pOpenWindows.nav_search_results>
  [ 50] pusharglistnoret 1 ...................... <me.pOpenWindows.nav_search_results>
  [ 52] objcall 180 ............................. me.pOpenWindows.nav_search_results.closeWindow()
  [ 54] getparam 0 .............................. <me>
  [ 56] pushcons 90 ............................. <"nav_search_start.window">
  [ 58] getlocal 0 .............................. <myRect>
  [ 60] pusharglistnoret 3 ...................... <me, "nav_search_start.window", myRect>
  [ 62] objcall 2 ............................... me.newwindow("nav_search_start.window", myRect)
  [ 64] pushcons 91 ............................. <"nav_v-ego_search_starttext">
  [ 66] pusharglist 1 ........................... <"nav_v-ego_search_starttext">
  [ 68] extcall 101 ............................. <member("nav_v-ego_search_starttext")>
  [ 70] getglobal 178 ........................... <TextMgr>
  [ 72] pushcons 92 ............................. <"NAV_VEGOS_NOT_FOUND">
  [ 74] pusharglist 2 ........................... <TextMgr, "NAV_VEGOS_NOT_FOUND">
  [ 76] objcall 179 ............................. <TextMgr.GetRefText("NAV_VEGOS_NOT_FOUND")>
  [ 78] setobjprop 129 .......................... member("nav_v-ego_search_starttext").text = TextMgr.GetRefText("NAV_VEGOS_NOT_FOUND")
  [ 80] pushcons 93 ............................. <"nav_v-ego_desc">
  [ 82] pusharglist 1 ........................... <"nav_v-ego_desc">
  [ 84] extcall 101 ............................. <member("nav_v-ego_desc")>
  [ 86] pushcons 10 ............................. <EMPTY>
  [ 88] setobjprop 129 .......................... member("nav_v-ego_desc").text = EMPTY
  [ 90] jmp [423]
  [ 93] getparam 0 .............................. <me>
  [ 95] getobjprop 76 ........................... <me.pOpenWindows>
  [ 97] pushsymb 210 ............................ <#nav_search_results>
  [ 99] pusharglist 2 ........................... <me.pOpenWindows, #nav_search_results>
  [101] extcall 89 .............................. <getaProp(me.pOpenWindows, #nav_search_results)>
  [103] pusharglist 1 ........................... <getaProp(me.pOpenWindows, #nav_search_results)>
  [105] extcall 87 .............................. <voidp(getaProp(me.pOpenWindows, #nav_search_results))>
  [107] pushint8 1 .............................. <1>
  [109] eq ...................................... <voidp(getaProp(me.pOpenWindows, #nav_search_results)) = 1>
  [110] jmpifz [143] ............................ if voidp(getaProp(me.pOpenWindows, #nav_search_results)) = 1 then
  [113] getparam 0 .............................. <me>
  [115] getchainedprop 76 ....................... <me.pOpenWindows>
  [117] getchainedprop 211 ...................... <me.pOpenWindows.nav_search_start>
  [119] getobjprop 196 .......................... <me.pOpenWindows.nav_search_start.prect>
  [121] setlocal 0 .............................. myRect = me.pOpenWindows.nav_search_start.prect
  [123] getparam 0 .............................. <me>
  [125] getchainedprop 76 ....................... <me.pOpenWindows>
  [127] getchainedprop 211 ...................... <me.pOpenWindows.nav_search_start>
  [129] pusharglistnoret 1 ...................... <me.pOpenWindows.nav_search_start>
  [131] objcall 180 ............................. me.pOpenWindows.nav_search_start.closeWindow()
  [133] getparam 0 .............................. <me>
  [135] pushcons 94 ............................. <"nav_search_results.window">
  [137] getlocal 0 .............................. <myRect>
  [139] pusharglistnoret 3 ...................... <me, "nav_search_results.window", myRect>
  [141] objcall 2 ............................... me.newwindow("nav_search_results.window", myRect)
  [143] pushcons 95 ............................. <"nav_v-ego_search_name1">
  [145] pusharglist 1 ........................... <"nav_v-ego_search_name1">
  [147] extcall 101 ............................. <member("nav_v-ego_search_name1")>
  [149] getparam 2 .............................. <sScreenName>
  [151] setobjprop 129 .......................... member("nav_v-ego_search_name1").text = sScreenName
  [153] getparam 5 .............................. <sAvatarMission>
  [155] pusharglist 0 ........................... <>
  [157] extcall 212 ............................. <VOID>
  [159] nteq .................................... <sAvatarMission <> VOID>
  [160] jmpifz [176] ............................ if sAvatarMission <> VOID then / else
  [163] pushcons 96 ............................. <"nav_v-ego_search_motto">
  [165] pusharglist 1 ........................... <"nav_v-ego_search_motto">
  [167] extcall 101 ............................. <member("nav_v-ego_search_motto")>
  [169] getparam 5 .............................. <sAvatarMission>
  [171] setobjprop 129 .......................... member("nav_v-ego_search_motto").text = sAvatarMission
  [173] jmp [186]
  [176] pushcons 96 ............................. <"nav_v-ego_search_motto">
  [178] pusharglist 1 ........................... <"nav_v-ego_search_motto">
  [180] extcall 101 ............................. <member("nav_v-ego_search_motto")>
  [182] pushcons 10 ............................. <EMPTY>
  [184] setobjprop 129 .......................... member("nav_v-ego_search_motto").text = EMPTY
  [186] getglobal 118 ........................... <oDenizenManager>
  [188] getparam 6 .............................. <sAvatarString>
  [190] pusharglist 2 ........................... <oDenizenManager, sAvatarString>
  [192] objcall 213 ............................. <oDenizenManager.getDenizenAvatarImage(sAvatarString)>
  [194] setlocal 1 .............................. oPreviewImage = oDenizenManager.getDenizenAvatarImage(sAvatarString)
  [196] pushcons 97 ............................. <"nav_v-ego_result_dummyfigure">
  [198] pusharglist 1 ........................... <"nav_v-ego_result_dummyfigure">
  [200] extcall 101 ............................. <member("nav_v-ego_result_dummyfigure")>
  [202] getlocal 1 .............................. <oPreviewImage>
  [204] setobjprop 214 .......................... member("nav_v-ego_result_dummyfigure").image = oPreviewImage
  [206] getparam 7 .............................. <bOnline>
  [208] not ..................................... <not bOnline>
  [209] jmpifz [247] ............................ if not bOnline then / else
  [212] pushcons 98 ............................. <"nav_v-ego_search_lastlocation">
  [214] pusharglist 1 ........................... <"nav_v-ego_search_lastlocation">
  [216] extcall 101 ............................. <member("nav_v-ego_search_lastlocation")>
  [218] getglobal 178 ........................... <TextMgr>
  [220] pushcons 99 ............................. <"NAV_VEGOS_CURRENTLY">
  [222] pusharglist 2 ........................... <TextMgr, "NAV_VEGOS_CURRENTLY">
  [224] objcall 179 ............................. <TextMgr.GetRefText("NAV_VEGOS_CURRENTLY")>
  [226] setobjprop 129 .......................... member("nav_v-ego_search_lastlocation").text = TextMgr.GetRefText("NAV_VEGOS_CURRENTLY")
  [228] pushcons 100 ............................ <"nav_v-ego_search_Location_name">
  [230] pusharglist 1 ........................... <"nav_v-ego_search_Location_name">
  [232] extcall 101 ............................. <member("nav_v-ego_search_Location_name")>
  [234] getglobal 178 ........................... <TextMgr>
  [236] pushcons 101 ............................ <"NAV_VEGOS_OFFLINE">
  [238] pusharglist 2 ........................... <TextMgr, "NAV_VEGOS_OFFLINE">
  [240] objcall 179 ............................. <TextMgr.GetRefText("NAV_VEGOS_OFFLINE")>
  [242] setobjprop 129 .......................... member("nav_v-ego_search_Location_name").text = TextMgr.GetRefText("NAV_VEGOS_OFFLINE")
  [244] jmp [356]
  [247] pushcons 98 ............................. <"nav_v-ego_search_lastlocation">
  [249] pusharglist 1 ........................... <"nav_v-ego_search_lastlocation">
  [251] extcall 101 ............................. <member("nav_v-ego_search_lastlocation")>
  [253] getglobal 178 ........................... <TextMgr>
  [255] pushcons 102 ............................ <"NAV_VEGOS_LAST_SEEN">
  [257] pusharglist 2 ........................... <TextMgr, "NAV_VEGOS_LAST_SEEN">
  [259] objcall 179 ............................. <TextMgr.GetRefText("NAV_VEGOS_LAST_SEEN")>
  [261] setobjprop 129 .......................... member("nav_v-ego_search_lastlocation").text = TextMgr.GetRefText("NAV_VEGOS_LAST_SEEN")
  [263] getparam 4 .............................. <sLastSeen>
  [265] pusharglist 1 ........................... <sLastSeen>
  [267] extcall 87 .............................. <voidp(sLastSeen)>
  [269] getparam 4 .............................. <sLastSeen>
  [271] pushcons 10 ............................. <EMPTY>
  [273] eq ...................................... <sLastSeen = EMPTY>
  [274] or ...................................... <voidp(sLastSeen) or (sLastSeen = EMPTY)>
  [275] getparam 4 .............................. <sLastSeen>
  [277] pushcons 103 ............................ <"$LOBBY$">
  [279] eq ...................................... <sLastSeen = "$LOBBY$">
  [280] or ...................................... <voidp(sLastSeen) or (sLastSeen = EMPTY) or (sLastSeen = "$LOBBY$")>
  [281] jmpifz [297] ............................ if voidp(sLastSeen) or (sLastSeen = EMPTY) or (sLastSeen = "$LOBBY$") then / else
  [284] getglobal 178 ........................... <TextMgr>
  [286] pushcons 104 ............................ <"NAV_VEGOS_LOBBY">
  [288] pusharglist 2 ........................... <TextMgr, "NAV_VEGOS_LOBBY">
  [290] objcall 179 ............................. <TextMgr.GetRefText("NAV_VEGOS_LOBBY")>
  [292] setlocal 2 .............................. myloc = TextMgr.GetRefText("NAV_VEGOS_LOBBY")
  [294] jmp [346]
  [297] getparam 0 .............................. <me>
  [299] pusharglist 1 ........................... <me>
  [301] objcall 35 .............................. <me.getMessengerObject()>
  [303] getparam 2 .............................. <sScreenName>
  [305] pusharglist 2 ........................... <me.getMessengerObject(), sScreenName>
  [307] objcall 215 ............................. <me.getMessengerObject().isFriend(sScreenName)>
  [309] setlocal 3 .............................. bIsFriend = me.getMessengerObject().isFriend(sScreenName)
  [311] getparam 4 .............................. <sLastSeen>
  [313] pushcons 105 ............................ <"$SYSTEM$">
  [315] contains0str ............................ <sLastSeen starts "$SYSTEM$">
  [316] setlocal 4 .............................. bIsPublic = sLastSeen starts "$SYSTEM$"
  [318] getlocal 3 .............................. <bIsFriend>
  [320] jmpifz [330] ............................ if bIsFriend then / else
  [323] getparam 9 .............................. <sLastSeenInName>
  [325] setlocal 2 .............................. myloc = sLastSeenInName
  [327] jmp [346]
  [330] getlocal 4 .............................. <bIsPublic>
  [332] jmpifz [342] ............................ if bIsPublic then / else
  [335] pushcons 106 ............................ <"Public Studio">
  [337] setlocal 2 .............................. myloc = "Public Studio"
  [339] jmp [346]
  [342] pushcons 107 ............................ <"Private Studio">
  [344] setlocal 2 .............................. myloc = "Private Studio"
  [346] pushcons 100 ............................ <"nav_v-ego_search_Location_name">
  [348] pusharglist 1 ........................... <"nav_v-ego_search_Location_name">
  [350] extcall 101 ............................. <member("nav_v-ego_search_Location_name")>
  [352] getlocal 2 .............................. <myloc>
  [354] setobjprop 129 .......................... member("nav_v-ego_search_Location_name").text = myloc
  [356] getparam 3 .............................. <sLastAccess>
  [358] pusharglist 0 ........................... <>
  [360] extcall 212 ............................. <VOID>
  [362] nteq .................................... <sLastAccess <> VOID>
  [363] jmpifz [423] ............................ if sLastAccess <> VOID then
  [366] pushcons 108 ............................ <"nav_v-ego_search_name2">
  [368] pusharglist 1 ........................... <"nav_v-ego_search_name2">
  [370] extcall 101 ............................. <member("nav_v-ego_search_name2")>
  [372] getglobal 178 ........................... <TextMgr>
  [374] pushcons 109 ............................ <"NAV_VEGOS_LAST_ACCESS">
  [376] pusharglist 2 ........................... <TextMgr, "NAV_VEGOS_LAST_ACCESS">
  [378] objcall 179 ............................. <TextMgr.GetRefText("NAV_VEGOS_LAST_ACCESS")>
  [380] setobjprop 129 .......................... member("nav_v-ego_search_name2").text = TextMgr.GetRefText("NAV_VEGOS_LAST_ACCESS")
  [382] pushcons 31 ............................. <" ">
  [384] setmovieprop 135 ........................ the itemDelimiter = " "
  [386] getglobal 178 ........................... <TextMgr>
  [388] getparam 3 .............................. <sLastAccess>
  [390] pusharglist 2 ........................... <TextMgr, sLastAccess>
  [392] objcall 216 ............................. <TextMgr.getDate(sLastAccess)>
  [394] setlocal 5 .............................. NewDate = TextMgr.getDate(sLastAccess)
  [396] getglobal 178 ........................... <TextMgr>
  [398] getparam 3 .............................. <sLastAccess>
  [400] pusharglist 2 ........................... <TextMgr, sLastAccess>
  [402] objcall 217 ............................. <TextMgr.getTime(sLastAccess)>
  [404] setlocal 6 .............................. mytime = TextMgr.getTime(sLastAccess)
  [406] getlocal 5 .............................. <NewDate>
  [408] getlocal 6 .............................. <mytime>
  [410] joinpadstr .............................. <NewDate && mytime>
  [411] setlocal 7 .............................. outputdate = NewDate && mytime
  [413] pushcons 110 ............................ <"nav_v-ego_search_name3">
  [415] pusharglist 1 ........................... <"nav_v-ego_search_name3">
  [417] extcall 101 ............................. <member("nav_v-ego_search_name3")>
  [419] getlocal 7 .............................. <outputdate>
  [421] setobjprop 129 .......................... member("nav_v-ego_search_name3").text = outputdate
  [423] jmp [595]
  [426] peek 0
  [428] pushint8 1 .............................. <1>
  [430] eq
  [431] jmpifz [512] ............................ (case) 1:
  [434] getparam 0 .............................. <me>
  [436] getobjprop 76 ........................... <me.pOpenWindows>
  [438] pushsymb 210 ............................ <#nav_search_results>
  [440] pusharglist 2 ........................... <me.pOpenWindows, #nav_search_results>
  [442] extcall 89 .............................. <getaProp(me.pOpenWindows, #nav_search_results)>
  [444] pusharglist 1 ........................... <getaProp(me.pOpenWindows, #nav_search_results)>
  [446] extcall 87 .............................. <voidp(getaProp(me.pOpenWindows, #nav_search_results))>
  [448] pushzero ................................ <0>
  [449] eq ...................................... <voidp(getaProp(me.pOpenWindows, #nav_search_results)) = 0>
  [450] jmpifz [483] ............................ if voidp(getaProp(me.pOpenWindows, #nav_search_results)) = 0 then
  [453] getparam 0 .............................. <me>
  [455] getchainedprop 76 ....................... <me.pOpenWindows>
  [457] getchainedprop 210 ...................... <me.pOpenWindows.nav_search_results>
  [459] getobjprop 196 .......................... <me.pOpenWindows.nav_search_results.prect>
  [461] setlocal 0 .............................. myRect = me.pOpenWindows.nav_search_results.prect
  [463] getparam 0 .............................. <me>
  [465] getchainedprop 76 ....................... <me.pOpenWindows>
  [467] getchainedprop 210 ...................... <me.pOpenWindows.nav_search_results>
  [469] pusharglistnoret 1 ...................... <me.pOpenWindows.nav_search_results>
  [471] objcall 180 ............................. me.pOpenWindows.nav_search_results.closeWindow()
  [473] getparam 0 .............................. <me>
  [475] pushcons 90 ............................. <"nav_search_start.window">
  [477] getlocal 0 .............................. <myRect>
  [479] pusharglistnoret 3 ...................... <me, "nav_search_start.window", myRect>
  [481] objcall 2 ............................... me.newwindow("nav_search_start.window", myRect)
  [483] pushcons 91 ............................. <"nav_v-ego_search_starttext">
  [485] pusharglist 1 ........................... <"nav_v-ego_search_starttext">
  [487] extcall 101 ............................. <member("nav_v-ego_search_starttext")>
  [489] getglobal 178 ........................... <TextMgr>
  [491] pushcons 92 ............................. <"NAV_VEGOS_NOT_FOUND">
  [493] pusharglist 2 ........................... <TextMgr, "NAV_VEGOS_NOT_FOUND">
  [495] objcall 179 ............................. <TextMgr.GetRefText("NAV_VEGOS_NOT_FOUND")>
  [497] setobjprop 129 .......................... member("nav_v-ego_search_starttext").text = TextMgr.GetRefText("NAV_VEGOS_NOT_FOUND")
  [499] pushcons 93 ............................. <"nav_v-ego_desc">
  [501] pusharglist 1 ........................... <"nav_v-ego_desc">
  [503] extcall 101 ............................. <member("nav_v-ego_desc")>
  [505] pushcons 10 ............................. <EMPTY>
  [507] setobjprop 129 .......................... member("nav_v-ego_desc").text = EMPTY
  [509] jmp [595]
  [512] peek 0
  [514] pushint8 2 .............................. <2>
  [516] eq
  [517] jmpifz [595] ............................ (case) 2:
  [520] getparam 0 .............................. <me>
  [522] getobjprop 76 ........................... <me.pOpenWindows>
  [524] pushsymb 210 ............................ <#nav_search_results>
  [526] pusharglist 2 ........................... <me.pOpenWindows, #nav_search_results>
  [528] extcall 89 .............................. <getaProp(me.pOpenWindows, #nav_search_results)>
  [530] pusharglist 1 ........................... <getaProp(me.pOpenWindows, #nav_search_results)>
  [532] extcall 87 .............................. <voidp(getaProp(me.pOpenWindows, #nav_search_results))>
  [534] pushzero ................................ <0>
  [535] eq ...................................... <voidp(getaProp(me.pOpenWindows, #nav_search_results)) = 0>
  [536] jmpifz [569] ............................ if voidp(getaProp(me.pOpenWindows, #nav_search_results)) = 0 then
  [539] getparam 0 .............................. <me>
  [541] getchainedprop 76 ....................... <me.pOpenWindows>
  [543] getchainedprop 210 ...................... <me.pOpenWindows.nav_search_results>
  [545] getobjprop 196 .......................... <me.pOpenWindows.nav_search_results.prect>
  [547] setlocal 0 .............................. myRect = me.pOpenWindows.nav_search_results.prect
  [549] getparam 0 .............................. <me>
  [551] getchainedprop 76 ....................... <me.pOpenWindows>
  [553] getchainedprop 210 ...................... <me.pOpenWindows.nav_search_results>
  [555] pusharglistnoret 1 ...................... <me.pOpenWindows.nav_search_results>
  [557] objcall 180 ............................. me.pOpenWindows.nav_search_results.closeWindow()
  [559] getparam 0 .............................. <me>
  [561] pushcons 90 ............................. <"nav_search_start.window">
  [563] getlocal 0 .............................. <myRect>
  [565] pusharglistnoret 3 ...................... <me, "nav_search_start.window", myRect>
  [567] objcall 2 ............................... me.newwindow("nav_search_start.window", myRect)
  [569] pushcons 91 ............................. <"nav_v-ego_search_starttext">
  [571] pusharglist 1 ........................... <"nav_v-ego_search_starttext">
  [573] extcall 101 ............................. <member("nav_v-ego_search_starttext")>
  [575] getglobal 178 ........................... <TextMgr>
  [577] pushcons 92 ............................. <"NAV_VEGOS_NOT_FOUND">
  [579] pusharglist 2 ........................... <TextMgr, "NAV_VEGOS_NOT_FOUND">
  [581] objcall 179 ............................. <TextMgr.GetRefText("NAV_VEGOS_NOT_FOUND")>
  [583] setobjprop 129 .......................... member("nav_v-ego_search_starttext").text = TextMgr.GetRefText("NAV_VEGOS_NOT_FOUND")
  [585] pushcons 93 ............................. <"nav_v-ego_desc">
  [587] pusharglist 1 ........................... <"nav_v-ego_desc">
  [589] extcall 101 ............................. <member("nav_v-ego_desc")>
  [591] pushcons 10 ............................. <EMPTY>
  [593] setobjprop 129 .......................... member("nav_v-ego_desc").text = EMPTY
  [595] pop 1 ................................... end case
  [597] ret
end

on modifyStudio_Result me, iError, sStudioName
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 72] ............................ (case) 0:
  [  9] getglobal 86 ............................ <ElementMgr>
  [ 11] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [ 13] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 15] getobjprop 196 .......................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [ 17] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [ 19] getglobal 86 ............................ <ElementMgr>
  [ 21] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [ 23] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 25] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 27] objcall 180 ............................. ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [ 29] getglobal 86 ............................ <ElementMgr>
  [ 31] pushcons 78 ............................. <"nav_private_start.window">
  [ 33] getlocal 0 .............................. <myRect>
  [ 35] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_start.window", myRect>
  [ 37] objcall 2 ............................... ElementMgr.newwindow("nav_private_start.window", myRect)
  [ 39] pushcons 8 .............................. <"userlist">
  [ 41] pusharglist 1 ........................... <"userlist">
  [ 43] extcall 101 ............................. <member("userlist")>
  [ 45] pushcons 9 .............................. <"blocked">
  [ 47] setobjprop 103 .......................... member("userlist").comments = "blocked"
  [ 49] getglobal 86 ............................ <ElementMgr>
  [ 51] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [ 53] getchainedprop 233 ...................... <ElementMgr.pOpenWindows.nav_private_start>
  [ 55] getchainedprop 96 ....................... <ElementMgr.pOpenWindows.nav_private_start.pScrollingLists>
  [ 57] getchainedprop 105 ...................... <ElementMgr.pOpenWindows.nav_private_start.pScrollingLists.userList>
  [ 59] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_private_start.pScrollingLists.userList>
  [ 61] objcall 98 .............................. ElementMgr.pOpenWindows.nav_private_start.pScrollingLists.userList.displayloading()
  [ 63] getglobal 99 ............................ <oStudioManager>
  [ 65] pusharglistnoret 1 ...................... <oStudioManager>
  [ 67] objcall 112 ............................. oStudioManager.getAllPrivateStudios()
  [ 69] jmp [330]
  [ 72] peek 0
  [ 74] pushint8 1 .............................. <1>
  [ 76] eq
  [ 77] jmpifz [121] ............................ (case) 1:
  [ 80] getglobal 86 ............................ <ElementMgr>
  [ 82] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [ 84] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 86] getobjprop 196 .......................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [ 88] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [ 90] getglobal 86 ............................ <ElementMgr>
  [ 92] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [ 94] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 96] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 98] objcall 180 ............................. ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [100] getglobal 86 ............................ <ElementMgr>
  [102] pushcons 85 ............................. <"nav_private_modify.window">
  [104] getlocal 0 .............................. <myRect>
  [106] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_modify.window", myRect>
  [108] objcall 2 ............................... ElementMgr.newwindow("nav_private_modify.window", myRect)
  [110] getparam 0 .............................. <me>
  [112] pushcons 43 ............................. <"ALERT_GENERIC">
  [114] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [116] objcall 10 .............................. me.alert("ALERT_GENERIC")
  [118] jmp [330]
  [121] peek 0
  [123] pushint8 6 .............................. <6>
  [125] eq
  [126] jmpifz [170] ............................ (case) 6:
  [129] getglobal 86 ............................ <ElementMgr>
  [131] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [133] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [135] getobjprop 196 .......................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [137] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [139] getglobal 86 ............................ <ElementMgr>
  [141] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [143] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [145] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [147] objcall 180 ............................. ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [149] getglobal 86 ............................ <ElementMgr>
  [151] pushcons 85 ............................. <"nav_private_modify.window">
  [153] getlocal 0 .............................. <myRect>
  [155] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_modify.window", myRect>
  [157] objcall 2 ............................... ElementMgr.newwindow("nav_private_modify.window", myRect)
  [159] getparam 0 .............................. <me>
  [161] pushcons 43 ............................. <"ALERT_GENERIC">
  [163] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [165] objcall 10 .............................. me.alert("ALERT_GENERIC")
  [167] jmp [330]
  [170] peek 0
  [172] pushint8 7 .............................. <7>
  [174] eq
  [175] jmpifz [219] ............................ (case) 7:
  [178] getglobal 86 ............................ <ElementMgr>
  [180] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [182] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [184] getobjprop 196 .......................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [186] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [188] getglobal 86 ............................ <ElementMgr>
  [190] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [192] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [194] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [196] objcall 180 ............................. ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [198] getglobal 86 ............................ <ElementMgr>
  [200] pushcons 85 ............................. <"nav_private_modify.window">
  [202] getlocal 0 .............................. <myRect>
  [204] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_modify.window", myRect>
  [206] objcall 2 ............................... ElementMgr.newwindow("nav_private_modify.window", myRect)
  [208] getparam 0 .............................. <me>
  [210] pushcons 83 ............................. <"ALERT_ST_NAME_LANG">
  [212] pusharglistnoret 2 ...................... <me, "ALERT_ST_NAME_LANG">
  [214] objcall 10 .............................. me.alert("ALERT_ST_NAME_LANG")
  [216] jmp [330]
  [219] peek 0
  [221] pushint8 8 .............................. <8>
  [223] eq
  [224] jmpifz [268] ............................ (case) 8:
  [227] getglobal 86 ............................ <ElementMgr>
  [229] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [231] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [233] getobjprop 196 .......................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [235] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [237] getglobal 86 ............................ <ElementMgr>
  [239] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [241] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [243] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [245] objcall 180 ............................. ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [247] getglobal 86 ............................ <ElementMgr>
  [249] pushcons 85 ............................. <"nav_private_modify.window">
  [251] getlocal 0 .............................. <myRect>
  [253] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_modify.window", myRect>
  [255] objcall 2 ............................... ElementMgr.newwindow("nav_private_modify.window", myRect)
  [257] getparam 0 .............................. <me>
  [259] pushcons 84 ............................. <"ALERT_ST_DESC_LANG">
  [261] pusharglistnoret 2 ...................... <me, "ALERT_ST_DESC_LANG">
  [263] objcall 10 .............................. me.alert("ALERT_ST_DESC_LANG")
  [265] jmp [330]
  [268] peek 0
  [270] pushint8 9 .............................. <9>
  [272] eq
  [273] jmpifz [330] ............................ (case) 9:
  [276] getglobal 86 ............................ <ElementMgr>
  [278] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [280] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [282] getobjprop 196 .......................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [284] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [286] getglobal 86 ............................ <ElementMgr>
  [288] getchainedprop 76 ....................... <ElementMgr.pOpenWindows>
  [290] getchainedprop 195 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [292] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [294] objcall 180 ............................. ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [296] getglobal 86 ............................ <ElementMgr>
  [298] pushcons 85 ............................. <"nav_private_modify.window">
  [300] getlocal 0 .............................. <myRect>
  [302] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_modify.window", myRect>
  [304] objcall 2 ............................... ElementMgr.newwindow("nav_private_modify.window", myRect)
  [306] getglobal 118 ........................... <oDenizenManager>
  [308] pusharglist 1 ........................... <oDenizenManager>
  [310] objcall 197 ............................. <oDenizenManager.getScreenName()>
  [312] setlocal 1 .............................. myscreenname = oDenizenManager.getScreenName()
  [314] getglobal 99 ............................ <oStudioManager>
  [316] getlocal 1 .............................. <myscreenname>
  [318] pusharglistnoret 2 ...................... <oStudioManager, myscreenname>
  [320] objcall 198 ............................. oStudioManager.getByOwnerName(myscreenname)
  [322] getparam 0 .............................. <me>
  [324] pushcons 79 ............................. <"ALERT_OVER_LIMIT">
  [326] pusharglistnoret 2 ...................... <me, "ALERT_OVER_LIMIT">
  [328] objcall 10 .............................. me.alert("ALERT_OVER_LIMIT")
  [330] pop 1 ................................... end case
  [332] ret
end

on loginUser_Result me, iError, iState, iStatus, bNewUser
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 111 ............................ <"loginUser_Result()">
  [  4] pushcons 112 ............................ <"iError:">
  [  6] joinpadstr .............................. <"loginUser_Result()" && "iError:">
  [  7] getparam 1 .............................. <iError>
  [  9] joinpadstr .............................. <"loginUser_Result()" && "iError:" && iError>
  [ 10] pushcons 113 ............................ <"iState:">
  [ 12] joinpadstr .............................. <"loginUser_Result()" && "iError:" && iError && "iState:">
  [ 13] getparam 2 .............................. <iState>
  [ 15] joinpadstr .............................. <"loginUser_Result()" && "iError:" && iError && "iState:" && iState>
  [ 16] pushcons 114 ............................ <"iStatus:">
  [ 18] joinpadstr .............................. <"loginUser_Result()" && "iError:" && iError && "iState:" && iState && "iStatus:">
  [ 19] getparam 3 .............................. <iStatus>
  [ 21] joinpadstr .............................. <"loginUser_Result()" && "iError:" && iError && "iState:" && iState && "iStatus:" && iStatus>
  [ 22] pushcons 115 ............................ <"bNewUser:">
  [ 24] joinpadstr .............................. <"loginUser_Result()" && "iError:" && iError && "iState:" && iState && "iStatus:" && iStatus && "bNewUser:">
  [ 25] getparam 4 .............................. <bNewUser>
  [ 27] joinpadstr .............................. <"loginUser_Result()" && "iError:" && iError && "iState:" && iState && "iStatus:" && iStatus && "bNewUser:" && bNewUser>
  [ 28] pusharglistnoret 2 ...................... <me, "loginUser_Result()" && "iError:" && iError && "iState:" && iState && "iStatus:" && iStatus && "bNewUser:" && bNewUser>
  [ 30] objcall 1 ............................... me.debug("loginUser_Result()" && "iError:" && iError && "iState:" && iState && "iStatus:" && iStatus && "bNewUser:" && bNewUser)
  [ 32] pushint8 2 .............................. <2>
  [ 34] setlocal 0
  [ 36] getlocal 0
  [ 38] pushint8 6 .............................. <6>
  [ 40] lteq
  [ 41] jmpifz [ 82] ............................ repeat with n = 2 to 6
  [ 44] getlocal 0 .............................. <n>
  [ 46] pusharglist 1 ........................... <n>
  [ 48] extcall 177 ............................. <sprite(n)>
  [ 50] pusharglist 0 ........................... <[]>
  [ 52] pushlist ................................ <[]>
  [ 53] setobjprop 191 .......................... sprite(n).scriptInstanceList = []
  [ 55] getlocal 0 .............................. <n>
  [ 57] pusharglist 1 ........................... <n>
  [ 59] extcall 177 ............................. <sprite(n)>
  [ 61] pushint8 1 .............................. <1>
  [ 63] inv ..................................... <-1>
  [ 64] setobjprop 102 .......................... sprite(n).memberNum = -1
  [ 66] getlocal 0 .............................. <n>
  [ 68] pushzero ................................ <0>
  [ 69] pusharglistnoret 2 ...................... <n, 0>
  [ 71] extcall 234 ............................. puppetSprite(n, 0)
  [ 73] pushint8 1
  [ 75] getlocal 0
  [ 77] add
  [ 78] setlocal 0
  [ 80] endrepeat [ 36]
  [ 82] getparam 1 .............................. <iError>
  [ 84] peek 0 .................................. case iError of
  [ 86] pushzero ................................ <0>
  [ 87] eq
  [ 88] jmpifz [181] ............................ (case) 0:
  [ 91] getparam 3 .............................. <iStatus>
  [ 93] peek 0 .................................. case iStatus of
  [ 95] pushint8 1 .............................. <1>
  [ 97] eq
  [ 98] jmpifz [160] ............................ (case) 1:
  [101] getparam 2 .............................. <iState>
  [103] peek 0 .................................. case iState of
  [105] pushint8 1 .............................. <1>
  [107] eq
  [108] jmpifz [122] ............................ (case) 1:
  [111] getparam 0 .............................. <me>
  [113] pushcons 49 ............................. <"ALERT_STATE_CLOSED">
  [115] pusharglistnoret 2 ...................... <me, "ALERT_STATE_CLOSED">
  [117] objcall 10 .............................. me.alert("ALERT_STATE_CLOSED")
  [119] jmp [155]
  [122] peek 0
  [124] pushint8 2 .............................. <2>
  [126] eq
  [127] jmpifz [139] ............................ (case) 2:
  [130] pushcons 116 ............................ <"LoadCasts2">
  [132] pusharglistnoret 1 ...................... <"LoadCasts2">
  [134] extcall 235 ............................. go("LoadCasts2")
  [136] jmp [155]
  [139] peek 0
  [141] pushint8 3 .............................. <3>
  [143] eq
  [144] jmpifz [155] ............................ (case) 3:
  [147] getparam 0 .............................. <me>
  [149] pushcons 51 ............................. <"ALERT_STATE_FULL">
  [151] pusharglistnoret 2 ...................... <me, "ALERT_STATE_FULL">
  [153] objcall 10 .............................. me.alert("ALERT_STATE_FULL")
  [155] pop 1 ................................... end case
  [157] jmp [176]
  [160] peek 0
  [162] pushint8 2 .............................. <2>
  [164] eq
  [165] jmpifz [176] ............................ (case) 2:
  [168] getparam 0 .............................. <me>
  [170] pushcons 47 ............................. <"ALERT_BANNED">
  [172] pusharglistnoret 2 ...................... <me, "ALERT_BANNED">
  [174] objcall 10 .............................. me.alert("ALERT_BANNED")
  [176] pop 1 ................................... end case
  [178] jmp [216]
  [181] peek 0
  [183] pushint8 1 .............................. <1>
  [185] eq
  [186] jmpifz [200] ............................ (case) 1:
  [189] getparam 0 .............................. <me>
  [191] pushcons 43 ............................. <"ALERT_GENERIC">
  [193] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [195] objcall 10 .............................. me.alert("ALERT_GENERIC")
  [197] jmp [216]
  [200] peek 0
  [202] pushint8 2 .............................. <2>
  [204] eq
  [205] jmpifz [216] ............................ (case) 2:
  [208] getparam 0 .............................. <me>
  [210] pushcons 69 ............................. <"ALERT_INVALID_SCREEN_NAME">
  [212] pusharglistnoret 2 ...................... <me, "ALERT_INVALID_SCREEN_NAME">
  [214] objcall 10 .............................. me.alert("ALERT_INVALID_SCREEN_NAME")
  [216] pop 1 ................................... end case
  [218] ret
end

on loginModerator_Result me, iError
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 117 ............................ <"loginModerator_Result() ">
  [  4] getparam 1 .............................. <iError>
  [  6] joinstr ................................. <"loginModerator_Result() " & iError>
  [  7] pushint8 1 .............................. <1>
  [  9] pusharglistnoret 3 ...................... <me, "loginModerator_Result() " & iError, 1>
  [ 11] objcall 1 ............................... me.debug("loginModerator_Result() " & iError, 1)
  [ 13] ret
end

on connectionFailed me, iReasonId
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 118 ............................ <"connectionfailed():iReasonID">
  [  4] getparam 1 .............................. <iReasonId>
  [  6] joinpadstr .............................. <"connectionfailed():iReasonID" && iReasonId>
  [  7] pushint8 1 .............................. <1>
  [  9] pusharglistnoret 3 ...................... <me, "connectionfailed():iReasonID" && iReasonId, 1>
  [ 11] objcall 1 ............................... me.debug("connectionfailed():iReasonID" && iReasonId, 1)
  [ 13] getparam 1 .............................. <iReasonId>
  [ 15] peek 0 .................................. case iReasonId of
  [ 17] pushint8 5 .............................. <5>
  [ 19] eq
  [ 20] jmpifz [ 34] ............................ (case) 5:
  [ 23] getparam 0 .............................. <me>
  [ 25] pushcons 53 ............................. <"ALERT_NO_CONNECTION">
  [ 27] pusharglistnoret 2 ...................... <me, "ALERT_NO_CONNECTION">
  [ 29] objcall 10 .............................. me.alert("ALERT_NO_CONNECTION")
  [ 31] jmp [ 42] ............................... (case) otherwise:
  [ 34] getparam 0 .............................. <me>
  [ 36] pushcons 43 ............................. <"ALERT_GENERIC">
  [ 38] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [ 40] objcall 10 .............................. me.alert("ALERT_GENERIC")
  [ 42] pop 1 ................................... end case
  [ 44] ret
end

on loginFailed me, iReasonId
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 119 ............................ <"loginFailed():iReasonID">
  [  4] getparam 1 .............................. <iReasonId>
  [  6] joinpadstr .............................. <"loginFailed():iReasonID" && iReasonId>
  [  7] pushint8 1 .............................. <1>
  [  9] pusharglistnoret 3 ...................... <me, "loginFailed():iReasonID" && iReasonId, 1>
  [ 11] objcall 1 ............................... me.debug("loginFailed():iReasonID" && iReasonId, 1)
  [ 13] getparam 1 .............................. <iReasonId>
  [ 15] peek 0 .................................. case iReasonId of
  [ 17] pushint16 8956 .......................... <8956>
  [ 20] eq
  [ 21] jmpifz [ 35] ............................ (case) 8956:
  [ 24] getparam 0 .............................. <me>
  [ 26] pushcons 57 ............................. <"ALERT_USER_NOT_FOUND">
  [ 28] pusharglistnoret 2 ...................... <me, "ALERT_USER_NOT_FOUND">
  [ 30] objcall 10 .............................. me.alert("ALERT_USER_NOT_FOUND")
  [ 32] jmp [ 83]
  [ 35] peek 0
  [ 37] pushint16 8957 .......................... <8957>
  [ 40] eq
  [ 41] jmpifz [ 55] ............................ (case) 8957:
  [ 44] getparam 0 .............................. <me>
  [ 46] pushcons 59 ............................. <"ALERT_DUPLICATE_LOGIN">
  [ 48] pusharglistnoret 2 ...................... <me, "ALERT_DUPLICATE_LOGIN">
  [ 50] objcall 10 .............................. me.alert("ALERT_DUPLICATE_LOGIN")
  [ 52] jmp [ 83]
  [ 55] peek 0
  [ 57] pushint16 8950 .......................... <8950>
  [ 60] eq
  [ 61] jmpifz [ 75] ............................ (case) 8950:
  [ 64] getparam 0 .............................. <me>
  [ 66] pushcons 51 ............................. <"ALERT_STATE_FULL">
  [ 68] pusharglistnoret 2 ...................... <me, "ALERT_STATE_FULL">
  [ 70] objcall 10 .............................. me.alert("ALERT_STATE_FULL")
  [ 72] jmp [ 83] ............................... (case) otherwise:
  [ 75] getparam 0 .............................. <me>
  [ 77] pushcons 43 ............................. <"ALERT_GENERIC">
  [ 79] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [ 81] objcall 10 .............................. me.alert("ALERT_GENERIC")
  [ 83] pop 1 ................................... end case
  [ 85] ret
end

on lostConnection me
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 55 ............................. <"ALERT_DROPPED_CONNECTION">
  [  4] pusharglistnoret 2 ...................... <me, "ALERT_DROPPED_CONNECTION">
  [  6] objcall 10 .............................. me.alert("ALERT_DROPPED_CONNECTION")
  [  8] ret
end

on roomEnterFailed me, sRoomId, iReasonId
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 120 ............................ <"roomEnterFailed():sRoomID">
  [  4] getparam 1 .............................. <sRoomId>
  [  6] joinpadstr .............................. <"roomEnterFailed():sRoomID" && sRoomId>
  [  7] pushcons 121 ............................ <"iReasonID:">
  [  9] joinpadstr .............................. <"roomEnterFailed():sRoomID" && sRoomId && "iReasonID:">
  [ 10] getparam 2 .............................. <iReasonId>
  [ 12] joinpadstr .............................. <"roomEnterFailed():sRoomID" && sRoomId && "iReasonID:" && iReasonId>
  [ 13] pushint8 1 .............................. <1>
  [ 15] pusharglistnoret 3 ...................... <me, "roomEnterFailed():sRoomID" && sRoomId && "iReasonID:" && iReasonId, 1>
  [ 17] objcall 1 ............................... me.debug("roomEnterFailed():sRoomID" && sRoomId && "iReasonID:" && iReasonId, 1)
  [ 19] getparam 2 .............................. <iReasonId>
  [ 21] peek 0 .................................. case iReasonId of
  [ 23] pushint16 9000 .......................... <9000>
  [ 26] eq
  [ 27] jmpifz [ 41] ............................ (case) 9000:
  [ 30] getparam 0 .............................. <me>
  [ 32] pushcons 61 ............................. <"ALERT_ROOM_NOT_EXIST">
  [ 34] pusharglistnoret 2 ...................... <me, "ALERT_ROOM_NOT_EXIST">
  [ 36] objcall 10 .............................. me.alert("ALERT_ROOM_NOT_EXIST")
  [ 38] jmp [ 73]
  [ 41] peek 0
  [ 43] pushint16 9008 .......................... <9008>
  [ 46] eq
  [ 47] jmpifz [ 65] ............................ (case) 9008:
  [ 50] pusharglistnoret 0 ...................... <>
  [ 52] extcall 240 ............................. gotoEntry()
  [ 54] getparam 0 .............................. <me>
  [ 56] pushcons 45 ............................. <"ALERT_FULL">
  [ 58] pusharglistnoret 2 ...................... <me, "ALERT_FULL">
  [ 60] objcall 10 .............................. me.alert("ALERT_FULL")
  [ 62] jmp [ 73] ............................... (case) otherwise:
  [ 65] getparam 0 .............................. <me>
  [ 67] pushcons 43 ............................. <"ALERT_GENERIC">
  [ 69] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [ 71] objcall 10 .............................. me.alert("ALERT_GENERIC")
  [ 73] pop 1 ................................... end case
  [ 75] ret
end

on bringAlertToFront me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 76 ........................... <me.pOpenWindows>
  [  4] pusharglist 1 ........................... <me.pOpenWindows>
  [  6] extcall 104 ............................. <count(me.pOpenWindows)>
  [  8] setlocal 0
  [ 10] getlocal 0
  [ 12] pushint8 1 .............................. <1>
  [ 14] gteq
  [ 15] jmpifz [ 59] ............................ repeat with n = count(me.pOpenWindows) down to 1
  [ 18] getparam 0 .............................. <me>
  [ 20] pushsymb 76 ............................. <#pOpenWindows>
  [ 22] getlocal 0 .............................. <n>
  [ 24] pusharglist 3 ........................... <me, #pOpenWindows, n>
  [ 26] objcall 108 ............................. <me.pOpenWindows[n]>
  [ 28] setlocal 1 .............................. _oWindow = me.pOpenWindows[n]
  [ 30] getlocal 1 .............................. <_oWindow>
  [ 32] getobjprop 241 .......................... <_oWindow.pname>
  [ 34] setlocal 2 .............................. _sWindowName = _oWindow.pname
  [ 36] getlocal 2 .............................. <_sWindowName>
  [ 38] pushcons 122 ............................ <"sanfo_general_alert">
  [ 40] contains0str ............................ <_sWindowName starts "sanfo_general_alert">
  [ 41] jmpifz [ 50] ............................ if _sWindowName starts "sanfo_general_alert" then
  [ 44] getlocal 1 .............................. <_oWindow>
  [ 46] pusharglistnoret 1 ...................... <_oWindow>
  [ 48] objcall 91 .............................. _oWindow.bringtofront()
  [ 50] pushint8 -1
  [ 52] getlocal 0
  [ 54] add
  [ 55] setlocal 0
  [ 57] endrepeat [ 10]
  [ 59] ret
end

on closeAllWindows me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 76 ........................... <me.pOpenWindows>
  [  4] pusharglist 1 ........................... <me.pOpenWindows>
  [  6] extcall 104 ............................. <count(me.pOpenWindows)>
  [  8] setlocal 0
  [ 10] getlocal 0
  [ 12] pushint8 1 .............................. <1>
  [ 14] gteq
  [ 15] jmpifz [ 62] ............................ repeat with n = count(me.pOpenWindows) down to 1
  [ 18] getparam 0 .............................. <me>
  [ 20] pushsymb 76 ............................. <#pOpenWindows>
  [ 22] getlocal 0 .............................. <n>
  [ 24] pusharglist 3 ........................... <me, #pOpenWindows, n>
  [ 26] objcall 108 ............................. <me.pOpenWindows[n]>
  [ 28] setlocal 1 .............................. _oWindow = me.pOpenWindows[n]
  [ 30] getlocal 1 .............................. <_oWindow>
  [ 32] getobjprop 241 .......................... <_oWindow.pname>
  [ 34] setlocal 2 .............................. _sWindowName = _oWindow.pname
  [ 36] getlocal 2 .............................. <_sWindowName>
  [ 38] pushcons 122 ............................ <"sanfo_general_alert">
  [ 40] contains0str ............................ <_sWindowName starts "sanfo_general_alert">
  [ 41] jmpifz [ 47] ............................ if _sWindowName starts "sanfo_general_alert" then
  [ 44] jmp [ 53] ............................... next repeat
  [ 47] getlocal 1 .............................. <_oWindow>
  [ 49] pusharglistnoret 1 ...................... <_oWindow>
  [ 51] objcall 180 ............................. _oWindow.closeWindow()
  [ 53] pushint8 -1
  [ 55] getlocal 0
  [ 57] add
  [ 58] setlocal 0
  [ 60] endrepeat [ 10]
  [ 62] getglobal 244 ........................... <ochat>
  [ 64] pusharglist 1 ........................... <ochat>
  [ 66] extcall 87 .............................. <voidp(ochat)>
  [ 68] not ..................................... <not voidp(ochat)>
  [ 69] jmpifz [ 78] ............................ if not voidp(ochat) then
  [ 72] getglobal 244 ........................... <ochat>
  [ 74] pusharglistnoret 1 ...................... <ochat>
  [ 76] objcall 245 ............................. ochat.hideChat()
  [ 78] ret
end

on getDenizenBalance_Result me, iError, iBalance
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 90] ............................ (case) 0:
  [  9] getglobal 178 ........................... <TextMgr>
  [ 11] pushcons 123 ............................ <"BALANCE_DISPLAY">
  [ 13] pusharglist 2 ........................... <TextMgr, "BALANCE_DISPLAY">
  [ 15] objcall 179 ............................. <TextMgr.GetRefText("BALANCE_DISPLAY")>
  [ 17] setlocal 0 .............................. myString = TextMgr.GetRefText("BALANCE_DISPLAY")
  [ 19] pushcons 124 ............................ <"{balance}">
  [ 21] setlocal 1 .............................. myword = "{balance}"
  [ 23] getlocal 1 .............................. <myword>
  [ 25] getlocal 0 .............................. <myString>
  [ 27] pusharglist 2 ........................... <myword, myString>
  [ 29] extcall 163 ............................. <offset(myword, myString)>
  [ 31] setlocal 2 .............................. mypos = offset(myword, myString)
  [ 33] getlocal 0 .............................. <myString>
  [ 35] pushsymb 164 ............................ <#char>
  [ 37] pushint8 1 .............................. <1>
  [ 39] getlocal 2 .............................. <mypos>
  [ 41] pushint8 1 .............................. <1>
  [ 43] sub ..................................... <mypos - 1>
  [ 44] pusharglist 4 ........................... <myString, #char, 1, mypos - 1>
  [ 46] objcall 108 ............................. <myString.char[1..mypos - 1]>
  [ 48] getparam 2 .............................. <iBalance>
  [ 50] joinstr ................................. <myString.char[1..mypos - 1] & iBalance>
  [ 51] getlocal 0 .............................. <myString>
  [ 53] pushsymb 164 ............................ <#char>
  [ 55] getlocal 2 .............................. <mypos>
  [ 57] getlocal 1 .............................. <myword>
  [ 59] pusharglist 1 ........................... <myword>
  [ 61] extcall 165 ............................. <length(myword)>
  [ 63] add ..................................... <mypos + length(myword)>
  [ 64] getlocal 0 .............................. <myString>
  [ 66] pusharglist 1 ........................... <myString>
  [ 68] extcall 165 ............................. <length(myString)>
  [ 70] pusharglist 4 ........................... <myString, #char, mypos + length(myword), length(myString)>
  [ 72] objcall 108 ............................. <myString.char[mypos + length(myword)..length(myString)]>
  [ 74] joinstr ................................. <myString.char[1..mypos - 1] & iBalance & myString.char[mypos + length(myword)..length(myString)]>
  [ 75] setlocal 0 .............................. myString = myString.char[1..mypos - 1] & iBalance & myString.char[mypos + length(myword)..length(myString)]
  [ 77] pushcons 125 ............................ <"balance_decibels">
  [ 79] pusharglist 1 ........................... <"balance_decibels">
  [ 81] extcall 101 ............................. <member("balance_decibels")>
  [ 83] getlocal 0 .............................. <myString>
  [ 85] setobjprop 129 .......................... member("balance_decibels").text = myString
  [ 87] jmp [118]
  [ 90] peek 0
  [ 92] pushint8 1 .............................. <1>
  [ 94] eq
  [ 95] jmpifz [118] ............................ (case) 1:
  [ 98] getglobal 178 ........................... <TextMgr>
  [100] pushcons 126 ............................ <"BALANCE_DISPLAY_FAILED">
  [102] pusharglist 2 ........................... <TextMgr, "BALANCE_DISPLAY_FAILED">
  [104] objcall 179 ............................. <TextMgr.GetRefText("BALANCE_DISPLAY_FAILED")>
  [106] setlocal 0 .............................. myString = TextMgr.GetRefText("BALANCE_DISPLAY_FAILED")
  [108] pushcons 125 ............................ <"balance_decibels">
  [110] pusharglist 1 ........................... <"balance_decibels">
  [112] extcall 101 ............................. <member("balance_decibels")>
  [114] getlocal 0 .............................. <myString>
  [116] setobjprop 129 .......................... member("balance_decibels").text = myString
  [118] pop 1 ................................... end case
  [120] ret
end

on getPossessionsInBackpack_Result me, iError, aItems, iCurrentPage, iTotalPages, iTotalItems, iCds
  [  0] getglobal 178 ........................... <TextMgr>
  [  2] pushcons 127 ............................ <"USER_ITEMS_CDS">
  [  4] pusharglist 2 ........................... <TextMgr, "USER_ITEMS_CDS">
  [  6] objcall 179 ............................. <TextMgr.GetRefText("USER_ITEMS_CDS")>
  [  8] setlocal 0 .............................. cdsentence = TextMgr.GetRefText("USER_ITEMS_CDS")
  [ 10] pushcons 128 ............................ <"{CDs}">
  [ 12] getlocal 0 .............................. <cdsentence>
  [ 14] pusharglist 2 ........................... <"{CDs}", cdsentence>
  [ 16] extcall 163 ............................. <offset("{CDs}", cdsentence)>
  [ 18] setlocal 1 .............................. charpos = offset("{CDs}", cdsentence)
  [ 20] getlocal 1 .............................. <charpos>
  [ 22] getlocal 1 .............................. <charpos>
  [ 24] pushint8 4 .............................. <4>
  [ 26] add ..................................... <charpos + 4>
  [ 27] pushzero ................................ <0>
  [ 28] pushzero ................................ <0>
  [ 29] pushzero ................................ <0>
  [ 30] pushzero ................................ <0>
  [ 31] pushzero ................................ <0>
  [ 32] pushzero ................................ <0>
  [ 33] pushzero ................................ <0>
  [ 34] deletechunk 5 ........................... delete char charpos to charpos + 4 of cdsentence
  [ 36] getlocal 1 .............................. <charpos>
  [ 38] pushint8 1 .............................. <1>
  [ 40] eq ...................................... <charpos = 1>
  [ 41] jmpifz [ 58] ............................ if charpos = 1 then / else
  [ 44] getparam 6 .............................. <iCds>
  [ 46] pusharglist 1 ........................... <iCds>
  [ 48] extcall 207 ............................. <string(iCds)>
  [ 50] getlocal 0 .............................. <cdsentence>
  [ 52] joinstr ................................. <string(iCds) & cdsentence>
  [ 53] setlocal 0 .............................. cdsentence = string(iCds) & cdsentence
  [ 55] jmp [ 79]
  [ 58] getparam 6 .............................. <iCds>
  [ 60] pusharglist 1 ........................... <iCds>
  [ 62] extcall 207 ............................. <string(iCds)>
  [ 64] getlocal 1 .............................. <charpos>
  [ 66] pushint8 1 .............................. <1>
  [ 68] sub ..................................... <charpos - 1>
  [ 69] pushzero ................................ <0>
  [ 70] pushzero ................................ <0>
  [ 71] pushzero ................................ <0>
  [ 72] pushzero ................................ <0>
  [ 73] pushzero ................................ <0>
  [ 74] pushzero ................................ <0>
  [ 75] pushzero ................................ <0>
  [ 76] pushzero ................................ <0>
  [ 77] putchunk 37 ............................. put string(iCds) after char charpos - 1 of cdsentence
  [ 79] pushcons 129 ............................ <"cc.pack.empty.cds">
  [ 81] pusharglist 1 ........................... <"cc.pack.empty.cds">
  [ 83] extcall 101 ............................. <member("cc.pack.empty.cds")>
  [ 85] getlocal 0 .............................. <cdsentence>
  [ 87] setobjprop 129 .......................... member("cc.pack.empty.cds").text = cdsentence
  [ 89] pushint8 1 .............................. <1>
  [ 91] setlocal 2
  [ 93] getlocal 2
  [ 95] getprop 76 .............................. <pOpenWindows>
  [ 97] pusharglist 1 ........................... <pOpenWindows>
  [ 99] extcall 104 ............................. <count(pOpenWindows)>
  [101] lteq
  [102] jmpifz [276] ............................ repeat with n = 1 to count(pOpenWindows)
  [105] getprop 76 .............................. <pOpenWindows>
  [107] getlocal 2 .............................. <n>
  [109] pusharglist 2 ........................... <pOpenWindows, n>
  [111] extcall 249 ............................. <getPropAt(pOpenWindows, n)>
  [113] pushcons 130 ............................ <"cc_backpack">
  [115] eq ...................................... <getPropAt(pOpenWindows, n) = "cc_backpack">
  [116] jmpifz [267] ............................ if getPropAt(pOpenWindows, n) = "cc_backpack" then
  [119] getprop 76 .............................. <pOpenWindows>
  [121] getlocal 2 .............................. <n>
  [123] pusharglist 2 ........................... <pOpenWindows, n>
  [125] objcall 95 .............................. <pOpenWindows[n]>
  [127] pushsymb 250 ............................ <#pSpritelist>
  [129] pushint8 2 .............................. <2>
  [131] pusharglist 3 ........................... <pOpenWindows[n], #pSpritelist, 2>
  [133] objcall 108 ............................. <pOpenWindows[n].pSpritelist[2]>
  [135] pusharglist 1 ........................... <pOpenWindows[n].pSpritelist[2]>
  [137] extcall 177 ............................. <sprite(pOpenWindows[n].pSpritelist[2])>
  [139] getparam 2 .............................. <aItems>
  [141] setobjprop 251 .......................... sprite(pOpenWindows[n].pSpritelist[2]).pItems = aItems
  [143] getprop 76 .............................. <pOpenWindows>
  [145] getlocal 2 .............................. <n>
  [147] pusharglist 2 ........................... <pOpenWindows, n>
  [149] objcall 95 .............................. <pOpenWindows[n]>
  [151] pushsymb 250 ............................ <#pSpritelist>
  [153] pushint8 2 .............................. <2>
  [155] pusharglist 3 ........................... <pOpenWindows[n], #pSpritelist, 2>
  [157] objcall 108 ............................. <pOpenWindows[n].pSpritelist[2]>
  [159] pusharglist 1 ........................... <pOpenWindows[n].pSpritelist[2]>
  [161] extcall 177 ............................. <sprite(pOpenWindows[n].pSpritelist[2])>
  [163] getparam 3 .............................. <iCurrentPage>
  [165] setobjprop 252 .......................... sprite(pOpenWindows[n].pSpritelist[2]).pcurrentpage = iCurrentPage
  [167] getprop 76 .............................. <pOpenWindows>
  [169] getlocal 2 .............................. <n>
  [171] pusharglist 2 ........................... <pOpenWindows, n>
  [173] objcall 95 .............................. <pOpenWindows[n]>
  [175] pushsymb 250 ............................ <#pSpritelist>
  [177] pushint8 2 .............................. <2>
  [179] pusharglist 3 ........................... <pOpenWindows[n], #pSpritelist, 2>
  [181] objcall 108 ............................. <pOpenWindows[n].pSpritelist[2]>
  [183] pusharglist 1 ........................... <pOpenWindows[n].pSpritelist[2]>
  [185] extcall 177 ............................. <sprite(pOpenWindows[n].pSpritelist[2])>
  [187] getparam 3 .............................. <iCurrentPage>
  [189] setobjprop 253 .......................... sprite(pOpenWindows[n].pSpritelist[2]).pIndex = iCurrentPage
  [191] getprop 76 .............................. <pOpenWindows>
  [193] getlocal 2 .............................. <n>
  [195] pusharglist 2 ........................... <pOpenWindows, n>
  [197] objcall 95 .............................. <pOpenWindows[n]>
  [199] pushsymb 250 ............................ <#pSpritelist>
  [201] pushint8 2 .............................. <2>
  [203] pusharglist 3 ........................... <pOpenWindows[n], #pSpritelist, 2>
  [205] objcall 108 ............................. <pOpenWindows[n].pSpritelist[2]>
  [207] pusharglist 1 ........................... <pOpenWindows[n].pSpritelist[2]>
  [209] extcall 177 ............................. <sprite(pOpenWindows[n].pSpritelist[2])>
  [211] getparam 4 .............................. <iTotalPages>
  [213] setobjprop 254 .......................... sprite(pOpenWindows[n].pSpritelist[2]).pTotalPages = iTotalPages
  [215] getprop 76 .............................. <pOpenWindows>
  [217] getlocal 2 .............................. <n>
  [219] pusharglist 2 ........................... <pOpenWindows, n>
  [221] objcall 95 .............................. <pOpenWindows[n]>
  [223] pushsymb 250 ............................ <#pSpritelist>
  [225] pushint8 2 .............................. <2>
  [227] pusharglist 3 ........................... <pOpenWindows[n], #pSpritelist, 2>
  [229] objcall 108 ............................. <pOpenWindows[n].pSpritelist[2]>
  [231] pusharglist 1 ........................... <pOpenWindows[n].pSpritelist[2]>
  [233] extcall 177 ............................. <sprite(pOpenWindows[n].pSpritelist[2])>
  [235] getparam 5 .............................. <iTotalItems>
  [237] setobjprop 255 .......................... sprite(pOpenWindows[n].pSpritelist[2]).pTotalItems = iTotalItems
  [239] getprop 76 .............................. <pOpenWindows>
  [241] getlocal 2 .............................. <n>
  [243] pusharglist 2 ........................... <pOpenWindows, n>
  [245] objcall 95 .............................. <pOpenWindows[n]>
  [247] pushsymb 250 ............................ <#pSpritelist>
  [249] pushint8 2 .............................. <2>
  [251] pusharglist 3 ........................... <pOpenWindows[n], #pSpritelist, 2>
  [253] objcall 108 ............................. <pOpenWindows[n].pSpritelist[2]>
  [255] pusharglist 1 ........................... <pOpenWindows[n].pSpritelist[2]>
  [257] extcall 177 ............................. <sprite(pOpenWindows[n].pSpritelist[2])>
  [259] pusharglistnoret 1 ...................... <sprite(pOpenWindows[n].pSpritelist[2])>
  [261] objcall 256 ............................. sprite(pOpenWindows[n].pSpritelist[2]).updatedisplay()
  [264] jmp [276] ............................... exit repeat
  [267] pushint8 1
  [269] getlocal 2
  [271] add
  [272] setlocal 2
  [274] endrepeat [ 93]
  [276] ret
end

on cataloguepages me
  [  0] getglobal 264 ........................... <sCatalogText>
  [  3] setlocal 0 .............................. mytext = sCatalogText
  [  5] pushcons 131 ............................ <"=">
  [  7] setmovieprop 135 ........................ the itemDelimiter = "="
  [  9] pusharglist 0 ........................... <[]>
  [ 11] pushlist ................................ <[]>
  [ 12] setlocal 1 .............................. catpages = []
  [ 14] pushint8 1 .............................. <1>
  [ 16] setlocal 2
  [ 18] getlocal 2
  [ 20] getlocal 0 .............................. <mytext>
  [ 22] pushint8 4 .............................. <4>
  [ 24] get 1 ................................... <the number of lines in mytext>
  [ 26] lteq
  [ 27] jmpifz [ 93] ............................ repeat with n = 1 to the number of lines in mytext
  [ 30] getlocal 0 .............................. <mytext>
  [ 32] pushsymb 107 ............................ <#line>
  [ 34] getlocal 2 .............................. <n>
  [ 36] pusharglist 3 ........................... <mytext, #line, n>
  [ 38] objcall 265 ............................. <mytext.line[n]>
  [ 41] pushsymb 137 ............................ <#item>
  [ 43] pushint8 1 .............................. <1>
  [ 45] pusharglist 3 ........................... <mytext.line[n], #item, 1>
  [ 47] objcall 108 ............................. <mytext.line[n].item[1]>
  [ 49] pushcons 132 ............................ <"PAGE">
  [ 51] eq ...................................... <mytext.line[n].item[1] = "PAGE">
  [ 52] jmpifz [ 84] ............................ if mytext.line[n].item[1] = "PAGE" then
  [ 55] getlocal 1 .............................. <catpages>
  [ 57] getlocal 0 .............................. <mytext>
  [ 59] pushsymb 107 ............................ <#line>
  [ 61] getlocal 2 .............................. <n>
  [ 63] pusharglist 3 ........................... <mytext, #line, n>
  [ 65] objcall 265 ............................. <mytext.line[n]>
  [ 68] pushsymb 137 ............................ <#item>
  [ 70] pushint8 2 .............................. <2>
  [ 72] pusharglist 3 ........................... <mytext.line[n], #item, 2>
  [ 74] objcall 108 ............................. <mytext.line[n].item[2]>
  [ 76] pusharglist 1 ........................... <mytext.line[n].item[2]>
  [ 78] extcall 106 ............................. <value(mytext.line[n].item[2])>
  [ 80] pusharglistnoret 2 ...................... <catpages, value(mytext.line[n].item[2])>
  [ 82] extcall 190 ............................. append(catpages, value(mytext.line[n].item[2]))
  [ 84] pushint8 1
  [ 86] getlocal 2
  [ 88] add
  [ 89] setlocal 2
  [ 91] endrepeat [ 18]
  [ 93] getlocal 1 .............................. <catpages>
  [ 95] pusharglistnoret 1 ...................... <catpages>
  [ 97] extcall 78 .............................. return catpages
  [ 99] ret
end

on getcatalogueitems me, whatpageID
  [  0] getglobal 264 ........................... <sCatalogText>
  [  3] setlocal 0 .............................. mytext = sCatalogText
  [  5] pushcons 131 ............................ <"=">
  [  7] setmovieprop 135 ........................ the itemDelimiter = "="
  [  9] pusharglist 0 ........................... <[]>
  [ 11] pushlist ................................ <[]>
  [ 12] setlocal 1 .............................. catitems = []
  [ 14] pushint8 1 .............................. <1>
  [ 16] setlocal 2
  [ 18] getlocal 2
  [ 20] getlocal 0 .............................. <mytext>
  [ 22] pushint8 4 .............................. <4>
  [ 24] get 1 ................................... <the number of lines in mytext>
  [ 26] lteq
  [ 27] jmpifz [132] ............................ repeat with n = 1 to the number of lines in mytext
  [ 30] getlocal 0 .............................. <mytext>
  [ 32] pushsymb 107 ............................ <#line>
  [ 34] getlocal 2 .............................. <n>
  [ 36] pusharglist 3 ........................... <mytext, #line, n>
  [ 38] objcall 265 ............................. <mytext.line[n]>
  [ 41] pushsymb 137 ............................ <#item>
  [ 43] pushint8 1 .............................. <1>
  [ 45] pusharglist 3 ........................... <mytext.line[n], #item, 1>
  [ 47] objcall 108 ............................. <mytext.line[n].item[1]>
  [ 49] pushcons 133 ............................ <"ITEM">
  [ 51] eq ...................................... <mytext.line[n].item[1] = "ITEM">
  [ 52] jmpifz [123] ............................ if mytext.line[n].item[1] = "ITEM" then
  [ 55] getlocal 0 .............................. <mytext>
  [ 57] pushsymb 107 ............................ <#line>
  [ 59] getlocal 2 .............................. <n>
  [ 61] pusharglist 3 ........................... <mytext, #line, n>
  [ 63] objcall 265 ............................. <mytext.line[n]>
  [ 66] pushsymb 137 ............................ <#item>
  [ 68] pushint8 2 .............................. <2>
  [ 70] pusharglist 3 ........................... <mytext.line[n], #item, 2>
  [ 72] objcall 108 ............................. <mytext.line[n].item[2]>
  [ 74] pusharglist 1 ........................... <mytext.line[n].item[2]>
  [ 76] extcall 106 ............................. <value(mytext.line[n].item[2])>
  [ 78] setlocal 3 .............................. myitem = value(mytext.line[n].item[2])
  [ 80] getparam 1 .............................. <whatpageID>
  [ 82] pusharglist 1 ........................... <whatpageID>
  [ 84] extcall 87 .............................. <voidp(whatpageID)>
  [ 86] jmpifz [100] ............................ if voidp(whatpageID) then
  [ 89] getlocal 1 .............................. <catitems>
  [ 91] getlocal 3 .............................. <myitem>
  [ 93] pusharglistnoret 2 ...................... <catitems, myitem>
  [ 95] extcall 190 ............................. append(catitems, myitem)
  [ 97] jmp [123] ............................... next repeat
  [100] getlocal 3 .............................. <myitem>
  [102] pushsymb 269 ............................ <#catId>
  [105] pusharglist 2 ........................... <myitem, #catId>
  [107] objcall 95 .............................. <myitem[#catId]>
  [109] getparam 1 .............................. <whatpageID>
  [111] eq ...................................... <myitem[#catId] = whatpageID>
  [112] jmpifz [123] ............................ if myitem[#catId] = whatpageID then
  [115] getlocal 1 .............................. <catitems>
  [117] getlocal 3 .............................. <myitem>
  [119] pusharglistnoret 2 ...................... <catitems, myitem>
  [121] extcall 190 ............................. append(catitems, myitem)
  [123] pushint8 1
  [125] getlocal 2
  [127] add
  [128] setlocal 2
  [130] endrepeat [ 18]
  [132] getlocal 1 .............................. <catitems>
  [134] pusharglistnoret 1 ...................... <catitems>
  [136] extcall 78 .............................. return catitems
  [138] ret
end

on getProductList_Result me, iError, aProdList
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 60] ............................ (case) 0:
  [  9] getprop 76 .............................. <pOpenWindows>
  [ 11] pushsymb 273 ............................ <#catalogue_pagedynamic>
  [ 14] pusharglist 2 ........................... <pOpenWindows, #catalogue_pagedynamic>
  [ 16] extcall 89 .............................. <getaProp(pOpenWindows, #catalogue_pagedynamic)>
  [ 18] pusharglist 1 ........................... <getaProp(pOpenWindows, #catalogue_pagedynamic)>
  [ 20] extcall 87 .............................. <voidp(getaProp(pOpenWindows, #catalogue_pagedynamic))>
  [ 22] pushzero ................................ <0>
  [ 23] eq ...................................... <voidp(getaProp(pOpenWindows, #catalogue_pagedynamic)) = 0>
  [ 24] jmpifz [ 60] ............................ if voidp(getaProp(pOpenWindows, #catalogue_pagedynamic)) = 0 then
  [ 27] getparam 0 .............................. <me>
  [ 29] getchainedprop 76 ....................... <me.pOpenWindows>
  [ 31] getchainedprop 273 ...................... <me.pOpenWindows.catalogue_pagedynamic>
  [ 34] getchainedprop 96 ....................... <me.pOpenWindows.catalogue_pagedynamic.pScrollingLists>
  [ 36] getchainedprop 274 ...................... <me.pOpenWindows.catalogue_pagedynamic.pScrollingLists.itemslist>
  [ 39] getparam 2 .............................. <aProdList>
  [ 41] setobjprop 275 .......................... me.pOpenWindows.catalogue_pagedynamic.pScrollingLists.itemslist.pitemsData = aProdList
  [ 44] getparam 0 .............................. <me>
  [ 46] getchainedprop 76 ....................... <me.pOpenWindows>
  [ 48] getchainedprop 273 ...................... <me.pOpenWindows.catalogue_pagedynamic>
  [ 51] getchainedprop 96 ....................... <me.pOpenWindows.catalogue_pagedynamic.pScrollingLists>
  [ 53] getchainedprop 274 ...................... <me.pOpenWindows.catalogue_pagedynamic.pScrollingLists.itemslist>
  [ 56] pusharglistnoret 1 ...................... <me.pOpenWindows.catalogue_pagedynamic.pScrollingLists.itemslist>
  [ 58] objcall 111 ............................. me.pOpenWindows.catalogue_pagedynamic.pScrollingLists.itemslist.updatecontent()
  [ 60] pop 1
  [ 62] ret
end

on prePurchaseItem_Result me, iError, iBalance, iPrice, sProdID, aAttributes
  [  0] getparam 2 .............................. <iBalance>
  [  2] pusharglist 1 ........................... <iBalance>
  [  4] extcall 87 .............................. <voidp(iBalance)>
  [  6] not ..................................... <not voidp(iBalance)>
  [  7] getparam 3 .............................. <iPrice>
  [  9] pusharglist 1 ........................... <iPrice>
  [ 11] extcall 87 .............................. <voidp(iPrice)>
  [ 13] not ..................................... <not voidp(iPrice)>
  [ 14] and ..................................... <not voidp(iBalance) and not voidp(iPrice)>
  [ 15] jmpifz [ 56] ............................ if not voidp(iBalance) and not voidp(iPrice) then
  [ 18] getparam 2 .............................. <iBalance>
  [ 20] pusharglist 1 ........................... <iBalance>
  [ 22] extcall 277 ............................. <integerp(iBalance)>
  [ 25] getparam 3 .............................. <iPrice>
  [ 27] pusharglist 1 ........................... <iPrice>
  [ 29] extcall 277 ............................. <integerp(iPrice)>
  [ 32] and ..................................... <integerp(iBalance) and integerp(iPrice)>
  [ 33] jmpifz [ 56] ............................ if integerp(iBalance) and integerp(iPrice) then
  [ 36] getparam 2 .............................. <iBalance>
  [ 38] getparam 3 .............................. <iPrice>
  [ 40] lt ...................................... <iBalance < iPrice>
  [ 41] jmpifz [ 56] ............................ if iBalance < iPrice then
  [ 44] getparam 0 .............................. <me>
  [ 46] pushcons 134 ............................ <"ALERT_INSUFFICIENT_BALANCE">
  [ 48] pusharglistnoret 2 ...................... <me, "ALERT_INSUFFICIENT_BALANCE">
  [ 50] objcall 10 .............................. me.alert("ALERT_INSUFFICIENT_BALANCE")
  [ 52] pusharglistnoret 0 ...................... <>
  [ 54] extcall 78 .............................. return 
  [ 56] getparam 1 .............................. <iError>
  [ 58] peek 0 .................................. case iError of
  [ 60] pushzero ................................ <0>
  [ 61] eq
  [ 62] jmpifz [444] ............................ (case) 0:
  [ 65] getprop 76 .............................. <pOpenWindows>
  [ 67] peek 0
  [ 69] pusharglist 1
  [ 71] extcall 104
  [ 73] pushint8 1
  [ 75] peek 0
  [ 77] peek 2
  [ 79] lteq
  [ 80] jmpifz [230] ............................ repeat with n in pOpenWindows
  [ 83] peek 2
  [ 85] peek 1
  [ 87] pusharglist 2
  [ 89] extcall 95
  [ 91] setlocal 0
  [ 93] getlocal 0 .............................. <n>
  [ 95] getobjprop 96 ........................... <n.pScrollingLists>
  [ 97] pusharglist 1 ........................... <n.pScrollingLists>
  [ 99] extcall 104 ............................. <count(n.pScrollingLists)>
  [101] jmpifz [225] ............................ if count(n.pScrollingLists) then
  [104] getlocal 0 .............................. <n>
  [106] getobjprop 96 ........................... <n.pScrollingLists>
  [108] pushsymb 274 ............................ <#itemslist>
  [111] pusharglist 2 ........................... <n.pScrollingLists, #itemslist>
  [113] extcall 89 .............................. <getaProp(n.pScrollingLists, #itemslist)>
  [115] pusharglist 1 ........................... <getaProp(n.pScrollingLists, #itemslist)>
  [117] extcall 87 .............................. <voidp(getaProp(n.pScrollingLists, #itemslist))>
  [119] pushzero ................................ <0>
  [120] eq ...................................... <voidp(getaProp(n.pScrollingLists, #itemslist)) = 0>
  [121] jmpifz [225] ............................ if voidp(getaProp(n.pScrollingLists, #itemslist)) = 0 then
  [124] getparam 4 .............................. <sProdID>
  [126] pusharglist 1 ........................... <sProdID>
  [128] extcall 87 .............................. <voidp(sProdID)>
  [130] pushzero ................................ <0>
  [131] eq ...................................... <voidp(sProdID) = 0>
  [132] jmpifz [218] ............................ if voidp(sProdID) = 0 then / else
  [135] getparam 0 .............................. <me>
  [137] getchainedprop 76 ....................... <me.pOpenWindows>
  [139] getchainedprop 273 ...................... <me.pOpenWindows.catalogue_pagedynamic>
  [142] getchainedprop 96 ....................... <me.pOpenWindows.catalogue_pagedynamic.pScrollingLists>
  [144] getchainedprop 274 ...................... <me.pOpenWindows.catalogue_pagedynamic.pScrollingLists.itemslist>
  [147] getobjprop 278 .......................... <me.pOpenWindows.catalogue_pagedynamic.pScrollingLists.itemslist.pItemsList>
  [150] setlocal 1 .............................. itemslist = me.pOpenWindows.catalogue_pagedynamic.pScrollingLists.itemslist.pItemsList
  [152] getlocal 1 .............................. <itemslist>
  [154] peek 0
  [156] pusharglist 1
  [158] extcall 104
  [160] pushint8 1
  [162] peek 0
  [164] peek 2
  [166] lteq
  [167] jmpifz [213] ............................ repeat with myitem in itemslist
  [170] peek 2
  [172] peek 1
  [174] pusharglist 2
  [176] extcall 95
  [178] setlocal 2
  [180] getlocal 2 .............................. <myitem>
  [182] pushsymb 279 ............................ <#prodID>
  [185] pusharglist 2 ........................... <myitem, #prodID>
  [187] objcall 95 .............................. <myitem[#prodID]>
  [189] getparam 4 .............................. <sProdID>
  [191] eq ...................................... <myitem[#prodID] = sProdID>
  [192] jmpifz [208] ............................ if myitem[#prodID] = sProdID then
  [195] getlocal 2 .............................. <myitem>
  [197] pushsymb 90 ............................. <#name>
  [199] pusharglist 2 ........................... <myitem, #name>
  [201] objcall 95 .............................. <myitem[#name]>
  [203] setlocal 3 .............................. myName = myitem[#name]
  [205] jmp [213] ............................... exit repeat
  [208] pushint8 1
  [210] add
  [211] endrepeat [162]
  [213] pop 3
  [215] jmp [222]
  [218] pushcons 135 ............................ <"this item">
  [220] setlocal 3 .............................. myName = "this item"
  [222] jmp [230] ............................... exit repeat
  [225] pushint8 1
  [227] add
  [228] endrepeat [ 75]
  [230] pop 3
  [232] getparam 4 .............................. <sProdID>
  [234] pusharglist 1 ........................... <sProdID>
  [236] extcall 87 .............................. <voidp(sProdID)>
  [238] jmpifz [247] ............................ if voidp(sProdID) then
  [241] pop 1
  [243] pusharglistnoret 0 ...................... <>
  [245] extcall 78 .............................. return 
  [247] getparam 0 .............................. <me>
  [249] pushcons 136 ............................ <"purchase_info.window">
  [251] pusharglistnoret 2 ...................... <me, "purchase_info.window">
  [253] objcall 2 ............................... me.newwindow("purchase_info.window")
  [255] getglobal 178 ........................... <TextMgr>
  [257] pushcons 137 ............................ <"PURCHASE_PRICE">
  [259] pusharglist 2 ........................... <TextMgr, "PURCHASE_PRICE">
  [261] objcall 179 ............................. <TextMgr.GetRefText("PURCHASE_PRICE")>
  [263] setlocal 4 .............................. purchasetitle = TextMgr.GetRefText("PURCHASE_PRICE")
  [265] pushcons 138 ............................ <"{item}">
  [267] getlocal 4 .............................. <purchasetitle>
  [269] pusharglist 2 ........................... <"{item}", purchasetitle>
  [271] extcall 163 ............................. <offset("{item}", purchasetitle)>
  [273] setlocal 5 .............................. mychar = offset("{item}", purchasetitle)
  [275] getlocal 5 .............................. <mychar>
  [277] getlocal 5 .............................. <mychar>
  [279] pushint8 5 .............................. <5>
  [281] add ..................................... <mychar + 5>
  [282] pushzero ................................ <0>
  [283] pushzero ................................ <0>
  [284] pushzero ................................ <0>
  [285] pushzero ................................ <0>
  [286] pushzero ................................ <0>
  [287] pushzero ................................ <0>
  [288] pushint8 4 .............................. <4>
  [290] deletechunk 5 ........................... delete char mychar to mychar + 5 of purchasetitle
  [292] getlocal 3 .............................. <myName>
  [294] pushcons 31 ............................. <" ">
  [296] joinstr ................................. <myName & " ">
  [297] getlocal 5 .............................. <mychar>
  [299] pushzero ................................ <0>
  [300] pushzero ................................ <0>
  [301] pushzero ................................ <0>
  [302] pushzero ................................ <0>
  [303] pushzero ................................ <0>
  [304] pushzero ................................ <0>
  [305] pushzero ................................ <0>
  [306] pushint8 4 .............................. <4>
  [308] putchunk 21 ............................. put myName & " " into char mychar of purchasetitle
  [310] pushcons 139 ............................ <"{price}">
  [312] getlocal 4 .............................. <purchasetitle>
  [314] pusharglist 2 ........................... <"{price}", purchasetitle>
  [316] extcall 163 ............................. <offset("{price}", purchasetitle)>
  [318] setlocal 5 .............................. mychar = offset("{price}", purchasetitle)
  [320] getlocal 5 .............................. <mychar>
  [322] getlocal 5 .............................. <mychar>
  [324] pushint8 6 .............................. <6>
  [326] add ..................................... <mychar + 6>
  [327] pushzero ................................ <0>
  [328] pushzero ................................ <0>
  [329] pushzero ................................ <0>
  [330] pushzero ................................ <0>
  [331] pushzero ................................ <0>
  [332] pushzero ................................ <0>
  [333] pushint8 4 .............................. <4>
  [335] deletechunk 5 ........................... delete char mychar to mychar + 6 of purchasetitle
  [337] getparam 3 .............................. <iPrice>
  [339] pushcons 31 ............................. <" ">
  [341] joinstr ................................. <iPrice & " ">
  [342] getlocal 5 .............................. <mychar>
  [344] pushzero ................................ <0>
  [345] pushzero ................................ <0>
  [346] pushzero ................................ <0>
  [347] pushzero ................................ <0>
  [348] pushzero ................................ <0>
  [349] pushzero ................................ <0>
  [350] pushzero ................................ <0>
  [351] pushint8 4 .............................. <4>
  [353] putchunk 21 ............................. put iPrice & " " into char mychar of purchasetitle
  [355] pushcons 140 ............................ <"purchase_bold_alert_text">
  [357] pusharglist 1 ........................... <"purchase_bold_alert_text">
  [359] extcall 101 ............................. <member("purchase_bold_alert_text")>
  [361] getlocal 4 .............................. <purchasetitle>
  [363] setobjprop 129 .......................... member("purchase_bold_alert_text").text = purchasetitle
  [365] getglobal 178 ........................... <TextMgr>
  [367] pushcons 141 ............................ <"PURCHASE_BALANCE">
  [369] pusharglist 2 ........................... <TextMgr, "PURCHASE_BALANCE">
  [371] objcall 179 ............................. <TextMgr.GetRefText("PURCHASE_BALANCE")>
  [373] setlocal 6 .............................. secondline = TextMgr.GetRefText("PURCHASE_BALANCE")
  [375] pushcons 124 ............................ <"{balance}">
  [377] getlocal 6 .............................. <secondline>
  [379] pusharglist 2 ........................... <"{balance}", secondline>
  [381] extcall 163 ............................. <offset("{balance}", secondline)>
  [383] setlocal 5 .............................. mychar = offset("{balance}", secondline)
  [385] getlocal 5 .............................. <mychar>
  [387] getlocal 5 .............................. <mychar>
  [389] pushint8 8 .............................. <8>
  [391] add ..................................... <mychar + 8>
  [392] pushzero ................................ <0>
  [393] pushzero ................................ <0>
  [394] pushzero ................................ <0>
  [395] pushzero ................................ <0>
  [396] pushzero ................................ <0>
  [397] pushzero ................................ <0>
  [398] pushint8 6 .............................. <6>
  [400] deletechunk 5 ........................... delete char mychar to mychar + 8 of secondline
  [402] getparam 2 .............................. <iBalance>
  [404] pushcons 31 ............................. <" ">
  [406] joinstr ................................. <iBalance & " ">
  [407] getlocal 5 .............................. <mychar>
  [409] pushzero ................................ <0>
  [410] pushzero ................................ <0>
  [411] pushzero ................................ <0>
  [412] pushzero ................................ <0>
  [413] pushzero ................................ <0>
  [414] pushzero ................................ <0>
  [415] pushzero ................................ <0>
  [416] pushint8 6 .............................. <6>
  [418] putchunk 21 ............................. put iBalance & " " into char mychar of secondline
  [420] pushcons 142 ............................ <"purchase_bigalertext">
  [422] pusharglist 1 ........................... <"purchase_bigalertext">
  [424] extcall 101 ............................. <member("purchase_bigalertext")>
  [426] getlocal 6 .............................. <secondline>
  [428] setobjprop 129 .......................... member("purchase_bigalertext").text = secondline
  [430] getparam 0 .............................. <me>
  [432] getparam 4 .............................. <sProdID>
  [434] setobjprop 280 .......................... me.pSelectedCatId = sProdID
  [437] getparam 0 .............................. <me>
  [439] getparam 5 .............................. <aAttributes>
  [441] setobjprop 281 .......................... me.pSelectedAttributes = aAttributes
  [444] pop 1
  [446] ret
end

on purchaseItem_Result me, iError, aPossessions
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [187] ............................ (case) 0:
  [  9] getglobal 118 ........................... <oDenizenManager>
  [ 11] pusharglist 1 ........................... <oDenizenManager>
  [ 13] objcall 287 ............................. <oDenizenManager.getBackpack()>
  [ 16] setlocal 0 .............................. oBackPack = oDenizenManager.getBackpack()
  [ 18] getlocal 0 .............................. <oBackPack>
  [ 20] pusharglist 1 ........................... <oBackPack>
  [ 22] extcall 87 .............................. <voidp(oBackPack)>
  [ 24] not ..................................... <not voidp(oBackPack)>
  [ 25] jmpifz [ 39] ............................ if not voidp(oBackPack) then
  [ 28] getlocal 0 .............................. <oBackPack>
  [ 30] getparam 2 .............................. <aPossessions>
  [ 32] pushint8 1 .............................. <1>
  [ 34] pusharglistnoret 3 ...................... <oBackPack, aPossessions, 1>
  [ 36] objcall 288 ............................. oBackPack.addPossessions(aPossessions, 1)
  [ 39] pushint8 1 .............................. <1>
  [ 41] setlocal 1
  [ 43] getlocal 1
  [ 45] getprop 76 .............................. <pOpenWindows>
  [ 47] pusharglist 1 ........................... <pOpenWindows>
  [ 49] extcall 104 ............................. <count(pOpenWindows)>
  [ 51] lteq
  [ 52] jmpifz [184] ............................ repeat with n = 1 to count(pOpenWindows)
  [ 55] getprop 76 .............................. <pOpenWindows>
  [ 57] getlocal 1 .............................. <n>
  [ 59] pusharglist 2 ........................... <pOpenWindows, n>
  [ 61] extcall 249 ............................. <getPropAt(pOpenWindows, n)>
  [ 63] pushcons 130 ............................ <"cc_backpack">
  [ 65] eq ...................................... <getPropAt(pOpenWindows, n) = "cc_backpack">
  [ 66] jmpifz [152] ............................ if getPropAt(pOpenWindows, n) = "cc_backpack" then
  [ 69] getprop 76 .............................. <pOpenWindows>
  [ 71] getlocal 1 .............................. <n>
  [ 73] pusharglist 2 ........................... <pOpenWindows, n>
  [ 75] objcall 95 .............................. <pOpenWindows[n]>
  [ 77] pushsymb 250 ............................ <#pSpritelist>
  [ 79] pushint8 2 .............................. <2>
  [ 81] pusharglist 3 ........................... <pOpenWindows[n], #pSpritelist, 2>
  [ 83] objcall 108 ............................. <pOpenWindows[n].pSpritelist[2]>
  [ 85] pusharglist 1 ........................... <pOpenWindows[n].pSpritelist[2]>
  [ 87] extcall 177 ............................. <sprite(pOpenWindows[n].pSpritelist[2])>
  [ 89] pushint8 1 .............................. <1>
  [ 91] setobjprop 253 .......................... sprite(pOpenWindows[n].pSpritelist[2]).pIndex = 1
  [ 93] getglobal 118 ........................... <oDenizenManager>
  [ 95] pusharglist 1 ........................... <oDenizenManager>
  [ 97] objcall 197 ............................. <oDenizenManager.getScreenName()>
  [ 99] setlocal 2 .............................. myscreenname = oDenizenManager.getScreenName()
  [101] getglobal 118 ........................... <oDenizenManager>
  [103] pusharglist 1 ........................... <oDenizenManager>
  [105] objcall 287 ............................. <oDenizenManager.getBackpack()>
  [108] setlocal 0 .............................. oBackPack = oDenizenManager.getBackpack()
  [110] getlocal 0 .............................. <oBackPack>
  [112] pusharglist 1 ........................... <oBackPack>
  [114] extcall 87 .............................. <voidp(oBackPack)>
  [116] not ..................................... <not voidp(oBackPack)>
  [117] jmpifz [146] ............................ if not voidp(oBackPack) then
  [120] getglobal 289 ........................... <oPossessionManager>
  [123] getlocal 2 .............................. <myscreenname>
  [125] pushint8 1 .............................. <1>
  [127] pushint8 25 ............................. <25>
  [129] pusharglistnoret 4 ...................... <oPossessionManager, myscreenname, 1, 25>
  [131] objcall 290 ............................. oPossessionManager.getPossessionsInBackpack(myscreenname, 1, 25)
  [134] getprop 76 .............................. <pOpenWindows>
  [136] getlocal 1 .............................. <n>
  [138] pusharglist 2 ........................... <pOpenWindows, n>
  [140] objcall 95 .............................. <pOpenWindows[n]>
  [142] pusharglistnoret 1 ...................... <pOpenWindows[n]>
  [144] objcall 91 .............................. pOpenWindows[n].bringtofront()
  [146] jmp [184] ............................... exit repeat
  [149] jmp [175] ............................... next repeat
  [152] getlocal 1 .............................. <n>
  [154] getprop 76 .............................. <pOpenWindows>
  [156] pusharglist 1 ........................... <pOpenWindows>
  [158] extcall 104 ............................. <count(pOpenWindows)>
  [160] eq ...................................... <n = count(pOpenWindows)>
  [161] jmpifz [175] ............................ if n = count(pOpenWindows) then
  [164] getparam 0 .............................. <me>
  [166] pushcons 143 ............................ <"cc.backpack.window">
  [168] pusharglistnoret 2 ...................... <me, "cc.backpack.window">
  [170] objcall 2 ............................... me.newwindow("cc.backpack.window")
  [172] jmp [184] ............................... exit repeat
  [175] pushint8 1
  [177] getlocal 1
  [179] add
  [180] setlocal 1
  [182] endrepeat [ 43]
  [184] jmp [203]
  [187] peek 0
  [189] pushint8 1 .............................. <1>
  [191] eq
  [192] jmpifz [203] ............................ (case) 1:
  [195] getparam 0 .............................. <me>
  [197] pushcons 134 ............................ <"ALERT_INSUFFICIENT_BALANCE">
  [199] pusharglistnoret 2 ...................... <me, "ALERT_INSUFFICIENT_BALANCE">
  [201] objcall 10 .............................. me.alert("ALERT_INSUFFICIENT_BALANCE")
  [203] pop 1 ................................... end case
  [205] ret
end

on getSequencer me
  [  0] pushcons 144 ............................ <"Sequencer">
  [  2] pusharglist 1 ........................... <"Sequencer">
  [  4] extcall 101 ............................. <member("Sequencer")>
  [  6] setlocal 0 .............................. oMember = member("Sequencer")
  [  8] getlocal 0 .............................. <oMember>
  [ 10] getobjprop 102 .......................... <oMember.memberNum>
  [ 12] pushzero ................................ <0>
  [ 13] lt ...................................... <oMember.memberNum < 0>
  [ 14] jmpifz [ 25] ............................ if oMember.memberNum < 0 then
  [ 17] pusharglist 0 ........................... <>
  [ 19] extcall 212 ............................. <VOID>
  [ 21] pusharglistnoret 1 ...................... <VOID>
  [ 23] extcall 78 .............................. return VOID
  [ 25] getparam 0 .............................. <me>
  [ 27] getobjprop 293 .......................... <me.oSequencer>
  [ 30] pusharglist 1 ........................... <me.oSequencer>
  [ 32] extcall 87 .............................. <voidp(me.oSequencer)>
  [ 34] jmpifz [ 52] ............................ if voidp(me.oSequencer) then
  [ 37] getparam 0 .............................. <me>
  [ 39] pushcons 144 ............................ <"Sequencer">
  [ 41] pusharglist 1 ........................... <"Sequencer">
  [ 43] extcall 92 .............................. <script("Sequencer")>
  [ 45] pusharglist 1 ........................... <script("Sequencer")>
  [ 47] objcall 0 ............................... <script("Sequencer").new()>
  [ 49] setobjprop 293 .......................... me.oSequencer = script("Sequencer").new()
  [ 52] getparam 0 .............................. <me>
  [ 54] getobjprop 293 .......................... <me.oSequencer>
  [ 57] pusharglistnoret 1 ...................... <me.oSequencer>
  [ 59] extcall 78 .............................. return me.oSequencer
  [ 61] ret
end

on getMessengerObject me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 295 .......................... <me.oMessenger>
  [  5] pusharglist 1 ........................... <me.oMessenger>
  [  7] extcall 87 .............................. <voidp(me.oMessenger)>
  [  9] jmpifz [ 27] ............................ if voidp(me.oMessenger) then
  [ 12] getparam 0 .............................. <me>
  [ 14] pushcons 145 ............................ <"_MESSENGER_">
  [ 16] pusharglist 1 ........................... <"_MESSENGER_">
  [ 18] extcall 92 .............................. <script("_MESSENGER_")>
  [ 20] pusharglist 1 ........................... <script("_MESSENGER_")>
  [ 22] objcall 0 ............................... <script("_MESSENGER_").new()>
  [ 24] setobjprop 295 .......................... me.oMessenger = script("_MESSENGER_").new()
  [ 27] getparam 0 .............................. <me>
  [ 29] getobjprop 295 .......................... <me.oMessenger>
  [ 32] pusharglistnoret 1 ...................... <me.oMessenger>
  [ 34] extcall 78 .............................. return me.oMessenger
  [ 36] ret
end

on getMessenger_Result me, iError, iFriendCount, iEnemyCount, iInviteCount, iTotalMessageCount, aFriends, aEnemies, aInvites, aMessages
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 146 ............................ <"getMessenger_Result()">
  [  4] pushcons 112 ............................ <"iError:">
  [  6] joinpadstr .............................. <"getMessenger_Result()" && "iError:">
  [  7] getparam 1 .............................. <iError>
  [  9] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError>
  [ 10] pushcons 147 ............................ <"iFriendCount:">
  [ 12] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:">
  [ 13] getparam 2 .............................. <iFriendCount>
  [ 15] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount>
  [ 16] pushcons 148 ............................ <"iEnemyCount:">
  [ 18] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:">
  [ 19] getparam 3 .............................. <iEnemyCount>
  [ 21] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount>
  [ 22] pushcons 149 ............................ <"iInviteCount:">
  [ 24] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:">
  [ 25] getparam 4 .............................. <iInviteCount>
  [ 27] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount>
  [ 28] pushcons 150 ............................ <"iTotalMessageCount:">
  [ 30] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:">
  [ 31] getparam 5 .............................. <iTotalMessageCount>
  [ 33] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount>
  [ 34] pushcons 151 ............................ <"aFriends:">
  [ 36] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:">
  [ 37] getparam 6 .............................. <aFriends>
  [ 39] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:" && aFriends>
  [ 40] pushcons 152 ............................ <"aEnemies:">
  [ 42] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:" && aFriends && "aEnemies:">
  [ 43] getparam 7 .............................. <aEnemies>
  [ 45] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:" && aFriends && "aEnemies:" && aEnemies>
  [ 46] pushcons 153 ............................ <"aInvites:">
  [ 48] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:" && aFriends && "aEnemies:" && aEnemies && "aInvites:">
  [ 49] getparam 8 .............................. <aInvites>
  [ 51] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:" && aFriends && "aEnemies:" && aEnemies && "aInvites:" && aInvites>
  [ 52] pushcons 154 ............................ <"aMessages:">
  [ 54] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:" && aFriends && "aEnemies:" && aEnemies && "aInvites:" && aInvites && "aMessages:">
  [ 55] getparam 9 .............................. <aMessages>
  [ 57] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:" && aFriends && "aEnemies:" && aEnemies && "aInvites:" && aInvites && "aMessages:" && aMessages>
  [ 58] pusharglistnoret 2 ...................... <me, "getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:" && aFriends && "aEnemies:" && aEnemies && "aInvites:" && aInvites && "aMessages:" && aMessages>
  [ 60] objcall 1 ............................... me.debug("getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:" && aFriends && "aEnemies:" && aEnemies && "aInvites:" && aInvites && "aMessages:" && aMessages)
  [ 62] getparam 1 .............................. <iError>
  [ 64] peek 0 .................................. case iError of
  [ 66] pushzero ................................ <0>
  [ 67] eq
  [ 68] jmpifz [ 98] ............................ (case) 0:
  [ 71] getparam 0 .............................. <me>
  [ 73] pusharglist 1 ........................... <me>
  [ 75] objcall 35 .............................. <me.getMessengerObject()>
  [ 77] getparam 2 .............................. <iFriendCount>
  [ 79] getparam 3 .............................. <iEnemyCount>
  [ 81] getparam 4 .............................. <iInviteCount>
  [ 83] getparam 5 .............................. <iTotalMessageCount>
  [ 85] getparam 6 .............................. <aFriends>
  [ 87] getparam 7 .............................. <aEnemies>
  [ 89] getparam 8 .............................. <aInvites>
  [ 91] getparam 9 .............................. <aMessages>
  [ 93] pusharglistnoret 9 ...................... <me.getMessengerObject(), iFriendCount, iEnemyCount, iInviteCount, iTotalMessageCount, aFriends, aEnemies, aInvites, aMessages>
  [ 95] objcall 296 ............................. me.getMessengerObject().updateData(iFriendCount, iEnemyCount, iInviteCount, iTotalMessageCount, aFriends, aEnemies, aInvites, aMessages)
  [ 98] pop 1
  [100] ret
end

on sendMessage_Result me, iError
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushint8 18 ............................. <18>
  [  6] eq
  [  7] jmpifz [ 21] ............................ (case) 18:
  [ 10] getparam 0 .............................. <me>
  [ 12] pushcons 155 ............................ <"ALERT_MESSENGER_LANG">
  [ 14] pusharglistnoret 2 ...................... <me, "ALERT_MESSENGER_LANG">
  [ 16] objcall 10 .............................. me.alert("ALERT_MESSENGER_LANG")
  [ 18] jmp [ 32] ............................... (case) otherwise:
  [ 21] getparam 0 .............................. <me>
  [ 23] pushcons 156 ............................ <"** sendMessage_Result() ERROR: ">
  [ 25] getparam 1 .............................. <iError>
  [ 27] joinstr ................................. <"** sendMessage_Result() ERROR: " & iError>
  [ 28] pusharglistnoret 2 ...................... <me, "** sendMessage_Result() ERROR: " & iError>
  [ 30] objcall 1 ............................... me.debug("** sendMessage_Result() ERROR: " & iError)
  [ 32] pop 1 ................................... end case
  [ 34] ret
end

on removeMessage_Result me, iError
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 12] ............................ (case) 0:
  [  9] jmp [ 23] ............................... (case) otherwise:
  [ 12] getparam 0 .............................. <me>
  [ 14] pushcons 157 ............................ <"** removeMessage_Result() ERROR: ">
  [ 16] getparam 1 .............................. <iError>
  [ 18] joinstr ................................. <"** removeMessage_Result() ERROR: " & iError>
  [ 19] pusharglistnoret 2 ...................... <me, "** removeMessage_Result() ERROR: " & iError>
  [ 21] objcall 1 ............................... me.debug("** removeMessage_Result() ERROR: " & iError)
  [ 23] pop 1 ................................... end case
  [ 25] ret
end

on rejectInvitation_Result me, iError
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 158 ............................ <"** rejectInvitation_Result() ERROR: ">
  [  4] getparam 1 .............................. <iError>
  [  6] joinstr ................................. <"** rejectInvitation_Result() ERROR: " & iError>
  [  7] pusharglistnoret 2 ...................... <me, "** rejectInvitation_Result() ERROR: " & iError>
  [  9] objcall 1 ............................... me.debug("** rejectInvitation_Result() ERROR: " & iError)
  [ 11] getparam 1 .............................. <iError>
  [ 13] peek 0 .................................. case iError of
  [ 15] pushzero ................................ <0>
  [ 16] eq
  [ 17] jmpifz [ 23] ............................ (case) 0:
  [ 20] jmp [ 23]
  [ 23] pop 1 ................................... end case
  [ 25] ret
end

on acceptInvitation_Result me, iError
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 19] ............................ (case) 0:
  [  9] getglobal 118 ........................... <oDenizenManager>
  [ 11] pusharglistnoret 1 ...................... <oDenizenManager>
  [ 13] objcall 305 ............................. oDenizenManager.getMessenger()
  [ 16] jmp [ 19]
  [ 19] pop 1 ................................... end case
  [ 21] ret
end

on removeFriends_Result me, iError
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 12] ............................ (case) 0:
  [  9] jmp [ 12]
  [ 12] pop 1 ................................... end case
  [ 14] ret
end

on inviteFriend_Result me, iError
  [  0] pusharglistnoret 0 ...................... <>
  [  2] extcall 306 ............................. nothing()
  [  5] ret
end

on openmixer me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 307 .......................... <me.oMixer>
  [  5] pusharglist 1 ........................... <me.oMixer>
  [  7] extcall 87 .............................. <voidp(me.oMixer)>
  [  9] not ..................................... <not voidp(me.oMixer)>
  [ 10] jmpifz [ 22] ............................ if not voidp(me.oMixer) then
  [ 13] getparam 0 .............................. <me>
  [ 15] getchainedprop 307 ...................... <me.oMixer>
  [ 18] pusharglistnoret 1 ...................... <me.oMixer>
  [ 20] objcall 180 ............................. me.oMixer.closeWindow()
  [ 22] getparam 0 .............................. <me>
  [ 24] pushcons 159 ............................ <"_MIXER_">
  [ 26] pusharglist 1 ........................... <"_MIXER_">
  [ 28] extcall 92 .............................. <script("_MIXER_")>
  [ 30] pusharglist 1 ........................... <script("_MIXER_")>
  [ 32] objcall 0 ............................... <script("_MIXER_").new()>
  [ 34] setobjprop 307 .......................... me.oMixer = script("_MIXER_").new()
  [ 37] getglobal 99 ............................ <oStudioManager>
  [ 39] getglobal 118 ........................... <oDenizenManager>
  [ 41] pusharglist 1 ........................... <oDenizenManager>
  [ 43] objcall 197 ............................. <oDenizenManager.getScreenName()>
  [ 45] pusharglistnoret 2 ...................... <oStudioManager, oDenizenManager.getScreenName()>
  [ 47] objcall 308 ............................. oStudioManager.getMixerByScreenName(oDenizenManager.getScreenName())
  [ 50] getparam 0 .............................. <me>
  [ 52] getobjprop 307 .......................... <me.oMixer>
  [ 55] pusharglistnoret 1 ...................... <me.oMixer>
  [ 57] extcall 78 .............................. return me.oMixer
  [ 59] ret
end

on getMixer me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 307 .......................... <me.oMixer>
  [  5] pusharglistnoret 1 ...................... <me.oMixer>
  [  7] extcall 78 .............................. return me.oMixer
  [  9] ret
end

on getMixerByScreenName_Result me, iError, aRemoteMixer
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 28] ............................ (case) 0:
  [  9] getparam 0 .............................. <me>
  [ 11] getchainedprop 307 ...................... <me.oMixer>
  [ 14] getparam 2 .............................. <aRemoteMixer>
  [ 16] setobjprop 309 .......................... me.oMixer.pMixerData = aRemoteMixer
  [ 19] getparam 0 .............................. <me>
  [ 21] getchainedprop 307 ...................... <me.oMixer>
  [ 24] pusharglistnoret 1 ...................... <me.oMixer>
  [ 26] objcall 111 ............................. me.oMixer.updatecontent()
  [ 28] pop 1
  [ 30] ret
end

on burnMixToCD_Result me, iError, aPossessions
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 83] ............................ (case) 0:
  [  9] getparam 0 .............................. <me>
  [ 11] pusharglistnoret 1 ...................... <me>
  [ 13] objcall 43 .............................. me.openmixer()
  [ 15] getparam 0 .............................. <me>
  [ 17] pushcons 160 ............................ <"BURN_CD_BURNT">
  [ 19] pusharglistnoret 2 ...................... <me, "BURN_CD_BURNT">
  [ 21] objcall 10 .............................. me.alert("BURN_CD_BURNT")
  [ 23] getglobal 118 ........................... <oDenizenManager>
  [ 25] pusharglist 1 ........................... <oDenizenManager>
  [ 27] objcall 287 ............................. <oDenizenManager.getBackpack()>
  [ 30] setlocal 0 .............................. oBackPack = oDenizenManager.getBackpack()
  [ 32] getlocal 0 .............................. <oBackPack>
  [ 34] pusharglist 1 ........................... <oBackPack>
  [ 36] extcall 87 .............................. <voidp(oBackPack)>
  [ 38] not ..................................... <not voidp(oBackPack)>
  [ 39] jmpifz [ 83] ............................ if not voidp(oBackPack) then
  [ 42] getlocal 0 .............................. <oBackPack>
  [ 44] getparam 2 .............................. <aPossessions>
  [ 46] pushint8 1 .............................. <1>
  [ 48] pusharglistnoret 3 ...................... <oBackPack, aPossessions, 1>
  [ 50] objcall 288 ............................. oBackPack.addPossessions(aPossessions, 1)
  [ 53] getlocal 0 .............................. <oBackPack>
  [ 55] getparam 2 .............................. <aPossessions>
  [ 57] getobjprop 165 .......................... <aPossessions.length>
  [ 59] inv ..................................... <-aPossessions.length>
  [ 60] pusharglistnoret 2 ...................... <oBackPack, -aPossessions.length>
  [ 62] objcall 311 ............................. oBackPack.incrementNumberOfBlankCds(-aPossessions.length)
  [ 65] getglobal 289 ........................... <oPossessionManager>
  [ 68] getglobal 118 ........................... <oDenizenManager>
  [ 70] pusharglist 1 ........................... <oDenizenManager>
  [ 72] objcall 197 ............................. <oDenizenManager.getScreenName()>
  [ 74] pushint8 1 .............................. <1>
  [ 76] pushint8 25 ............................. <25>
  [ 78] pusharglistnoret 4 ...................... <oPossessionManager, oDenizenManager.getScreenName(), 1, 25>
  [ 80] objcall 290 ............................. oPossessionManager.getPossessionsInBackpack(oDenizenManager.getScreenName(), 1, 25)
  [ 83] pop 1
  [ 85] ret
end

on opencdplayer me
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 161 ............................ <"openCdPlayer()">
  [  4] pusharglistnoret 2 ...................... <me, "openCdPlayer()">
  [  6] objcall 1 ............................... me.debug("openCdPlayer()")
  [  8] getparam 0 .............................. <me>
  [ 10] getobjprop 312 .......................... <me.oCdplayer>
  [ 13] pusharglist 1 ........................... <me.oCdplayer>
  [ 15] extcall 87 .............................. <voidp(me.oCdplayer)>
  [ 17] not ..................................... <not voidp(me.oCdplayer)>
  [ 18] jmpifz [ 30] ............................ if not voidp(me.oCdplayer) then
  [ 21] getparam 0 .............................. <me>
  [ 23] getchainedprop 312 ...................... <me.oCdplayer>
  [ 26] pusharglistnoret 1 ...................... <me.oCdplayer>
  [ 28] objcall 180 ............................. me.oCdplayer.closeWindow()
  [ 30] getparam 0 .............................. <me>
  [ 32] pushcons 162 ............................ <"_CDPLAYER_">
  [ 34] pusharglist 1 ........................... <"_CDPLAYER_">
  [ 36] extcall 92 .............................. <script("_CDPLAYER_")>
  [ 38] pusharglist 1 ........................... <script("_CDPLAYER_")>
  [ 40] objcall 0 ............................... <script("_CDPLAYER_").new()>
  [ 42] setobjprop 312 .......................... me.oCdplayer = script("_CDPLAYER_").new()
  [ 45] getglobal 289 ........................... <oPossessionManager>
  [ 48] getglobal 118 ........................... <oDenizenManager>
  [ 50] pusharglist 1 ........................... <oDenizenManager>
  [ 52] objcall 197 ............................. <oDenizenManager.getScreenName()>
  [ 54] pusharglistnoret 2 ...................... <oPossessionManager, oDenizenManager.getScreenName()>
  [ 56] objcall 313 ............................. oPossessionManager.getBurnedCDsInBackPack(oDenizenManager.getScreenName())
  [ 59] getparam 0 .............................. <me>
  [ 61] getobjprop 312 .......................... <me.oCdplayer>
  [ 64] pusharglistnoret 1 ...................... <me.oCdplayer>
  [ 66] extcall 78 .............................. return me.oCdplayer
  [ 68] ret
end

on closeCdPlayer me
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 163 ............................ <"closeCdPlayer()">
  [  4] pusharglistnoret 2 ...................... <me, "closeCdPlayer()">
  [  6] objcall 1 ............................... me.debug("closeCdPlayer()")
  [  8] getparam 0 .............................. <me>
  [ 10] getobjprop 312 .......................... <me.oCdplayer>
  [ 13] pusharglist 1 ........................... <me.oCdplayer>
  [ 15] extcall 87 .............................. <voidp(me.oCdplayer)>
  [ 17] jmpifz [ 24] ............................ if voidp(me.oCdplayer) then
  [ 20] pusharglistnoret 0 ...................... <>
  [ 22] extcall 78 .............................. return 
  [ 24] getparam 0 .............................. <me>
  [ 26] getchainedprop 312 ...................... <me.oCdplayer>
  [ 29] pusharglistnoret 1 ...................... <me.oCdplayer>
  [ 31] objcall 180 ............................. me.oCdplayer.closeWindow()
  [ 33] ret
end

on getcdplayer me
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 164 ............................ <"getCdPlayer()">
  [  4] pusharglistnoret 2 ...................... <me, "getCdPlayer()">
  [  6] objcall 1 ............................... me.debug("getCdPlayer()")
  [  8] getparam 0 .............................. <me>
  [ 10] getobjprop 312 .......................... <me.oCdplayer>
  [ 13] pusharglistnoret 1 ...................... <me.oCdplayer>
  [ 15] extcall 78 .............................. return me.oCdplayer
  [ 17] ret
end

on getBurnedCdsInBackpack_Result me, iError, aCds
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 165 ............................ <"getBurnedCdsInBackpack_Result()">
  [  4] pushcons 166 ............................ <"iError: ">
  [  6] joinstr ................................. <"getBurnedCdsInBackpack_Result()" & "iError: ">
  [  7] getparam 1 .............................. <iError>
  [  9] joinstr ................................. <"getBurnedCdsInBackpack_Result()" & "iError: " & iError>
  [ 10] pushcons 167 ............................ <"aCds: ">
  [ 12] joinstr ................................. <"getBurnedCdsInBackpack_Result()" & "iError: " & iError & "aCds: ">
  [ 13] getparam 2 .............................. <aCds>
  [ 15] joinstr ................................. <"getBurnedCdsInBackpack_Result()" & "iError: " & iError & "aCds: " & aCds>
  [ 16] pusharglistnoret 2 ...................... <me, "getBurnedCdsInBackpack_Result()" & "iError: " & iError & "aCds: " & aCds>
  [ 18] objcall 1 ............................... me.debug("getBurnedCdsInBackpack_Result()" & "iError: " & iError & "aCds: " & aCds)
  [ 20] getparam 1 .............................. <iError>
  [ 22] peek 0 .................................. case iError of
  [ 24] pushzero ................................ <0>
  [ 25] eq
  [ 26] jmpifz [ 98] ............................ (case) 0:
  [ 29] getparam 2 .............................. <aCds>
  [ 31] getobjprop 104 .......................... <aCds.count>
  [ 33] pushzero ................................ <0>
  [ 34] eq ...................................... <aCds.count = 0>
  [ 35] jmpifz [ 59] ............................ if aCds.count = 0 then / else
  [ 38] getglobal 314 ........................... <oStudio>
  [ 41] pusharglistnoret 1 ...................... <oStudio>
  [ 43] objcall 315 ............................. oStudio.sendCdStop()
  [ 46] getparam 0 .............................. <me>
  [ 48] pushcons 168 ............................ <"NOCD_TITLE">
  [ 50] pushcons 169 ............................ <"NOCD_DESC">
  [ 52] pusharglistnoret 3 ...................... <me, "NOCD_TITLE", "NOCD_DESC">
  [ 54] objcall 10 .............................. me.alert("NOCD_TITLE", "NOCD_DESC")
  [ 56] jmp [ 98]
  [ 59] getparam 0 .............................. <me>
  [ 61] getchainedprop 312 ...................... <me.oCdplayer>
  [ 64] pusharglist 1 ........................... <me.oCdplayer>
  [ 66] objcall 316 ............................. <me.oCdplayer.getOpenWindow()>
  [ 69] getchainedprop 96 ....................... <me.oCdplayer.getOpenWindow().pScrollingLists>
  [ 71] getchainedprop 317 ...................... <me.oCdplayer.getOpenWindow().pScrollingLists.songslist>
  [ 74] getparam 2 .............................. <aCds>
  [ 76] setobjprop 318 .......................... me.oCdplayer.getOpenWindow().pScrollingLists.songslist.pSongsData = aCds
  [ 79] getparam 0 .............................. <me>
  [ 81] getchainedprop 312 ...................... <me.oCdplayer>
  [ 84] pusharglist 1 ........................... <me.oCdplayer>
  [ 86] objcall 316 ............................. <me.oCdplayer.getOpenWindow()>
  [ 89] getchainedprop 96 ....................... <me.oCdplayer.getOpenWindow().pScrollingLists>
  [ 91] getchainedprop 317 ...................... <me.oCdplayer.getOpenWindow().pScrollingLists.songslist>
  [ 94] pusharglistnoret 1 ...................... <me.oCdplayer.getOpenWindow().pScrollingLists.songslist>
  [ 96] objcall 111 ............................. me.oCdplayer.getOpenWindow().pScrollingLists.songslist.updatecontent()
  [ 98] pop 1
  [100] ret
end

on openJukebox me
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 170 ............................ <"openjukebox()">
  [  4] pusharglistnoret 2 ...................... <me, "openjukebox()">
  [  6] objcall 1 ............................... me.debug("openjukebox()")
  [  8] getparam 0 .............................. <me>
  [ 10] getobjprop 320 .......................... <me.oJukebox>
  [ 13] pusharglist 1 ........................... <me.oJukebox>
  [ 15] extcall 87 .............................. <voidp(me.oJukebox)>
  [ 17] not ..................................... <not voidp(me.oJukebox)>
  [ 18] jmpifz [ 30] ............................ if not voidp(me.oJukebox) then
  [ 21] getparam 0 .............................. <me>
  [ 23] getchainedprop 320 ...................... <me.oJukebox>
  [ 26] pusharglistnoret 1 ...................... <me.oJukebox>
  [ 28] objcall 180 ............................. me.oJukebox.closeWindow()
  [ 30] getparam 0 .............................. <me>
  [ 32] pushcons 171 ............................ <"_JUKEBOX_">
  [ 34] pusharglist 1 ........................... <"_JUKEBOX_">
  [ 36] extcall 92 .............................. <script("_JUKEBOX_")>
  [ 38] pusharglist 1 ........................... <script("_JUKEBOX_")>
  [ 40] objcall 0 ............................... <script("_JUKEBOX_").new()>
  [ 42] setobjprop 320 .......................... me.oJukebox = script("_JUKEBOX_").new()
  [ 45] getparam 0 .............................. <me>
  [ 47] getobjprop 320 .......................... <me.oJukebox>
  [ 50] pusharglistnoret 1 ...................... <me.oJukebox>
  [ 52] extcall 78 .............................. return me.oJukebox
  [ 54] ret
end

on openjukeboxplayer me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 320 .......................... <me.oJukebox>
  [  5] pusharglist 1 ........................... <me.oJukebox>
  [  7] extcall 87 .............................. <voidp(me.oJukebox)>
  [  9] not ..................................... <not voidp(me.oJukebox)>
  [ 10] jmpifz [ 22] ............................ if not voidp(me.oJukebox) then
  [ 13] getparam 0 .............................. <me>
  [ 15] getchainedprop 320 ...................... <me.oJukebox>
  [ 18] pusharglistnoret 1 ...................... <me.oJukebox>
  [ 20] objcall 180 ............................. me.oJukebox.closeWindow()
  [ 22] getparam 0 .............................. <me>
  [ 24] pushcons 171 ............................ <"_JUKEBOX_">
  [ 26] pusharglist 1 ........................... <"_JUKEBOX_">
  [ 28] extcall 92 .............................. <script("_JUKEBOX_")>
  [ 30] pusharglist 1 ........................... <script("_JUKEBOX_")>
  [ 32] objcall 0 ............................... <script("_JUKEBOX_").new()>
  [ 34] setobjprop 320 .......................... me.oJukebox = script("_JUKEBOX_").new()
  [ 37] getparam 0 .............................. <me>
  [ 39] getchainedprop 320 ...................... <me.oJukebox>
  [ 42] pushcons 172 ............................ <"cc.infinite_jukebox.playback.window">
  [ 44] pusharglistnoret 2 ...................... <me.oJukebox, "cc.infinite_jukebox.playback.window">
  [ 46] objcall 321 ............................. me.oJukebox.openWindow("cc.infinite_jukebox.playback.window")
  [ 49] ret
end

on closeJukebox me
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 173 ............................ <"closeJukebox()">
  [  4] pusharglistnoret 2 ...................... <me, "closeJukebox()">
  [  6] objcall 1 ............................... me.debug("closeJukebox()")
  [  8] getparam 0 .............................. <me>
  [ 10] getobjprop 320 .......................... <me.oJukebox>
  [ 13] pusharglist 1 ........................... <me.oJukebox>
  [ 15] extcall 87 .............................. <voidp(me.oJukebox)>
  [ 17] jmpifz [ 24] ............................ if voidp(me.oJukebox) then
  [ 20] pusharglistnoret 0 ...................... <>
  [ 22] extcall 78 .............................. return 
  [ 24] getparam 0 .............................. <me>
  [ 26] getchainedprop 320 ...................... <me.oJukebox>
  [ 29] pusharglistnoret 1 ...................... <me.oJukebox>
  [ 31] objcall 180 ............................. me.oJukebox.closeWindow()
  [ 33] ret
end

on getJukebox me
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 174 ............................ <"getJukebox()">
  [  4] pusharglistnoret 2 ...................... <me, "getJukebox()">
  [  6] objcall 1 ............................... me.debug("getJukebox()")
  [  8] getparam 0 .............................. <me>
  [ 10] getobjprop 320 .......................... <me.oJukebox>
  [ 13] pusharglistnoret 1 ...................... <me.oJukebox>
  [ 15] extcall 78 .............................. return me.oJukebox
  [ 17] ret
end

on getLoader me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 322 .......................... <me.oLoader>
  [  5] pusharglist 1 ........................... <me.oLoader>
  [  7] extcall 87 .............................. <voidp(me.oLoader)>
  [  9] jmpifz [ 27] ............................ if voidp(me.oLoader) then
  [ 12] getparam 0 .............................. <me>
  [ 14] pushcons 175 ............................ <"_Loader_">
  [ 16] pusharglist 1 ........................... <"_Loader_">
  [ 18] extcall 92 .............................. <script("_Loader_")>
  [ 20] pusharglist 1 ........................... <script("_Loader_")>
  [ 22] objcall 0 ............................... <script("_Loader_").new()>
  [ 24] setobjprop 322 .......................... me.oLoader = script("_Loader_").new()
  [ 27] getparam 0 .............................. <me>
  [ 29] getobjprop 322 .......................... <me.oLoader>
  [ 32] pusharglistnoret 1 ...................... <me.oLoader>
  [ 34] extcall 78 .............................. return me.oLoader
  [ 36] ret
end

on opentrader me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 323 .......................... <me.oTrader>
  [  5] pusharglist 1 ........................... <me.oTrader>
  [  7] extcall 87 .............................. <voidp(me.oTrader)>
  [  9] not ..................................... <not voidp(me.oTrader)>
  [ 10] jmpifz [ 22] ............................ if not voidp(me.oTrader) then
  [ 13] getparam 0 .............................. <me>
  [ 15] getchainedprop 323 ...................... <me.oTrader>
  [ 18] pusharglistnoret 1 ...................... <me.oTrader>
  [ 20] objcall 180 ............................. me.oTrader.closeWindow()
  [ 22] getparam 0 .............................. <me>
  [ 24] pushcons 176 ............................ <"_TRADER_">
  [ 26] pusharglist 1 ........................... <"_TRADER_">
  [ 28] extcall 92 .............................. <script("_TRADER_")>
  [ 30] pusharglist 1 ........................... <script("_TRADER_")>
  [ 32] objcall 0 ............................... <script("_TRADER_").new()>
  [ 34] setobjprop 323 .......................... me.oTrader = script("_TRADER_").new()
  [ 37] getparam 0 .............................. <me>
  [ 39] getobjprop 323 .......................... <me.oTrader>
  [ 42] pusharglistnoret 1 ...................... <me.oTrader>
  [ 44] extcall 78 .............................. return me.oTrader
  [ 46] ret
end

on getTrader me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 323 .......................... <me.oTrader>
  [  5] pusharglistnoret 1 ...................... <me.oTrader>
  [  7] extcall 78 .............................. return me.oTrader
  [  9] ret
end

on cancelTrade me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 323 .......................... <me.oTrader>
  [  5] pusharglist 1 ........................... <me.oTrader>
  [  7] extcall 87 .............................. <voidp(me.oTrader)>
  [  9] not ..................................... <not voidp(me.oTrader)>
  [ 10] jmpifz [ 31] ............................ if not voidp(me.oTrader) then
  [ 13] getparam 0 .............................. <me>
  [ 15] getchainedprop 323 ...................... <me.oTrader>
  [ 18] pusharglistnoret 1 ...................... <me.oTrader>
  [ 20] objcall 180 ............................. me.oTrader.closeWindow()
  [ 22] getparam 0 .............................. <me>
  [ 24] pusharglist 0 ........................... <>
  [ 26] extcall 212 ............................. <VOID>
  [ 28] setobjprop 323 .......................... me.oTrader = VOID
  [ 31] ret
end

on displayTrade me, lContent
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 323 .......................... <me.oTrader>
  [  5] pusharglist 1 ........................... <me.oTrader>
  [  7] extcall 87 .............................. <voidp(me.oTrader)>
  [  9] jmpifz [ 28] ............................ if voidp(me.oTrader) then
  [ 12] getglobal 324 ........................... <oIsoScene>
  [ 15] pushint8 1 .............................. <1>
  [ 17] pusharglistnoret 2 ...................... <oIsoScene, 1>
  [ 19] objcall 325 ............................. oIsoScene.dropSelectedItem(1)
  [ 22] getparam 0 .............................. <me>
  [ 24] pusharglistnoret 1 ...................... <me>
  [ 26] objcall 56 .............................. me.opentrader()
  [ 28] getparam 0 .............................. <me>
  [ 30] getchainedprop 323 ...................... <me.oTrader>
  [ 33] pusharglist 0 ........................... <>
  [ 35] extcall 212 ............................. <VOID>
  [ 37] getparam 1 .............................. <lContent>
  [ 39] pusharglistnoret 3 ...................... <me.oTrader, VOID, lContent>
  [ 41] objcall 326 ............................. me.oTrader.displayWindow(VOID, lContent)
  [ 44] ret
end

on displayVoteResults me, sAuthorScreenName, iThumbsUp, iThumbsDown, iDecibelsAwarded
  [  0] getglobal 178 ........................... <TextMgr>
  [  2] pushcons 177 ............................ <"THUMBS_UP_VOTES">
  [  4] pusharglist 2 ........................... <TextMgr, "THUMBS_UP_VOTES">
  [  6] objcall 179 ............................. <TextMgr.GetRefText("THUMBS_UP_VOTES")>
  [  8] setlocal 0 .............................. myphrase = TextMgr.GetRefText("THUMBS_UP_VOTES")
  [ 10] pushcons 178 ............................ <"{voteupnum}">
  [ 12] getlocal 0 .............................. <myphrase>
  [ 14] pusharglist 2 ........................... <"{voteupnum}", myphrase>
  [ 16] extcall 163 ............................. <offset("{voteupnum}", myphrase)>
  [ 18] setlocal 1 .............................. mychar = offset("{voteupnum}", myphrase)
  [ 20] getlocal 1 .............................. <mychar>
  [ 22] getlocal 1 .............................. <mychar>
  [ 24] pushcons 178 ............................ <"{voteupnum}">
  [ 26] pusharglist 1 ........................... <"{voteupnum}">
  [ 28] extcall 165 ............................. <length("{voteupnum}")>
  [ 30] add ..................................... <mychar + length("{voteupnum}")>
  [ 31] pushint8 1 .............................. <1>
  [ 33] sub ..................................... <mychar + length("{voteupnum}") - 1>
  [ 34] pushzero ................................ <0>
  [ 35] pushzero ................................ <0>
  [ 36] pushzero ................................ <0>
  [ 37] pushzero ................................ <0>
  [ 38] pushzero ................................ <0>
  [ 39] pushzero ................................ <0>
  [ 40] pushzero ................................ <0>
  [ 41] deletechunk 5 ........................... delete char mychar to mychar + length("{voteupnum}") - 1 of myphrase
  [ 43] getparam 2 .............................. <iThumbsUp>
  [ 45] pushcons 31 ............................. <" ">
  [ 47] joinstr ................................. <iThumbsUp & " ">
  [ 48] getlocal 1 .............................. <mychar>
  [ 50] pushzero ................................ <0>
  [ 51] pushzero ................................ <0>
  [ 52] pushzero ................................ <0>
  [ 53] pushzero ................................ <0>
  [ 54] pushzero ................................ <0>
  [ 55] pushzero ................................ <0>
  [ 56] pushzero ................................ <0>
  [ 57] pushzero ................................ <0>
  [ 58] putchunk 21 ............................. put iThumbsUp & " " into char mychar of myphrase
  [ 60] getlocal 0 .............................. <myphrase>
  [ 62] pushcons 179 ............................ <RETURN>
  [ 64] joinstr ................................. <myphrase & RETURN>
  [ 65] setlocal 2 .............................. mytext = myphrase & RETURN
  [ 67] getglobal 178 ........................... <TextMgr>
  [ 69] pushcons 180 ............................ <"THUMBS_DOWN_VOTES">
  [ 71] pusharglist 2 ........................... <TextMgr, "THUMBS_DOWN_VOTES">
  [ 73] objcall 179 ............................. <TextMgr.GetRefText("THUMBS_DOWN_VOTES")>
  [ 75] setlocal 0 .............................. myphrase = TextMgr.GetRefText("THUMBS_DOWN_VOTES")
  [ 77] pushcons 181 ............................ <"{votedownnum}">
  [ 79] getlocal 0 .............................. <myphrase>
  [ 81] pusharglist 2 ........................... <"{votedownnum}", myphrase>
  [ 83] extcall 163 ............................. <offset("{votedownnum}", myphrase)>
  [ 85] setlocal 1 .............................. mychar = offset("{votedownnum}", myphrase)
  [ 87] getlocal 1 .............................. <mychar>
  [ 89] getlocal 1 .............................. <mychar>
  [ 91] pushcons 181 ............................ <"{votedownnum}">
  [ 93] pusharglist 1 ........................... <"{votedownnum}">
  [ 95] extcall 165 ............................. <length("{votedownnum}")>
  [ 97] add ..................................... <mychar + length("{votedownnum}")>
  [ 98] pushint8 1 .............................. <1>
  [100] sub ..................................... <mychar + length("{votedownnum}") - 1>
  [101] pushzero ................................ <0>
  [102] pushzero ................................ <0>
  [103] pushzero ................................ <0>
  [104] pushzero ................................ <0>
  [105] pushzero ................................ <0>
  [106] pushzero ................................ <0>
  [107] pushzero ................................ <0>
  [108] deletechunk 5 ........................... delete char mychar to mychar + length("{votedownnum}") - 1 of myphrase
  [110] getparam 3 .............................. <iThumbsDown>
  [112] pushcons 31 ............................. <" ">
  [114] joinstr ................................. <iThumbsDown & " ">
  [115] getlocal 1 .............................. <mychar>
  [117] pushzero ................................ <0>
  [118] pushzero ................................ <0>
  [119] pushzero ................................ <0>
  [120] pushzero ................................ <0>
  [121] pushzero ................................ <0>
  [122] pushzero ................................ <0>
  [123] pushzero ................................ <0>
  [124] pushzero ................................ <0>
  [125] putchunk 21 ............................. put iThumbsDown & " " into char mychar of myphrase
  [127] getlocal 2 .............................. <mytext>
  [129] getlocal 0 .............................. <myphrase>
  [131] joinstr ................................. <mytext & myphrase>
  [132] pushcons 179 ............................ <RETURN>
  [134] joinstr ................................. <mytext & myphrase & RETURN>
  [135] pushcons 179 ............................ <RETURN>
  [137] joinstr ................................. <mytext & myphrase & RETURN & RETURN>
  [138] setlocal 2 .............................. mytext = mytext & myphrase & RETURN & RETURN
  [140] getglobal 178 ........................... <TextMgr>
  [142] pushcons 182 ............................ <"DECIBEL_RESULT">
  [144] pusharglist 2 ........................... <TextMgr, "DECIBEL_RESULT">
  [146] objcall 179 ............................. <TextMgr.GetRefText("DECIBEL_RESULT")>
  [148] setlocal 0 .............................. myphrase = TextMgr.GetRefText("DECIBEL_RESULT")
  [150] pushcons 183 ............................ <"{numdecibel}">
  [152] getlocal 0 .............................. <myphrase>
  [154] pusharglist 2 ........................... <"{numdecibel}", myphrase>
  [156] extcall 163 ............................. <offset("{numdecibel}", myphrase)>
  [158] setlocal 1 .............................. mychar = offset("{numdecibel}", myphrase)
  [160] getlocal 1 .............................. <mychar>
  [162] getlocal 1 .............................. <mychar>
  [164] pushcons 183 ............................ <"{numdecibel}">
  [166] pusharglist 1 ........................... <"{numdecibel}">
  [168] extcall 165 ............................. <length("{numdecibel}")>
  [170] add ..................................... <mychar + length("{numdecibel}")>
  [171] pushint8 1 .............................. <1>
  [173] sub ..................................... <mychar + length("{numdecibel}") - 1>
  [174] pushzero ................................ <0>
  [175] pushzero ................................ <0>
  [176] pushzero ................................ <0>
  [177] pushzero ................................ <0>
  [178] pushzero ................................ <0>
  [179] pushzero ................................ <0>
  [180] pushzero ................................ <0>
  [181] deletechunk 5 ........................... delete char mychar to mychar + length("{numdecibel}") - 1 of myphrase
  [183] getparam 4 .............................. <iDecibelsAwarded>
  [185] pushcons 31 ............................. <" ">
  [187] joinstr ................................. <iDecibelsAwarded & " ">
  [188] getlocal 1 .............................. <mychar>
  [190] pushzero ................................ <0>
  [191] pushzero ................................ <0>
  [192] pushzero ................................ <0>
  [193] pushzero ................................ <0>
  [194] pushzero ................................ <0>
  [195] pushzero ................................ <0>
  [196] pushzero ................................ <0>
  [197] pushzero ................................ <0>
  [198] putchunk 21 ............................. put iDecibelsAwarded & " " into char mychar of myphrase
  [200] getlocal 2 .............................. <mytext>
  [202] getlocal 0 .............................. <myphrase>
  [204] joinstr ................................. <mytext & myphrase>
  [205] setlocal 2 .............................. mytext = mytext & myphrase
  [207] getparam 0 .............................. <me>
  [209] pushcons 184 ............................ <"RESULTS_TITLE">
  [211] getlocal 2 .............................. <mytext>
  [213] pusharglistnoret 3 ...................... <me, "RESULTS_TITLE", mytext>
  [215] objcall 10 .............................. me.alert("RESULTS_TITLE", mytext)
  [217] ret
end

on displayDrinkCoke me, iPoints
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 185 ............................ <"cc_capdecibels.window">
  [  4] pusharglist 2 ........................... <me, "cc_capdecibels.window">
  [  6] objcall 2 ............................... <me.newwindow("cc_capdecibels.window")>
  [  8] setlocal 0 .............................. capwindow = me.newwindow("cc_capdecibels.window")
  [ 10] pushcons 186 ............................ <"captimer">
  [ 12] pusharglist 1 ........................... <"captimer">
  [ 14] extcall 92 .............................. <script("captimer")>
  [ 16] getlocal 0 .............................. <capwindow>
  [ 18] pusharglist 2 ........................... <script("captimer"), capwindow>
  [ 20] extcall 0 ............................... <new(script("captimer"), capwindow)>
  [ 22] setlocal 1 .............................. captimer = new(script("captimer"), capwindow)
  [ 24] getglobal 178 ........................... <TextMgr>
  [ 26] pushcons 187 ............................ <"DRINK_COKE">
  [ 28] pusharglist 2 ........................... <TextMgr, "DRINK_COKE">
  [ 30] objcall 179 ............................. <TextMgr.GetRefText("DRINK_COKE")>
  [ 32] setlocal 2 .............................. mytext = TextMgr.GetRefText("DRINK_COKE")
  [ 34] pushcons 188 ............................ <"{points}">
  [ 36] getlocal 2 .............................. <mytext>
  [ 38] pusharglist 2 ........................... <"{points}", mytext>
  [ 40] extcall 163 ............................. <offset("{points}", mytext)>
  [ 42] setlocal 3 .............................. mychar = offset("{points}", mytext)
  [ 44] getlocal 3 .............................. <mychar>
  [ 46] getlocal 3 .............................. <mychar>
  [ 48] pushcons 188 ............................ <"{points}">
  [ 50] pusharglist 1 ........................... <"{points}">
  [ 52] extcall 165 ............................. <length("{points}")>
  [ 54] pushint8 1 .............................. <1>
  [ 56] sub ..................................... <length("{points}") - 1>
  [ 57] add ..................................... <mychar + (length("{points}") - 1)>
  [ 58] pushzero ................................ <0>
  [ 59] pushzero ................................ <0>
  [ 60] pushzero ................................ <0>
  [ 61] pushzero ................................ <0>
  [ 62] pushzero ................................ <0>
  [ 63] pushzero ................................ <0>
  [ 64] pushint8 2 .............................. <2>
  [ 66] deletechunk 5 ........................... delete char mychar to mychar + (length("{points}") - 1) of mytext
  [ 68] getparam 1 .............................. <iPoints>
  [ 70] pushcons 31 ............................. <" ">
  [ 72] joinstr ................................. <iPoints & " ">
  [ 73] getlocal 3 .............................. <mychar>
  [ 75] pushzero ................................ <0>
  [ 76] pushzero ................................ <0>
  [ 77] pushzero ................................ <0>
  [ 78] pushzero ................................ <0>
  [ 79] pushzero ................................ <0>
  [ 80] pushzero ................................ <0>
  [ 81] pushzero ................................ <0>
  [ 82] pushint8 2 .............................. <2>
  [ 84] putchunk 21 ............................. put iPoints & " " into char mychar of mytext
  [ 86] pushcons 189 ............................ <"cc.capdecibel.text">
  [ 88] pusharglist 1 ........................... <"cc.capdecibel.text">
  [ 90] extcall 101 ............................. <member("cc.capdecibel.text")>
  [ 92] getlocal 2 .............................. <mytext>
  [ 94] setobjprop 129 .......................... member("cc.capdecibel.text").text = mytext
  [ 96] getparam 0 .............................. <me>
  [ 98] pushcons 190 ............................ <"text member: ">
  [100] pushcons 189 ............................ <"cc.capdecibel.text">
  [102] pusharglist 1 ........................... <"cc.capdecibel.text">
  [104] extcall 101 ............................. <member("cc.capdecibel.text")>
  [106] joinstr ................................. <"text member: " & member("cc.capdecibel.text")>
  [107] pushint8 1 .............................. <1>
  [109] pusharglistnoret 3 ...................... <me, "text member: " & member("cc.capdecibel.text"), 1>
  [111] objcall 1 ............................... me.debug("text member: " & member("cc.capdecibel.text"), 1)
  [113] ret
end

on displayWallReplace me, iPosId, iWallTexture, iWallColor, iFloorTexture, iFloorColor
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 191 ............................ <"confirm_texture.window">
  [  4] pusharglistnoret 2 ...................... <me, "confirm_texture.window">
  [  6] objcall 2 ............................... me.newwindow("confirm_texture.window")
  [  8] pusharglistnoret 0 ...................... <>
  [ 10] extcall 187 ............................. updateStage()
  [ 12] pushsymb 336 ............................ <#setfloor>
  [ 15] getparam 4 .............................. <iFloorTexture>
  [ 17] getparam 5 .............................. <iFloorColor>
  [ 19] pusharglistnoret 3 ...................... <#setfloor, iFloorTexture, iFloorColor>
  [ 21] extcall 188 ............................. sendAllSprites(#setfloor, iFloorTexture, iFloorColor)
  [ 23] pushsymb 337 ............................ <#setwalls>
  [ 26] getparam 2 .............................. <iWallTexture>
  [ 28] getparam 3 .............................. <iWallColor>
  [ 30] pusharglistnoret 3 ...................... <#setwalls, iWallTexture, iWallColor>
  [ 32] extcall 188 ............................. sendAllSprites(#setwalls, iWallTexture, iWallColor)
  [ 34] pushsymb 338 ............................ <#displayPattern>
  [ 37] pusharglistnoret 1 ...................... <#displayPattern>
  [ 39] extcall 188 ............................. sendAllSprites(#displayPattern)
  [ 41] pushcons 192 ............................ <"cc.confirm.texture">
  [ 43] pusharglist 1 ........................... <"cc.confirm.texture">
  [ 45] extcall 101 ............................. <member("cc.confirm.texture")>
  [ 47] getglobal 178 ........................... <TextMgr>
  [ 49] pushcons 193 ............................ <"REPLACE_WALL">
  [ 51] pusharglist 2 ........................... <TextMgr, "REPLACE_WALL">
  [ 53] objcall 179 ............................. <TextMgr.GetRefText("REPLACE_WALL")>
  [ 55] setobjprop 129 .......................... member("cc.confirm.texture").text = TextMgr.GetRefText("REPLACE_WALL")
  [ 57] pushsymb 339 ............................ <#getokreplace>
  [ 60] pusharglist 1 ........................... <#getokreplace>
  [ 62] extcall 188 ............................. <sendAllSprites(#getokreplace)>
  [ 64] setlocal 0 .............................. okbutton = sendAllSprites(#getokreplace)
  [ 66] getlocal 0 .............................. <okbutton>
  [ 68] pusharglist 1 ........................... <okbutton>
  [ 70] extcall 177 ............................. <sprite(okbutton)>
  [ 72] pushsymb 340 ............................ <#wall>
  [ 75] setobjprop 341 .......................... sprite(okbutton).pType = #wall
  [ 78] getlocal 0 .............................. <okbutton>
  [ 80] pusharglist 1 ........................... <okbutton>
  [ 82] extcall 177 ............................. <sprite(okbutton)>
  [ 84] getparam 1 .............................. <iPosId>
  [ 86] setobjprop 342 .......................... sprite(okbutton).iPosId = iPosId
  [ 89] getlocal 0 .............................. <okbutton>
  [ 91] pusharglist 1 ........................... <okbutton>
  [ 93] extcall 177 ............................. <sprite(okbutton)>
  [ 95] getparam 2 .............................. <iWallTexture>
  [ 97] setobjprop 343 .......................... sprite(okbutton).iWallTexture = iWallTexture
  [100] getlocal 0 .............................. <okbutton>
  [102] pusharglist 1 ........................... <okbutton>
  [104] extcall 177 ............................. <sprite(okbutton)>
  [106] getparam 3 .............................. <iWallColor>
  [108] setobjprop 344 .......................... sprite(okbutton).iWallColor = iWallColor
  [111] ret
end

on displayFloorReplace me, iPosId, iWallTexture, iWallColor, iFloorTexture, iFloorColor
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 191 ............................ <"confirm_texture.window">
  [  4] pusharglistnoret 2 ...................... <me, "confirm_texture.window">
  [  6] objcall 2 ............................... me.newwindow("confirm_texture.window")
  [  8] pusharglistnoret 0 ...................... <>
  [ 10] extcall 187 ............................. updateStage()
  [ 12] pushsymb 336 ............................ <#setfloor>
  [ 15] getparam 4 .............................. <iFloorTexture>
  [ 17] getparam 5 .............................. <iFloorColor>
  [ 19] pusharglistnoret 3 ...................... <#setfloor, iFloorTexture, iFloorColor>
  [ 21] extcall 188 ............................. sendAllSprites(#setfloor, iFloorTexture, iFloorColor)
  [ 23] pushsymb 337 ............................ <#setwalls>
  [ 26] getparam 2 .............................. <iWallTexture>
  [ 28] getparam 3 .............................. <iWallColor>
  [ 30] pusharglistnoret 3 ...................... <#setwalls, iWallTexture, iWallColor>
  [ 32] extcall 188 ............................. sendAllSprites(#setwalls, iWallTexture, iWallColor)
  [ 34] pushsymb 338 ............................ <#displayPattern>
  [ 37] pusharglistnoret 1 ...................... <#displayPattern>
  [ 39] extcall 188 ............................. sendAllSprites(#displayPattern)
  [ 41] pushcons 192 ............................ <"cc.confirm.texture">
  [ 43] pusharglist 1 ........................... <"cc.confirm.texture">
  [ 45] extcall 101 ............................. <member("cc.confirm.texture")>
  [ 47] getglobal 178 ........................... <TextMgr>
  [ 49] pushcons 194 ............................ <"REPLACE_FLOOR">
  [ 51] pusharglist 2 ........................... <TextMgr, "REPLACE_FLOOR">
  [ 53] objcall 179 ............................. <TextMgr.GetRefText("REPLACE_FLOOR")>
  [ 55] setobjprop 129 .......................... member("cc.confirm.texture").text = TextMgr.GetRefText("REPLACE_FLOOR")
  [ 57] pushsymb 339 ............................ <#getokreplace>
  [ 60] pusharglist 1 ........................... <#getokreplace>
  [ 62] extcall 188 ............................. <sendAllSprites(#getokreplace)>
  [ 64] setlocal 0 .............................. okbutton = sendAllSprites(#getokreplace)
  [ 66] getlocal 0 .............................. <okbutton>
  [ 68] pusharglist 1 ........................... <okbutton>
  [ 70] extcall 177 ............................. <sprite(okbutton)>
  [ 72] pushsymb 347 ............................ <#floor>
  [ 75] setobjprop 341 .......................... sprite(okbutton).pType = #floor
  [ 78] getlocal 0 .............................. <okbutton>
  [ 80] pusharglist 1 ........................... <okbutton>
  [ 82] extcall 177 ............................. <sprite(okbutton)>
  [ 84] getparam 1 .............................. <iPosId>
  [ 86] setobjprop 342 .......................... sprite(okbutton).iPosId = iPosId
  [ 89] getlocal 0 .............................. <okbutton>
  [ 91] pusharglist 1 ........................... <okbutton>
  [ 93] extcall 177 ............................. <sprite(okbutton)>
  [ 95] getparam 4 .............................. <iFloorTexture>
  [ 97] setobjprop 345 .......................... sprite(okbutton).iFloorTexture = iFloorTexture
  [100] getlocal 0 .............................. <okbutton>
  [102] pusharglist 1 ........................... <okbutton>
  [104] extcall 177 ............................. <sprite(okbutton)>
  [106] getparam 5 .............................. <iFloorColor>
  [108] setobjprop 346 .......................... sprite(okbutton).iFloorColor = iFloorColor
  [111] ret
end

on updatefloor me, iFloorTexture, iFloorColor
  [  0] pusharglist 0 ........................... <[:]>
  [  2] pushproplist ............................ <[:]>
  [  3] setlocal 0 .............................. aPatterns = [:]
  [  5] pushcons 195 ............................ <"Catalogue">
  [  7] setlocal 1 .............................. sAssetCast = "Catalogue"
  [  9] pushcons 196 ............................ <"cat_floorpattern_patterns_index">
  [ 11] getlocal 1 .............................. <sAssetCast>
  [ 13] pusharglist 2 ........................... <"cat_floorpattern_patterns_index", sAssetCast>
  [ 15] extcall 101 ............................. <member("cat_floorpattern_patterns_index", sAssetCast)>
  [ 17] setlocal 2 .............................. oPatternMember = member("cat_floorpattern_patterns_index", sAssetCast)
  [ 19] getlocal 2 .............................. <oPatternMember>
  [ 21] getobjprop 129 .......................... <oPatternMember.text>
  [ 23] setlocal 3 .............................. sPatternText = oPatternMember.text
  [ 25] pushint8 1 .............................. <1>
  [ 27] setlocal 4
  [ 29] getlocal 4
  [ 31] getlocal 3 .............................. <sPatternText>
  [ 33] pushsymb 348 ............................ <#lines>
  [ 36] pusharglist 2 ........................... <sPatternText, #lines>
  [ 38] objcall 104 ............................. <sPatternText.lines.count>
  [ 40] lteq
  [ 41] jmpifz [172] ............................ repeat with i = 1 to sPatternText.lines.count
  [ 44] getlocal 3 .............................. <sPatternText>
  [ 46] pushsymb 107 ............................ <#line>
  [ 48] getlocal 4 .............................. <i>
  [ 50] pusharglist 3 ........................... <sPatternText, #line, i>
  [ 52] objcall 108 ............................. <sPatternText.line[i]>
  [ 54] setlocal 5 .............................. sPatternLine = sPatternText.line[i]
  [ 56] getlocal 5 .............................. <sPatternLine>
  [ 58] pusharglist 1 ........................... <sPatternLine>
  [ 60] extcall 106 ............................. <value(sPatternLine)>
  [ 62] setlocal 6 .............................. aPatternList = value(sPatternLine)
  [ 64] getlocal 6 .............................. <aPatternList>
  [ 66] getobjprop 90 ........................... <aPatternList.name>
  [ 68] setlocal 7 .............................. sPatternName = aPatternList.name
  [ 70] getlocal 6 .............................. <aPatternList>
  [ 72] getobjprop 202 .......................... <aPatternList.field>
  [ 74] setlocal 8 .............................. sColorField = aPatternList.field
  [ 76] pusharglist 0 ........................... <[]>
  [ 78] pushlist ................................ <[]>
  [ 79] setlocal 9 .............................. aColors = []
  [ 81] getlocal 8 .............................. <sColorField>
  [ 83] getlocal 1 .............................. <sAssetCast>
  [ 85] pusharglist 2 ........................... <sColorField, sAssetCast>
  [ 87] extcall 101 ............................. <member(sColorField, sAssetCast)>
  [ 89] setlocal 10 ............................. oColorsMember = member(sColorField, sAssetCast)
  [ 91] getlocal 10 ............................. <oColorsMember>
  [ 93] getobjprop 129 .......................... <oColorsMember.text>
  [ 95] setlocal 11 ............................. sColorsText = oColorsMember.text
  [ 97] pushint8 1 .............................. <1>
  [ 99] setlocal 12
  [101] getlocal 12
  [103] getlocal 11 ............................. <sColorsText>
  [105] pushsymb 348 ............................ <#lines>
  [108] pusharglist 2 ........................... <sColorsText, #lines>
  [110] objcall 104 ............................. <sColorsText.lines.count>
  [112] lteq
  [113] jmpifz [153] ............................ repeat with ii = 1 to sColorsText.lines.count
  [116] getlocal 11 ............................. <sColorsText>
  [118] pushsymb 107 ............................ <#line>
  [120] getlocal 12 ............................. <ii>
  [122] pusharglist 3 ........................... <sColorsText, #line, ii>
  [124] objcall 108 ............................. <sColorsText.line[ii]>
  [126] setlocal 13 ............................. sColorLine = sColorsText.line[ii]
  [128] getlocal 13 ............................. <sColorLine>
  [130] pusharglist 1 ........................... <sColorLine>
  [132] extcall 106 ............................. <value(sColorLine)>
  [134] setlocal 14 ............................. aColorsList = value(sColorLine)
  [136] getlocal 9 .............................. <aColors>
  [138] getlocal 14 ............................. <aColorsList>
  [140] pusharglistnoret 2 ...................... <aColors, aColorsList>
  [142] objcall 138 ............................. aColors.add(aColorsList)
  [144] pushint8 1
  [146] getlocal 12
  [148] add
  [149] setlocal 12
  [151] endrepeat [101]
  [153] getlocal 0 .............................. <aPatterns>
  [155] getlocal 7 .............................. <sPatternName>
  [157] getlocal 9 .............................. <aColors>
  [159] pusharglistnoret 3 ...................... <aPatterns, sPatternName, aColors>
  [161] objcall 93 .............................. aPatterns.addProp(sPatternName, aColors)
  [163] pushint8 1
  [165] getlocal 4
  [167] add
  [168] setlocal 4
  [170] endrepeat [ 29]
  [172] pushsymb 349 ............................ <#getFloorShapeSpritereplace>
  [175] pusharglist 1 ........................... <#getFloorShapeSpritereplace>
  [177] extcall 188 ............................. <sendAllSprites(#getFloorShapeSpritereplace)>
  [179] setlocal 15 ............................. iFloorShapeSprite = sendAllSprites(#getFloorShapeSpritereplace)
  [181] pushsymb 350 ............................ <#getFloorTextureSpriteReplace>
  [184] pusharglist 1 ........................... <#getFloorTextureSpriteReplace>
  [186] extcall 188 ............................. <sendAllSprites(#getFloorTextureSpriteReplace)>
  [188] setlocal 16 ............................. iFloorTextureSprite = sendAllSprites(#getFloorTextureSpriteReplace)
  [190] getlocal 0 .............................. <aPatterns>
  [192] getparam 1 .............................. <iFloorTexture>
  [194] pusharglist 2 ........................... <aPatterns, iFloorTexture>
  [196] objcall 95 .............................. <aPatterns[iFloorTexture]>
  [198] getparam 2 .............................. <iFloorColor>
  [200] pusharglist 2 ........................... <aPatterns[iFloorTexture], iFloorColor>
  [202] objcall 95 .............................. <aPatterns[iFloorTexture][iFloorColor]>
  [204] setlocal 17 ............................. aColorData = aPatterns[iFloorTexture][iFloorColor]
  [206] getlocal 15 ............................. <iFloorShapeSprite>
  [208] pusharglist 1 ........................... <iFloorShapeSprite>
  [210] extcall 177 ............................. <sprite(iFloorShapeSprite)>
  [212] getchainedprop 101 ...................... <sprite(iFloorShapeSprite).member>
  [214] getlocal 17 ............................. <aColorData>
  [216] getobjprop 351 .......................... <aColorData.startcolor>
  [219] setobjprop 352 .......................... sprite(iFloorShapeSprite).member.fillColor = aColorData.startcolor
  [222] getlocal 15 ............................. <iFloorShapeSprite>
  [224] pusharglist 1 ........................... <iFloorShapeSprite>
  [226] extcall 177 ............................. <sprite(iFloorShapeSprite)>
  [228] getchainedprop 101 ...................... <sprite(iFloorShapeSprite).member>
  [230] getlocal 17 ............................. <aColorData>
  [232] getobjprop 353 .......................... <aColorData.endColor>
  [235] setobjprop 353 .......................... sprite(iFloorShapeSprite).member.endColor = aColorData.endColor
  [238] getlocal 15 ............................. <iFloorShapeSprite>
  [240] pusharglist 1 ........................... <iFloorShapeSprite>
  [242] extcall 177 ............................. <sprite(iFloorShapeSprite)>
  [244] getlocal 17 ............................. <aColorData>
  [246] getobjprop 354 .......................... <aColorData.shapeBlend>
  [249] setobjprop 355 .......................... sprite(iFloorShapeSprite).blend = aColorData.shapeBlend
  [252] getlocal 16 ............................. <iFloorTextureSprite>
  [254] pusharglist 1 ........................... <iFloorTextureSprite>
  [256] extcall 177 ............................. <sprite(iFloorTextureSprite)>
  [258] getchainedprop 101 ...................... <sprite(iFloorTextureSprite).member>
  [260] pushcons 197 ............................ <"cat_floor_">
  [262] getlocal 17 ............................. <aColorData>
  [264] getobjprop 356 .......................... <aColorData.palette>
  [267] joinstr ................................. <"cat_floor_" & aColorData.palette>
  [268] getlocal 1 .............................. <sAssetCast>
  [270] pusharglist 2 ........................... <"cat_floor_" & aColorData.palette, sAssetCast>
  [272] extcall 101 ............................. <member("cat_floor_" & aColorData.palette, sAssetCast)>
  [274] setobjprop 356 .......................... sprite(iFloorTextureSprite).member.palette = member("cat_floor_" & aColorData.palette, sAssetCast)
  [277] getlocal 15 ............................. <iFloorShapeSprite>
  [279] pusharglist 1 ........................... <iFloorShapeSprite>
  [281] extcall 177 ............................. <sprite(iFloorShapeSprite)>
  [283] getlocal 17 ............................. <aColorData>
  [285] getobjprop 357 .......................... <aColorData.texturecolor>
  [288] setobjprop 358 .......................... sprite(iFloorShapeSprite).color = aColorData.texturecolor
  [291] getlocal 16 ............................. <iFloorTextureSprite>
  [293] pusharglist 1 ........................... <iFloorTextureSprite>
  [295] extcall 177 ............................. <sprite(iFloorTextureSprite)>
  [297] getlocal 17 ............................. <aColorData>
  [299] getobjprop 359 .......................... <aColorData.textureBlend>
  [302] setobjprop 355 .......................... sprite(iFloorTextureSprite).blend = aColorData.textureBlend
  [305] ret
end

on updatewalls me, iPatternIndex, iColorIndex
  [  0] pushcons 195 ............................ <"Catalogue">
  [  2] setlocal 0 .............................. sAssetCast = "Catalogue"
  [  4] pushsymb 377 ............................ <#getLeftWallSpriteReplace>
  [  7] pusharglist 1 ........................... <#getLeftWallSpriteReplace>
  [  9] extcall 188 ............................. <sendAllSprites(#getLeftWallSpriteReplace)>
  [ 11] setlocal 1 .............................. iLeftWallSprite = sendAllSprites(#getLeftWallSpriteReplace)
  [ 13] pushsymb 378 ............................ <#getRightWallSpriteReplace>
  [ 16] pusharglist 1 ........................... <#getRightWallSpriteReplace>
  [ 18] extcall 188 ............................. <sendAllSprites(#getRightWallSpriteReplace)>
  [ 20] setlocal 2 .............................. iRightWallSprite = sendAllSprites(#getRightWallSpriteReplace)
  [ 22] pushsymb 379 ............................ <#getLeftWallTextureSpriteReplace>
  [ 25] pusharglist 1 ........................... <#getLeftWallTextureSpriteReplace>
  [ 27] extcall 188 ............................. <sendAllSprites(#getLeftWallTextureSpriteReplace)>
  [ 29] setlocal 3 .............................. iLeftWallTextureSprite = sendAllSprites(#getLeftWallTextureSpriteReplace)
  [ 31] pushsymb 380 ............................ <#getRightWallTextureSpriteReplace>
  [ 34] pusharglist 1 ........................... <#getRightWallTextureSpriteReplace>
  [ 36] extcall 188 ............................. <sendAllSprites(#getRightWallTextureSpriteReplace)>
  [ 38] setlocal 4 .............................. iRightWallTextureSprite = sendAllSprites(#getRightWallTextureSpriteReplace)
  [ 40] pushsymb 381 ............................ <#getWallBackgroundSpritereplace>
  [ 43] pusharglist 1 ........................... <#getWallBackgroundSpritereplace>
  [ 45] extcall 188 ............................. <sendAllSprites(#getWallBackgroundSpritereplace)>
  [ 47] setlocal 5 .............................. iWallBackgroundsprite = sendAllSprites(#getWallBackgroundSpritereplace)
  [ 49] pusharglist 0 ........................... <[:]>
  [ 51] pushproplist ............................ <[:]>
  [ 52] setlocal 6 .............................. aPatterns = [:]
  [ 54] pushcons 198 ............................ <"cat_wallpattern_patterns_index">
  [ 56] getlocal 0 .............................. <sAssetCast>
  [ 58] pusharglist 2 ........................... <"cat_wallpattern_patterns_index", sAssetCast>
  [ 60] extcall 101 ............................. <member("cat_wallpattern_patterns_index", sAssetCast)>
  [ 62] setlocal 7 .............................. oPatternMember = member("cat_wallpattern_patterns_index", sAssetCast)
  [ 64] getlocal 7 .............................. <oPatternMember>
  [ 66] getobjprop 129 .......................... <oPatternMember.text>
  [ 68] setlocal 8 .............................. sPatternText = oPatternMember.text
  [ 70] pushint8 1 .............................. <1>
  [ 72] setlocal 9
  [ 74] getlocal 9
  [ 76] getlocal 8 .............................. <sPatternText>
  [ 78] pushsymb 348 ............................ <#lines>
  [ 81] pusharglist 2 ........................... <sPatternText, #lines>
  [ 83] objcall 104 ............................. <sPatternText.lines.count>
  [ 85] lteq
  [ 86] jmpifz [217] ............................ repeat with i = 1 to sPatternText.lines.count
  [ 89] getlocal 8 .............................. <sPatternText>
  [ 91] pushsymb 107 ............................ <#line>
  [ 93] getlocal 9 .............................. <i>
  [ 95] pusharglist 3 ........................... <sPatternText, #line, i>
  [ 97] objcall 108 ............................. <sPatternText.line[i]>
  [ 99] setlocal 10 ............................. sPatternLine = sPatternText.line[i]
  [101] getlocal 10 ............................. <sPatternLine>
  [103] pusharglist 1 ........................... <sPatternLine>
  [105] extcall 106 ............................. <value(sPatternLine)>
  [107] setlocal 11 ............................. aPatternList = value(sPatternLine)
  [109] getlocal 11 ............................. <aPatternList>
  [111] getobjprop 90 ........................... <aPatternList.name>
  [113] setlocal 12 ............................. sPatternName = aPatternList.name
  [115] getlocal 11 ............................. <aPatternList>
  [117] getobjprop 202 .......................... <aPatternList.field>
  [119] setlocal 13 ............................. sColorField = aPatternList.field
  [121] pusharglist 0 ........................... <[]>
  [123] pushlist ................................ <[]>
  [124] setlocal 14 ............................. aColors = []
  [126] getlocal 13 ............................. <sColorField>
  [128] getlocal 0 .............................. <sAssetCast>
  [130] pusharglist 2 ........................... <sColorField, sAssetCast>
  [132] extcall 101 ............................. <member(sColorField, sAssetCast)>
  [134] setlocal 15 ............................. oColorsMember = member(sColorField, sAssetCast)
  [136] getlocal 15 ............................. <oColorsMember>
  [138] getobjprop 129 .......................... <oColorsMember.text>
  [140] setlocal 16 ............................. sColorsText = oColorsMember.text
  [142] pushint8 1 .............................. <1>
  [144] setlocal 17
  [146] getlocal 17
  [148] getlocal 16 ............................. <sColorsText>
  [150] pushsymb 348 ............................ <#lines>
  [153] pusharglist 2 ........................... <sColorsText, #lines>
  [155] objcall 104 ............................. <sColorsText.lines.count>
  [157] lteq
  [158] jmpifz [198] ............................ repeat with ii = 1 to sColorsText.lines.count
  [161] getlocal 16 ............................. <sColorsText>
  [163] pushsymb 107 ............................ <#line>
  [165] getlocal 17 ............................. <ii>
  [167] pusharglist 3 ........................... <sColorsText, #line, ii>
  [169] objcall 108 ............................. <sColorsText.line[ii]>
  [171] setlocal 18 ............................. sColorLine = sColorsText.line[ii]
  [173] getlocal 18 ............................. <sColorLine>
  [175] pusharglist 1 ........................... <sColorLine>
  [177] extcall 106 ............................. <value(sColorLine)>
  [179] setlocal 19 ............................. aColorsList = value(sColorLine)
  [181] getlocal 14 ............................. <aColors>
  [183] getlocal 19 ............................. <aColorsList>
  [185] pusharglistnoret 2 ...................... <aColors, aColorsList>
  [187] objcall 138 ............................. aColors.add(aColorsList)
  [189] pushint8 1
  [191] getlocal 17
  [193] add
  [194] setlocal 17
  [196] endrepeat [146]
  [198] getlocal 6 .............................. <aPatterns>
  [200] getlocal 12 ............................. <sPatternName>
  [202] getlocal 14 ............................. <aColors>
  [204] pusharglistnoret 3 ...................... <aPatterns, sPatternName, aColors>
  [206] objcall 93 .............................. aPatterns.addProp(sPatternName, aColors)
  [208] pushint8 1
  [210] getlocal 9
  [212] add
  [213] setlocal 9
  [215] endrepeat [ 74]
  [217] getlocal 6 .............................. <aPatterns>
  [219] getparam 1 .............................. <iPatternIndex>
  [221] pusharglist 2 ........................... <aPatterns, iPatternIndex>
  [223] objcall 95 .............................. <aPatterns[iPatternIndex]>
  [225] getparam 2 .............................. <iColorIndex>
  [227] pusharglist 2 ........................... <aPatterns[iPatternIndex], iColorIndex>
  [229] objcall 95 .............................. <aPatterns[iPatternIndex][iColorIndex]>
  [231] setlocal 20 ............................. aColorData = aPatterns[iPatternIndex][iColorIndex]
  [233] getlocal 20 ............................. <aColorData>
  [235] getobjprop 382 .......................... <aColorData.dirtStyle>
  [238] pushint8 1 .............................. <1>
  [240] eq ...................................... <aColorData.dirtStyle = 1>
  [241] jmpifz [276] ............................ if aColorData.dirtStyle = 1 then
  [244] getlocal 1 .............................. <iLeftWallSprite>
  [246] pusharglist 1 ........................... <iLeftWallSprite>
  [248] extcall 177 ............................. <sprite(iLeftWallSprite)>
  [250] pushcons 199 ............................ <"cat_left_wall_1_b_0_0_0">
  [252] getlocal 0 .............................. <sAssetCast>
  [254] pusharglist 2 ........................... <"cat_left_wall_1_b_0_0_0", sAssetCast>
  [256] extcall 101 ............................. <member("cat_left_wall_1_b_0_0_0", sAssetCast)>
  [258] setobjprop 101 .......................... sprite(iLeftWallSprite).member = member("cat_left_wall_1_b_0_0_0", sAssetCast)
  [260] getlocal 2 .............................. <iRightWallSprite>
  [262] pusharglist 1 ........................... <iRightWallSprite>
  [264] extcall 177 ............................. <sprite(iRightWallSprite)>
  [266] pushcons 200 ............................ <"cat_right_wall_1_b_0_0_0">
  [268] getlocal 0 .............................. <sAssetCast>
  [270] pusharglist 2 ........................... <"cat_right_wall_1_b_0_0_0", sAssetCast>
  [272] extcall 101 ............................. <member("cat_right_wall_1_b_0_0_0", sAssetCast)>
  [274] setobjprop 101 .......................... sprite(iRightWallSprite).member = member("cat_right_wall_1_b_0_0_0", sAssetCast)
  [276] getlocal 20 ............................. <aColorData>
  [278] getobjprop 382 .......................... <aColorData.dirtStyle>
  [281] pushint8 2 .............................. <2>
  [283] eq ...................................... <aColorData.dirtStyle = 2>
  [284] jmpifz [319] ............................ if aColorData.dirtStyle = 2 then
  [287] getlocal 1 .............................. <iLeftWallSprite>
  [289] pusharglist 1 ........................... <iLeftWallSprite>
  [291] extcall 177 ............................. <sprite(iLeftWallSprite)>
  [293] pushcons 201 ............................ <"cat_left_wall_2_b_0_0_0">
  [295] getlocal 0 .............................. <sAssetCast>
  [297] pusharglist 2 ........................... <"cat_left_wall_2_b_0_0_0", sAssetCast>
  [299] extcall 101 ............................. <member("cat_left_wall_2_b_0_0_0", sAssetCast)>
  [301] setobjprop 101 .......................... sprite(iLeftWallSprite).member = member("cat_left_wall_2_b_0_0_0", sAssetCast)
  [303] getlocal 2 .............................. <iRightWallSprite>
  [305] pusharglist 1 ........................... <iRightWallSprite>
  [307] extcall 177 ............................. <sprite(iRightWallSprite)>
  [309] pushcons 202 ............................ <"cat_right_wall_2_b_0_0_0">
  [311] getlocal 0 .............................. <sAssetCast>
  [313] pusharglist 2 ........................... <"cat_right_wall_2_b_0_0_0", sAssetCast>
  [315] extcall 101 ............................. <member("cat_right_wall_2_b_0_0_0", sAssetCast)>
  [317] setobjprop 101 .......................... sprite(iRightWallSprite).member = member("cat_right_wall_2_b_0_0_0", sAssetCast)
  [319] getlocal 1 .............................. <iLeftWallSprite>
  [321] pusharglist 1 ........................... <iLeftWallSprite>
  [323] extcall 177 ............................. <sprite(iLeftWallSprite)>
  [325] getlocal 20 ............................. <aColorData>
  [327] getobjprop 358 .......................... <aColorData.color>
  [330] setobjprop 358 .......................... sprite(iLeftWallSprite).color = aColorData.color
  [333] getlocal 2 .............................. <iRightWallSprite>
  [335] pusharglist 1 ........................... <iRightWallSprite>
  [337] extcall 177 ............................. <sprite(iRightWallSprite)>
  [339] getlocal 20 ............................. <aColorData>
  [341] getobjprop 358 .......................... <aColorData.color>
  [344] setobjprop 358 .......................... sprite(iRightWallSprite).color = aColorData.color
  [347] getlocal 1 .............................. <iLeftWallSprite>
  [349] pusharglist 1 ........................... <iLeftWallSprite>
  [351] extcall 177 ............................. <sprite(iLeftWallSprite)>
  [353] getlocal 20 ............................. <aColorData>
  [355] getobjprop 383 .......................... <aColorData.bgColor>
  [358] setobjprop 383 .......................... sprite(iLeftWallSprite).bgColor = aColorData.bgColor
  [361] getlocal 2 .............................. <iRightWallSprite>
  [363] pusharglist 1 ........................... <iRightWallSprite>
  [365] extcall 177 ............................. <sprite(iRightWallSprite)>
  [367] getlocal 20 ............................. <aColorData>
  [369] getobjprop 383 .......................... <aColorData.bgColor>
  [372] setobjprop 383 .......................... sprite(iRightWallSprite).bgColor = aColorData.bgColor
  [375] getlocal 1 .............................. <iLeftWallSprite>
  [377] pusharglist 1 ........................... <iLeftWallSprite>
  [379] extcall 177 ............................. <sprite(iLeftWallSprite)>
  [381] getlocal 20 ............................. <aColorData>
  [383] getobjprop 384 .......................... <aColorData.dirtBlend>
  [386] setobjprop 355 .......................... sprite(iLeftWallSprite).blend = aColorData.dirtBlend
  [389] getlocal 2 .............................. <iRightWallSprite>
  [391] pusharglist 1 ........................... <iRightWallSprite>
  [393] extcall 177 ............................. <sprite(iRightWallSprite)>
  [395] getlocal 20 ............................. <aColorData>
  [397] getobjprop 384 .......................... <aColorData.dirtBlend>
  [400] setobjprop 355 .......................... sprite(iRightWallSprite).blend = aColorData.dirtBlend
  [403] getlocal 3 .............................. <iLeftWallTextureSprite>
  [405] pusharglist 1 ........................... <iLeftWallTextureSprite>
  [407] extcall 177 ............................. <sprite(iLeftWallTextureSprite)>
  [409] getchainedprop 101 ...................... <sprite(iLeftWallTextureSprite).member>
  [411] pushcons 203 ............................ <"cat_left_wall_">
  [413] getlocal 20 ............................. <aColorData>
  [415] getobjprop 356 .......................... <aColorData.palette>
  [418] joinstr ................................. <"cat_left_wall_" & aColorData.palette>
  [419] getlocal 0 .............................. <sAssetCast>
  [421] pusharglist 2 ........................... <"cat_left_wall_" & aColorData.palette, sAssetCast>
  [423] extcall 101 ............................. <member("cat_left_wall_" & aColorData.palette, sAssetCast)>
  [425] setobjprop 356 .......................... sprite(iLeftWallTextureSprite).member.palette = member("cat_left_wall_" & aColorData.palette, sAssetCast)
  [428] getlocal 4 .............................. <iRightWallTextureSprite>
  [430] pusharglist 1 ........................... <iRightWallTextureSprite>
  [432] extcall 177 ............................. <sprite(iRightWallTextureSprite)>
  [434] getchainedprop 101 ...................... <sprite(iRightWallTextureSprite).member>
  [436] pushcons 204 ............................ <"cat_right_wall_">
  [438] getlocal 20 ............................. <aColorData>
  [440] getobjprop 356 .......................... <aColorData.palette>
  [443] joinstr ................................. <"cat_right_wall_" & aColorData.palette>
  [444] getlocal 0 .............................. <sAssetCast>
  [446] pusharglist 2 ........................... <"cat_right_wall_" & aColorData.palette, sAssetCast>
  [448] extcall 101 ............................. <member("cat_right_wall_" & aColorData.palette, sAssetCast)>
  [450] setobjprop 356 .......................... sprite(iRightWallTextureSprite).member.palette = member("cat_right_wall_" & aColorData.palette, sAssetCast)
  [453] getlocal 3 .............................. <iLeftWallTextureSprite>
  [455] pusharglist 1 ........................... <iLeftWallTextureSprite>
  [457] extcall 177 ............................. <sprite(iLeftWallTextureSprite)>
  [459] getlocal 20 ............................. <aColorData>
  [461] getobjprop 359 .......................... <aColorData.textureBlend>
  [464] setobjprop 355 .......................... sprite(iLeftWallTextureSprite).blend = aColorData.textureBlend
  [467] getlocal 4 .............................. <iRightWallTextureSprite>
  [469] pusharglist 1 ........................... <iRightWallTextureSprite>
  [471] extcall 177 ............................. <sprite(iRightWallTextureSprite)>
  [473] getlocal 20 ............................. <aColorData>
  [475] getobjprop 359 .......................... <aColorData.textureBlend>
  [478] setobjprop 355 .......................... sprite(iRightWallTextureSprite).blend = aColorData.textureBlend
  [481] ret
end

on displayDeleteConfirm me, iPosId
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 205 ............................ <"delete_item.window">
  [  4] pusharglistnoret 2 ...................... <me, "delete_item.window">
  [  6] objcall 2 ............................... me.newwindow("delete_item.window")
  [  8] pusharglistnoret 0 ...................... <>
  [ 10] extcall 187 ............................. updateStage()
  [ 12] pushsymb 392 ............................ <#getdeleteok>
  [ 15] pusharglist 1 ........................... <#getdeleteok>
  [ 17] extcall 188 ............................. <sendAllSprites(#getdeleteok)>
  [ 19] setlocal 0 .............................. oksprite = sendAllSprites(#getdeleteok)
  [ 21] getlocal 0 .............................. <oksprite>
  [ 23] pusharglist 1 ........................... <oksprite>
  [ 25] extcall 87 .............................. <voidp(oksprite)>
  [ 27] jmpifz [ 39] ............................ if voidp(oksprite) then / else
  [ 30] pushcons 206 ............................ <"can't find delete ok sprite">
  [ 32] pusharglistnoret 1 ...................... <"can't find delete ok sprite">
  [ 34] localcall 10 ............................ alert("can't find delete ok sprite")
  [ 36] jmp [ 50]
  [ 39] getlocal 0 .............................. <oksprite>
  [ 41] pusharglist 1 ........................... <oksprite>
  [ 43] extcall 177 ............................. <sprite(oksprite)>
  [ 45] getparam 1 .............................. <iPosId>
  [ 47] setobjprop 342 .......................... sprite(oksprite).iPosId = iPosId
  [ 50] ret
end

on mouseIsOverBackpack me
  [  0] pushsymb 394 ............................ <#getBackpackBackgroundSprite>
  [  3] pusharglist 1 ........................... <#getBackpackBackgroundSprite>
  [  5] extcall 188 ............................. <sendAllSprites(#getBackpackBackgroundSprite)>
  [  7] setlocal 0 .............................. iBackpackSprite = sendAllSprites(#getBackpackBackgroundSprite)
  [  9] getlocal 0 .............................. <iBackpackSprite>
  [ 11] pusharglist 1 ........................... <iBackpackSprite>
  [ 13] extcall 87 .............................. <voidp(iBackpackSprite)>
  [ 15] jmpifz [ 23] ............................ if voidp(iBackpackSprite) then
  [ 18] pushzero ................................ <0>
  [ 19] pusharglistnoret 1 ...................... <0>
  [ 21] extcall 78 .............................. return 0
  [ 23] getlocal 0 .............................. <iBackpackSprite>
  [ 25] pusharglist 1 ........................... <iBackpackSprite>
  [ 27] extcall 395 ............................. <rollover(iBackpackSprite)>
  [ 30] pusharglistnoret 1 ...................... <rollover(iBackpackSprite)>
  [ 32] extcall 78 .............................. return rollover(iBackpackSprite)
  [ 34] ret
end

on mouseIsOverWindow me
  [  0] pushint8 1 .............................. <1>
  [  2] setlocal 0
  [  4] getlocal 0
  [  6] getglobal 86 ............................ <ElementMgr>
  [  8] getobjprop 76 ........................... <ElementMgr.pOpenWindows>
  [ 10] pusharglist 1 ........................... <ElementMgr.pOpenWindows>
  [ 12] extcall 104 ............................. <count(ElementMgr.pOpenWindows)>
  [ 14] lteq
  [ 15] jmpifz [100] ............................ repeat with n = 1 to count(ElementMgr.pOpenWindows)
  [ 18] pushint8 1 .............................. <1>
  [ 20] setlocal 1
  [ 22] getlocal 1
  [ 24] getglobal 86 ............................ <ElementMgr>
  [ 26] pushsymb 76 ............................. <#pOpenWindows>
  [ 28] getlocal 0 .............................. <n>
  [ 30] pusharglist 3 ........................... <ElementMgr, #pOpenWindows, n>
  [ 32] objcall 265 ............................. <ElementMgr.pOpenWindows[n]>
  [ 35] getobjprop 250 .......................... <ElementMgr.pOpenWindows[n].pSpritelist>
  [ 37] pusharglist 1 ........................... <ElementMgr.pOpenWindows[n].pSpritelist>
  [ 39] extcall 104 ............................. <count(ElementMgr.pOpenWindows[n].pSpritelist)>
  [ 41] lteq
  [ 42] jmpifz [ 91] ............................ repeat with m = 1 to count(ElementMgr.pOpenWindows[n].pSpritelist)
  [ 45] getglobal 86 ............................ <ElementMgr>
  [ 47] pushsymb 76 ............................. <#pOpenWindows>
  [ 49] getlocal 0 .............................. <n>
  [ 51] pusharglist 3 ........................... <ElementMgr, #pOpenWindows, n>
  [ 53] objcall 265 ............................. <ElementMgr.pOpenWindows[n]>
  [ 56] pushsymb 250 ............................ <#pSpritelist>
  [ 58] getlocal 1 .............................. <m>
  [ 60] pusharglist 3 ........................... <ElementMgr.pOpenWindows[n], #pSpritelist, m>
  [ 62] objcall 108 ............................. <ElementMgr.pOpenWindows[n].pSpritelist[m]>
  [ 64] setlocal 2 .............................. iSprite = ElementMgr.pOpenWindows[n].pSpritelist[m]
  [ 66] getlocal 2 .............................. <iSprite>
  [ 68] pusharglist 1 ........................... <iSprite>
  [ 70] extcall 395 ............................. <rollover(iSprite)>
  [ 73] jmpifz [ 82] ............................ if rollover(iSprite) then
  [ 76] pushint8 1 .............................. <1>
  [ 78] pusharglistnoret 1 ...................... <1>
  [ 80] extcall 78 .............................. return 1
  [ 82] pushint8 1
  [ 84] getlocal 1
  [ 86] add
  [ 87] setlocal 1
  [ 89] endrepeat [ 22]
  [ 91] pushint8 1
  [ 93] getlocal 0
  [ 95] add
  [ 96] setlocal 0
  [ 98] endrepeat [  4]
  [100] pushzero ................................ <0>
  [101] pusharglistnoret 1 ...................... <0>
  [103] extcall 78 .............................. return 0
  [105] ret
end

on exception me, sMessage
  [  0] ret
end

on getByStudioId_Result iError, foStudio
  [  0] ret
end

on dispenseItem_Result me, iError, aPossessions
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 207 ............................ <"dispensePoster_Result() iError: ">
  [  4] getparam 1 .............................. <iError>
  [  6] joinstr ................................. <"dispensePoster_Result() iError: " & iError>
  [  7] pushcons 208 ............................ <" aPossessions.toString(): ">
  [  9] joinstr ................................. <"dispensePoster_Result() iError: " & iError & " aPossessions.toString(): ">
  [ 10] getparam 2 .............................. <aPossessions>
  [ 12] pusharglist 1 ........................... <aPossessions>
  [ 14] objcall 400 ............................. <aPossessions.toString()>
  [ 17] joinstr ................................. <"dispensePoster_Result() iError: " & iError & " aPossessions.toString(): " & aPossessions.toString()>
  [ 18] pushint8 1 .............................. <1>
  [ 20] pusharglistnoret 3 ...................... <me, "dispensePoster_Result() iError: " & iError & " aPossessions.toString(): " & aPossessions.toString(), 1>
  [ 22] objcall 1 ............................... me.debug("dispensePoster_Result() iError: " & iError & " aPossessions.toString(): " & aPossessions.toString(), 1)
  [ 24] getparam 0 .............................. <me>
  [ 26] pushcons 209 ............................ <"cc_dispenseitem_success.window">
  [ 28] pusharglist 2 ........................... <me, "cc_dispenseitem_success.window">
  [ 30] objcall 2 ............................... <me.newwindow("cc_dispenseitem_success.window")>
  [ 32] setlocal 0 .............................. capwindow = me.newwindow("cc_dispenseitem_success.window")
  [ 34] getparam 1 .............................. <iError>
  [ 36] pushint8 1 .............................. <1>
  [ 38] eq ...................................... <iError = 1>
  [ 39] jmpifz [ 85] ............................ if iError = 1 then / else
  [ 42] getglobal 118 ........................... <oDenizenManager>
  [ 44] pusharglist 1 ........................... <oDenizenManager>
  [ 46] objcall 287 ............................. <oDenizenManager.getBackpack()>
  [ 49] setlocal 1 .............................. oBackPack = oDenizenManager.getBackpack()
  [ 51] getlocal 1 .............................. <oBackPack>
  [ 53] pusharglist 1 ........................... <oBackPack>
  [ 55] extcall 87 .............................. <voidp(oBackPack)>
  [ 57] not ..................................... <not voidp(oBackPack)>
  [ 58] jmpifz [ 72] ............................ if not voidp(oBackPack) then
  [ 61] getlocal 1 .............................. <oBackPack>
  [ 63] getparam 2 .............................. <aPossessions>
  [ 65] pushint8 1 .............................. <1>
  [ 67] pusharglistnoret 3 ...................... <oBackPack, aPossessions, 1>
  [ 69] objcall 288 ............................. oBackPack.addPossessions(aPossessions, 1)
  [ 72] getglobal 178 ........................... <TextMgr>
  [ 74] pushcons 210 ............................ <"DISPENSE_ITEM_SUCCESS">
  [ 76] pusharglist 2 ........................... <TextMgr, "DISPENSE_ITEM_SUCCESS">
  [ 78] objcall 179 ............................. <TextMgr.GetRefText("DISPENSE_ITEM_SUCCESS")>
  [ 80] setlocal 2 .............................. mytext = TextMgr.GetRefText("DISPENSE_ITEM_SUCCESS")
  [ 82] jmp [ 95]
  [ 85] getglobal 178 ........................... <TextMgr>
  [ 87] pushcons 211 ............................ <"DISPENSE_ITEM_FAIL">
  [ 89] pusharglist 2 ........................... <TextMgr, "DISPENSE_ITEM_FAIL">
  [ 91] objcall 179 ............................. <TextMgr.GetRefText("DISPENSE_ITEM_FAIL")>
  [ 93] setlocal 2 .............................. mytext = TextMgr.GetRefText("DISPENSE_ITEM_FAIL")
  [ 95] pushcons 212 ............................ <"cc.dispenseitem.text">
  [ 97] pusharglist 1 ........................... <"cc.dispenseitem.text">
  [ 99] extcall 101 ............................. <member("cc.dispenseitem.text")>
  [101] getlocal 2 .............................. <mytext>
  [103] setobjprop 129 .......................... member("cc.dispenseitem.text").text = mytext
  [105] ret
end

on isPublicStudioWindowOpen me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 76 ........................... <me.pOpenWindows>
  [  4] pusharglist 1 ........................... <me.pOpenWindows>
  [  6] extcall 104 ............................. <count(me.pOpenWindows)>
  [  8] setlocal 0
  [ 10] getlocal 0
  [ 12] pushint8 1 .............................. <1>
  [ 14] gteq
  [ 15] jmpifz [ 59] ............................ repeat with n = count(me.pOpenWindows) down to 1
  [ 18] getparam 0 .............................. <me>
  [ 20] pushsymb 76 ............................. <#pOpenWindows>
  [ 22] getlocal 0 .............................. <n>
  [ 24] pusharglist 3 ........................... <me, #pOpenWindows, n>
  [ 26] objcall 108 ............................. <me.pOpenWindows[n]>
  [ 28] setlocal 1 .............................. _oWindow = me.pOpenWindows[n]
  [ 30] getlocal 1 .............................. <_oWindow>
  [ 32] getobjprop 241 .......................... <_oWindow.pname>
  [ 34] setlocal 2 .............................. _sWindowName = _oWindow.pname
  [ 36] getlocal 2 .............................. <_sWindowName>
  [ 38] pushcons 7 .............................. <"nav_public">
  [ 40] contains0str ............................ <_sWindowName starts "nav_public">
  [ 41] jmpifz [ 50] ............................ if _sWindowName starts "nav_public" then
  [ 44] pushint8 1 .............................. <1>
  [ 46] pusharglistnoret 1 ...................... <1>
  [ 48] extcall 78 .............................. return 1
  [ 50] pushint8 -1
  [ 52] getlocal 0
  [ 54] add
  [ 55] setlocal 0
  [ 57] endrepeat [ 10]
  [ 59] pushzero ................................ <0>
  [ 60] pusharglistnoret 1 ...................... <0>
  [ 62] extcall 78 .............................. return 0
  [ 64] ret
end

on isPrivateStudioWindowOpen me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 76 ........................... <me.pOpenWindows>
  [  4] pusharglist 1 ........................... <me.pOpenWindows>
  [  6] extcall 104 ............................. <count(me.pOpenWindows)>
  [  8] setlocal 0
  [ 10] getlocal 0
  [ 12] pushint8 1 .............................. <1>
  [ 14] gteq
  [ 15] jmpifz [ 59] ............................ repeat with n = count(me.pOpenWindows) down to 1
  [ 18] getparam 0 .............................. <me>
  [ 20] pushsymb 76 ............................. <#pOpenWindows>
  [ 22] getlocal 0 .............................. <n>
  [ 24] pusharglist 3 ........................... <me, #pOpenWindows, n>
  [ 26] objcall 108 ............................. <me.pOpenWindows[n]>
  [ 28] setlocal 1 .............................. _oWindow = me.pOpenWindows[n]
  [ 30] getlocal 1 .............................. <_oWindow>
  [ 32] getobjprop 241 .......................... <_oWindow.pname>
  [ 34] setlocal 2 .............................. _sWindowName = _oWindow.pname
  [ 36] getlocal 2 .............................. <_sWindowName>
  [ 38] pushcons 4 .............................. <"nav_private">
  [ 40] contains0str ............................ <_sWindowName starts "nav_private">
  [ 41] jmpifz [ 50] ............................ if _sWindowName starts "nav_private" then
  [ 44] pushint8 1 .............................. <1>
  [ 46] pusharglistnoret 1 ...................... <1>
  [ 48] extcall 78 .............................. return 1
  [ 50] pushint8 -1
  [ 52] getlocal 0
  [ 54] add
  [ 55] setlocal 0
  [ 57] endrepeat [ 10]
  [ 59] pushzero ................................ <0>
  [ 60] pusharglistnoret 1 ...................... <0>
  [ 62] extcall 78 .............................. return 0
  [ 64] ret
end

on getOpenWindowNames me
  [  0] pusharglist 0 ........................... <[]>
  [  2] pushlist ................................ <[]>
  [  3] setlocal 0 .............................. aList = []
  [  5] getparam 0 .............................. <me>
  [  7] getobjprop 76 ........................... <me.pOpenWindows>
  [  9] pusharglist 1 ........................... <me.pOpenWindows>
  [ 11] extcall 87 .............................. <voidp(me.pOpenWindows)>
  [ 13] jmpifz [ 22] ............................ if voidp(me.pOpenWindows) then
  [ 16] getlocal 0 .............................. <aList>
  [ 18] pusharglistnoret 1 ...................... <aList>
  [ 20] extcall 78 .............................. return aList
  [ 22] getparam 0 .............................. <me>
  [ 24] getobjprop 76 ........................... <me.pOpenWindows>
  [ 26] pusharglist 1 ........................... <me.pOpenWindows>
  [ 28] extcall 104 ............................. <count(me.pOpenWindows)>
  [ 30] setlocal 1 .............................. iOpenWindowCount = count(me.pOpenWindows)
  [ 32] getlocal 1 .............................. <iOpenWindowCount>
  [ 34] pushzero ................................ <0>
  [ 35] eq ...................................... <iOpenWindowCount = 0>
  [ 36] jmpifz [ 45] ............................ if iOpenWindowCount = 0 then
  [ 39] getlocal 0 .............................. <aList>
  [ 41] pusharglistnoret 1 ...................... <aList>
  [ 43] extcall 78 .............................. return aList
  [ 45] getparam 0 .............................. <me>
  [ 47] getobjprop 76 ........................... <me.pOpenWindows>
  [ 49] pusharglist 1 ........................... <me.pOpenWindows>
  [ 51] extcall 104 ............................. <count(me.pOpenWindows)>
  [ 53] setlocal 2
  [ 55] getlocal 2
  [ 57] pushint8 1 .............................. <1>
  [ 59] gteq
  [ 60] jmpifz [ 98] ............................ repeat with n = count(me.pOpenWindows) down to 1
  [ 63] getparam 0 .............................. <me>
  [ 65] pushsymb 76 ............................. <#pOpenWindows>
  [ 67] getlocal 2 .............................. <n>
  [ 69] pusharglist 3 ........................... <me, #pOpenWindows, n>
  [ 71] objcall 108 ............................. <me.pOpenWindows[n]>
  [ 73] setlocal 3 .............................. _oWindow = me.pOpenWindows[n]
  [ 75] getlocal 3 .............................. <_oWindow>
  [ 77] getobjprop 241 .......................... <_oWindow.pname>
  [ 79] setlocal 4 .............................. _sWindowName = _oWindow.pname
  [ 81] getlocal 0 .............................. <aList>
  [ 83] getlocal 4 .............................. <_sWindowName>
  [ 85] pusharglistnoret 2 ...................... <aList, _sWindowName>
  [ 87] objcall 138 ............................. aList.add(_sWindowName)
  [ 89] pushint8 -1
  [ 91] getlocal 2
  [ 93] add
  [ 94] setlocal 2
  [ 96] endrepeat [ 55]
  [ 98] getlocal 0 .............................. <aList>
  [100] pusharglistnoret 1 ...................... <aList>
  [102] extcall 78 .............................. return aList
  [104] ret
end
