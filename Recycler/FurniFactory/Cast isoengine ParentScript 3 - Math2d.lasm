property bDebug

on new me
  [  0] getparam 0 .............................. <me>
  [  2] pushint8 1 .............................. <1>
  [  4] setobjprop 56 ........................... me.bDebug = 1
  [  6] getparam 0 .............................. <me>
  [  8] pusharglistnoret 1 ...................... <me>
  [ 10] extcall 92 .............................. return me
  [ 12] ret
end

on direction me, oP1, oP2
  [  0] getparam 1 .............................. <oP1>
  [  2] getobjprop 299 .......................... <oP1.locH>
  [  5] getparam 2 .............................. <oP2>
  [  7] getobjprop 299 .......................... <oP2.locH>
  [ 10] sub ..................................... <oP1.locH - oP2.locH>
  [ 11] getparam 1 .............................. <oP1>
  [ 13] getobjprop 300 .......................... <oP1.locV>
  [ 16] getparam 2 .............................. <oP2>
  [ 18] getobjprop 300 .......................... <oP2.locV>
  [ 21] sub ..................................... <oP1.locV - oP2.locV>
  [ 22] pusharglist 2 ........................... <oP1.locH - oP2.locH, oP1.locV - oP2.locV>
  [ 24] extcall 295 ............................. <point(oP1.locH - oP2.locH, oP1.locV - oP2.locV)>
  [ 27] pusharglistnoret 1 ...................... <point(oP1.locH - oP2.locH, oP1.locV - oP2.locV)>
  [ 29] extcall 92 .............................. return point(oP1.locH - oP2.locH, oP1.locV - oP2.locV)
  [ 31] ret
end

on length me, oP
  [  0] getparam 1 .............................. <oP>
  [  2] getobjprop 299 .......................... <oP.locH>
  [  5] getparam 1 .............................. <oP>
  [  7] getobjprop 299 .......................... <oP.locH>
  [ 10] mul ..................................... <oP.locH * oP.locH>
  [ 11] getparam 1 .............................. <oP>
  [ 13] getobjprop 300 .......................... <oP.locV>
  [ 16] getparam 1 .............................. <oP>
  [ 18] getobjprop 300 .......................... <oP.locV>
  [ 21] mul ..................................... <oP.locV * oP.locV>
  [ 22] add ..................................... <(oP.locH * oP.locH) + (oP.locV * oP.locV)>
  [ 23] pusharglist 1 ........................... <(oP.locH * oP.locH) + (oP.locV * oP.locV)>
  [ 25] extcall 378 ............................. <sqrt((oP.locH * oP.locH) + (oP.locV * oP.locV))>
  [ 28] pusharglistnoret 1 ...................... <sqrt((oP.locH * oP.locH) + (oP.locV * oP.locV))>
  [ 30] extcall 92 .............................. return sqrt((oP.locH * oP.locH) + (oP.locV * oP.locV))
  [ 32] ret
end

on unit me, oP
  [  0] getparam 0 .............................. <me>
  [  2] getparam 1 .............................. <oP>
  [  4] pusharglist 2 ........................... <me, oP>
  [  6] objcall 320 ............................. <me.length(oP)>
  [  9] setlocal 0 .............................. iLength = me.length(oP)
  [ 11] getlocal 0 .............................. <iLength>
  [ 13] pushzero ................................ <0>
  [ 14] eq ...................................... <iLength = 0>
  [ 15] jmpifz [ 24] ............................ if iLength = 0 then
  [ 18] getparam 1 .............................. <oP>
  [ 20] pusharglistnoret 1 ...................... <oP>
  [ 22] extcall 92 .............................. return oP
  [ 24] getparam 1 .............................. <oP>
  [ 26] getobjprop 299 .......................... <oP.locH>
  [ 29] getlocal 0 .............................. <iLength>
  [ 31] div ..................................... <oP.locH / iLength>
  [ 32] getparam 1 .............................. <oP>
  [ 34] getobjprop 300 .......................... <oP.locV>
  [ 37] getlocal 0 .............................. <iLength>
  [ 39] div ..................................... <oP.locV / iLength>
  [ 40] pusharglist 2 ........................... <oP.locH / iLength, oP.locV / iLength>
  [ 42] extcall 295 ............................. <point(oP.locH / iLength, oP.locV / iLength)>
  [ 45] pusharglistnoret 1 ...................... <point(oP.locH / iLength, oP.locV / iLength)>
  [ 47] extcall 92 .............................. return point(oP.locH / iLength, oP.locV / iLength)
  [ 49] ret
end

on dotProduct me, oP1, oP2
  [  0] getparam 0 .............................. <me>
  [  2] getparam 1 .............................. <oP1>
  [  4] pusharglist 2 ........................... <me, oP1>
  [  6] objcall 364 ............................. <me.unit(oP1)>
  [  9] setparam 1 .............................. oP1 = me.unit(oP1)
  [ 11] getparam 0 .............................. <me>
  [ 13] getparam 2 .............................. <oP2>
  [ 15] pusharglist 2 ........................... <me, oP2>
  [ 17] objcall 364 ............................. <me.unit(oP2)>
  [ 20] setparam 2 .............................. oP2 = me.unit(oP2)
  [ 22] getparam 0 .............................. <me>
  [ 24] getparam 1 .............................. <oP1>
  [ 26] getobjprop 299 .......................... <oP1.locH>
  [ 29] getparam 2 .............................. <oP2>
  [ 31] getobjprop 299 .......................... <oP2.locH>
  [ 34] mul ..................................... <oP1.locH * oP2.locH>
  [ 35] getparam 1 .............................. <oP1>
  [ 37] getobjprop 300 .......................... <oP1.locV>
  [ 40] getparam 2 .............................. <oP2>
  [ 42] getobjprop 300 .......................... <oP2.locV>
  [ 45] mul ..................................... <oP1.locV * oP2.locV>
  [ 46] add ..................................... <(oP1.locH * oP2.locH) + (oP1.locV * oP2.locV)>
  [ 47] pusharglist 2 ........................... <me, (oP1.locH * oP2.locH) + (oP1.locV * oP2.locV)>
  [ 49] objcall 367 ............................. <me.arccos((oP1.locH * oP2.locH) + (oP1.locV * oP2.locV))>
  [ 52] pusharglistnoret 1 ...................... <me.arccos((oP1.locH * oP2.locH) + (oP1.locV * oP2.locV))>
  [ 54] extcall 92 .............................. return me.arccos((oP1.locH * oP2.locH) + (oP1.locV * oP2.locV))
  [ 56] ret
end

on arcsin me, x
  [  0] getparam 1 .............................. <x>
  [  2] pushint8 1 .............................. <1>
  [  4] getparam 1 .............................. <x>
  [  6] getparam 1 .............................. <x>
  [  8] mul ..................................... <x * x>
  [  9] sub ..................................... <1 - (x * x)>
  [ 10] pusharglist 1 ........................... <1 - (x * x)>
  [ 12] extcall 378 ............................. <sqrt(1 - (x * x))>
  [ 15] div ..................................... <x / sqrt(1 - (x * x))>
  [ 16] pusharglist 1 ........................... <x / sqrt(1 - (x * x))>
  [ 18] extcall 381 ............................. <atan(x / sqrt(1 - (x * x)))>
  [ 21] setlocal 0 .............................. y = atan(x / sqrt(1 - (x * x)))
  [ 23] getlocal 0 .............................. <y>
  [ 25] pusharglistnoret 1 ...................... <y>
  [ 27] extcall 92 .............................. return y
  [ 29] ret
end

on arccos me, x
  [  0] pushint8 1 .............................. <1>
  [  2] getparam 1 .............................. <x>
  [  4] getparam 1 .............................. <x>
  [  6] mul ..................................... <x * x>
  [  7] sub ..................................... <1 - (x * x)>
  [  8] pusharglist 1 ........................... <1 - (x * x)>
  [ 10] extcall 378 ............................. <sqrt(1 - (x * x))>
  [ 13] getparam 1 .............................. <x>
  [ 15] div ..................................... <sqrt(1 - (x * x)) / x>
  [ 16] pusharglist 1 ........................... <sqrt(1 - (x * x)) / x>
  [ 18] extcall 381 ............................. <atan(sqrt(1 - (x * x)) / x)>
  [ 21] setlocal 0 .............................. y = atan(sqrt(1 - (x * x)) / x)
  [ 23] getlocal 0 .............................. <y>
  [ 25] pusharglistnoret 1 ...................... <y>
  [ 27] extcall 92 .............................. return y
  [ 29] ret
end

on distance me, oP1, oP2
  [  0] getparam 1 .............................. <oP1>
  [  2] getobjprop 299 .......................... <oP1.locH>
  [  5] getparam 2 .............................. <oP2>
  [  7] getobjprop 299 .......................... <oP2.locH>
  [ 10] sub ..................................... <oP1.locH - oP2.locH>
  [ 11] setlocal 0 .............................. iDx = oP1.locH - oP2.locH
  [ 13] getparam 1 .............................. <oP1>
  [ 15] getobjprop 300 .......................... <oP1.locV>
  [ 18] getparam 2 .............................. <oP2>
  [ 20] getobjprop 300 .......................... <oP2.locV>
  [ 23] sub ..................................... <oP1.locV - oP2.locV>
  [ 24] setlocal 1 .............................. iDy = oP1.locV - oP2.locV
  [ 26] getlocal 0 .............................. <iDx>
  [ 28] getlocal 0 .............................. <iDx>
  [ 30] mul ..................................... <iDx * iDx>
  [ 31] getlocal 1 .............................. <iDy>
  [ 33] getlocal 1 .............................. <iDy>
  [ 35] mul ..................................... <iDy * iDy>
  [ 36] add ..................................... <(iDx * iDx) + (iDy * iDy)>
  [ 37] pusharglist 1 ........................... <(iDx * iDx) + (iDy * iDy)>
  [ 39] extcall 378 ............................. <sqrt((iDx * iDx) + (iDy * iDy))>
  [ 42] pusharglistnoret 1 ...................... <sqrt((iDx * iDx) + (iDy * iDy))>
  [ 44] extcall 92 .............................. return sqrt((iDx * iDx) + (iDy * iDy))
  [ 46] ret
end

on rad me, iDeg
  [  0] getparam 1 .............................. <iDeg>
  [  2] pusharglist 0 ........................... <>
  [  4] extcall 384 ............................. <PI>
  [  7] mul ..................................... <iDeg * PI>
  [  8] pushint16 180 ........................... <180>
  [ 11] div ..................................... <iDeg * PI / 180>
  [ 12] pusharglistnoret 1 ...................... <iDeg * PI / 180>
  [ 14] extcall 92 .............................. return iDeg * PI / 180
  [ 16] ret
end

on deg me, iRad
  [  0] pushint16 180 ........................... <180>
  [  3] getparam 1 .............................. <iRad>
  [  5] mul ..................................... <180 * iRad>
  [  6] pusharglist 0 ........................... <>
  [  8] extcall 384 ............................. <PI>
  [ 11] div ..................................... <180 * iRad / PI>
  [ 12] pusharglistnoret 1 ...................... <180 * iRad / PI>
  [ 14] extcall 92 .............................. return 180 * iRad / PI
  [ 16] ret
end

on translatePoints me, aPoints, iXChange, iYChange
  [  0] pusharglist 0 ........................... <[]>
  [  2] pushlist ................................ <[]>
  [  3] setlocal 0 .............................. aTranslatedPoints = []
  [  5] pushint8 1 .............................. <1>
  [  7] setlocal 1
  [  9] getlocal 1
  [ 11] getparam 1 .............................. <aPoints>
  [ 13] getobjprop 169 .......................... <aPoints.count>
  [ 15] lteq
  [ 16] jmpifz [ 61] ............................ repeat with i = 1 to aPoints.count
  [ 19] getparam 1 .............................. <aPoints>
  [ 21] getlocal 1 .............................. <i>
  [ 23] pusharglist 2 ........................... <aPoints, i>
  [ 25] objcall 196 ............................. <aPoints[i]>
  [ 27] setlocal 2 .............................. aPoint = aPoints[i]
  [ 29] getlocal 2 .............................. <aPoint>
  [ 31] getparam 2 .............................. <iXChange>
  [ 33] getparam 3 .............................. <iYChange>
  [ 35] pusharglist 2 ........................... <iXChange, iYChange>
  [ 37] extcall 295 ............................. <point(iXChange, iYChange)>
  [ 40] add ..................................... <aPoint + point(iXChange, iYChange)>
  [ 41] setlocal 3 .............................. aNewPoint = aPoint + point(iXChange, iYChange)
  [ 43] getlocal 0 .............................. <aTranslatedPoints>
  [ 45] getlocal 3 .............................. <aNewPoint>
  [ 47] pusharglistnoret 2 ...................... <aTranslatedPoints, aNewPoint>
  [ 49] objcall 387 ............................. aTranslatedPoints.append(aNewPoint)
  [ 52] pushint8 1
  [ 54] getlocal 1
  [ 56] add
  [ 57] setlocal 1
  [ 59] endrepeat [  9]
  [ 61] getlocal 0 .............................. <aTranslatedPoints>
  [ 63] pusharglistnoret 1 ...................... <aTranslatedPoints>
  [ 65] extcall 92 .............................. return aTranslatedPoints
  [ 67] ret
end

on rotatePoints me, aPoints, iTheta
  [  0] pusharglist 0 ........................... <[]>
  [  2] pushlist ................................ <[]>
  [  3] setlocal 0 .............................. aRotatedPoints = []
  [  5] pushint8 1 .............................. <1>
  [  7] setlocal 1
  [  9] getlocal 1
  [ 11] getparam 1 .............................. <aPoints>
  [ 13] getobjprop 169 .......................... <aPoints.count>
  [ 15] lteq
  [ 16] jmpifz [108] ............................ repeat with i = 1 to aPoints.count
  [ 19] getparam 1 .............................. <aPoints>
  [ 21] getlocal 1 .............................. <i>
  [ 23] pusharglist 2 ........................... <aPoints, i>
  [ 25] objcall 196 ............................. <aPoints[i]>
  [ 27] setlocal 2 .............................. aPoint = aPoints[i]
  [ 29] getlocal 2 .............................. <aPoint>
  [ 31] getobjprop 299 .......................... <aPoint.locH>
  [ 34] getparam 2 .............................. <iTheta>
  [ 36] pusharglist 1 ........................... <iTheta>
  [ 38] extcall 70 .............................. <cos(iTheta)>
  [ 40] mul ..................................... <aPoint.locH * cos(iTheta)>
  [ 41] getlocal 2 .............................. <aPoint>
  [ 43] getobjprop 300 .......................... <aPoint.locV>
  [ 46] getparam 2 .............................. <iTheta>
  [ 48] pusharglist 1 ........................... <iTheta>
  [ 50] extcall 66 .............................. <sin(iTheta)>
  [ 52] mul ..................................... <aPoint.locV * sin(iTheta)>
  [ 53] sub ..................................... <(aPoint.locH * cos(iTheta)) - (aPoint.locV * sin(iTheta))>
  [ 54] setlocal 3 .............................. iX = (aPoint.locH * cos(iTheta)) - (aPoint.locV * sin(iTheta))
  [ 56] getlocal 2 .............................. <aPoint>
  [ 58] getobjprop 299 .......................... <aPoint.locH>
  [ 61] getparam 2 .............................. <iTheta>
  [ 63] pusharglist 1 ........................... <iTheta>
  [ 65] extcall 66 .............................. <sin(iTheta)>
  [ 67] mul ..................................... <aPoint.locH * sin(iTheta)>
  [ 68] getlocal 2 .............................. <aPoint>
  [ 70] getobjprop 300 .......................... <aPoint.locV>
  [ 73] getparam 2 .............................. <iTheta>
  [ 75] pusharglist 1 ........................... <iTheta>
  [ 77] extcall 70 .............................. <cos(iTheta)>
  [ 79] mul ..................................... <aPoint.locV * cos(iTheta)>
  [ 80] add ..................................... <(aPoint.locH * sin(iTheta)) + (aPoint.locV * cos(iTheta))>
  [ 81] setlocal 4 .............................. iY = (aPoint.locH * sin(iTheta)) + (aPoint.locV * cos(iTheta))
  [ 83] getlocal 0 .............................. <aRotatedPoints>
  [ 85] getlocal 3 .............................. <iX>
  [ 87] getlocal 4 .............................. <iY>
  [ 89] pusharglist 2 ........................... <iX, iY>
  [ 91] extcall 295 ............................. <point(iX, iY)>
  [ 94] pusharglistnoret 2 ...................... <aRotatedPoints, point(iX, iY)>
  [ 96] objcall 387 ............................. aRotatedPoints.append(point(iX, iY))
  [ 99] pushint8 1
  [101] getlocal 1
  [103] add
  [104] setlocal 1
  [106] endrepeat [  9]
  [108] getlocal 0 .............................. <aRotatedPoints>
  [110] pusharglistnoret 1 ...................... <aRotatedPoints>
  [112] extcall 92 .............................. return aRotatedPoints
  [114] ret
end

on scalePoint
  [  0] ret
end

on rotatePoint me, aPoint, iDeg
  [  0] getparam 0 .............................. <me>
  [  2] getparam 2 .............................. <iDeg>
  [  4] pusharglist 2 ........................... <me, iDeg>
  [  6] objcall 67 .............................. <me.rad(iDeg)>
  [  8] setlocal 0 .............................. iTheta = me.rad(iDeg)
  [ 10] getparam 1 .............................. <aPoint>
  [ 12] getobjprop 299 .......................... <aPoint.locH>
  [ 15] getlocal 0 .............................. <iTheta>
  [ 17] pusharglist 1 ........................... <iTheta>
  [ 19] extcall 70 .............................. <cos(iTheta)>
  [ 21] mul ..................................... <aPoint.locH * cos(iTheta)>
  [ 22] getparam 1 .............................. <aPoint>
  [ 24] getobjprop 300 .......................... <aPoint.locV>
  [ 27] getlocal 0 .............................. <iTheta>
  [ 29] pusharglist 1 ........................... <iTheta>
  [ 31] extcall 66 .............................. <sin(iTheta)>
  [ 33] mul ..................................... <aPoint.locV * sin(iTheta)>
  [ 34] sub ..................................... <(aPoint.locH * cos(iTheta)) - (aPoint.locV * sin(iTheta))>
  [ 35] setlocal 1 .............................. iX = (aPoint.locH * cos(iTheta)) - (aPoint.locV * sin(iTheta))
  [ 37] getparam 1 .............................. <aPoint>
  [ 39] getobjprop 299 .......................... <aPoint.locH>
  [ 42] getlocal 0 .............................. <iTheta>
  [ 44] pusharglist 1 ........................... <iTheta>
  [ 46] extcall 66 .............................. <sin(iTheta)>
  [ 48] mul ..................................... <aPoint.locH * sin(iTheta)>
  [ 49] getparam 1 .............................. <aPoint>
  [ 51] getobjprop 300 .......................... <aPoint.locV>
  [ 54] getlocal 0 .............................. <iTheta>
  [ 56] pusharglist 1 ........................... <iTheta>
  [ 58] extcall 70 .............................. <cos(iTheta)>
  [ 60] mul ..................................... <aPoint.locV * cos(iTheta)>
  [ 61] add ..................................... <(aPoint.locH * sin(iTheta)) + (aPoint.locV * cos(iTheta))>
  [ 62] setlocal 2 .............................. iY = (aPoint.locH * sin(iTheta)) + (aPoint.locV * cos(iTheta))
  [ 64] getlocal 1 .............................. <iX>
  [ 66] getlocal 2 .............................. <iY>
  [ 68] pusharglist 2 ........................... <iX, iY>
  [ 70] extcall 295 ............................. <point(iX, iY)>
  [ 73] pusharglistnoret 1 ...................... <point(iX, iY)>
  [ 75] extcall 92 .............................. return point(iX, iY)
  [ 77] ret
end

on slope me, aPoint1, aPoint2
  [  0] getparam 2 .............................. <aPoint2>
  [  2] getobjprop 299 .......................... <aPoint2.locH>
  [  5] getparam 1 .............................. <aPoint1>
  [  7] getobjprop 300 .......................... <aPoint1.locV>
  [ 10] sub ..................................... <aPoint2.locH - aPoint1.locV>
  [ 11] getparam 2 .............................. <aPoint2>
  [ 13] getobjprop 299 .......................... <aPoint2.locH>
  [ 16] getparam 1 .............................. <aPoint1>
  [ 18] getobjprop 299 .......................... <aPoint1.locH>
  [ 21] sub ..................................... <aPoint2.locH - aPoint1.locH>
  [ 22] div ..................................... <(aPoint2.locH - aPoint1.locV) / (aPoint2.locH - aPoint1.locH)>
  [ 23] pusharglistnoret 1 ...................... <(aPoint2.locH - aPoint1.locV) / (aPoint2.locH - aPoint1.locH)>
  [ 25] extcall 92 .............................. return (aPoint2.locH - aPoint1.locV) / (aPoint2.locH - aPoint1.locH)
  [ 27] ret
end

on map me, inVal, inLow, inHi, outLow, outHi
  [  0] getparam 1 .............................. <inVal>
  [  2] getparam 2 .............................. <inLow>
  [  4] sub ..................................... <inVal - inLow>
  [  5] getparam 3 .............................. <inHi>
  [  7] getparam 2 .............................. <inLow>
  [  9] sub ..................................... <inHi - inLow>
  [ 10] div ..................................... <(inVal - inLow) / (inHi - inLow)>
  [ 11] getparam 5 .............................. <outHi>
  [ 13] getparam 4 .............................. <outLow>
  [ 15] sub ..................................... <outHi - outLow>
  [ 16] mul ..................................... <(inVal - inLow) / (inHi - inLow) * (outHi - outLow)>
  [ 17] getparam 4 .............................. <outLow>
  [ 19] add ..................................... <((inVal - inLow) / (inHi - inLow) * (outHi - outLow)) + outLow>
  [ 20] setlocal 0 .............................. outVal = ((inVal - inLow) / (inHi - inLow) * (outHi - outLow)) + outLow
  [ 22] getlocal 0 .............................. <outVal>
  [ 24] pusharglistnoret 1 ...................... <outVal>
  [ 26] extcall 92 .............................. return outVal
  [ 28] ret
end
