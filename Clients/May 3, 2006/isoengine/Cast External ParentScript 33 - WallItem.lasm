property sProdID, sPosId, sImageBase, aAttributes, sType, sAction, iState, sCastLib, bDragging, iFPS, iTimer, iSprite, bDebug, iX, iY, iZ, oLeftWallMember, oRightWallMember, oAction, iLastX, iLastY, bFirstDraw, oPreviewMember
global oIsoScene, oStudio, oRoom, oDenizenManager, oSession, oPossessionStudio, ElementMgr, gFeatureSet

on new me, _sProdId, _sPosId, _sImageBase, _sType, _sAction, _iState, _aAttributes, _sCastLib, _iZ, _iX, _iY, _iDir
  [  0] getparam 0 .............................. <me>
  [  2] pushzero ................................ <0>
  [  3] setobjprop 338 .......................... me.bDebug = 0
  [  6] getparam 0 .............................. <me>
  [  8] pushcons 0 .............................. <"new()">
  [ 10] pusharglistnoret 2 ...................... <me, "new()">
  [ 12] objcall 332 ............................. me.debug("new()")
  [ 15] getparam 0 .............................. <me>
  [ 17] getparam 1 .............................. <_sProdId>
  [ 19] setobjprop 161 .......................... me.sProdID = _sProdId
  [ 21] getparam 0 .............................. <me>
  [ 23] getparam 2 .............................. <_sPosId>
  [ 25] setobjprop 506 .......................... me.sPosId = _sPosId
  [ 28] getparam 0 .............................. <me>
  [ 30] getparam 3 .............................. <_sImageBase>
  [ 32] setobjprop 84 ........................... me.sImageBase = _sImageBase
  [ 34] getparam 0 .............................. <me>
  [ 36] getparam 4 .............................. <_sType>
  [ 38] setobjprop 507 .......................... me.sType = _sType
  [ 41] getparam 6 .............................. <_iState>
  [ 43] pusharglist 1 ........................... <_iState>
  [ 45] extcall 59 .............................. <voidp(_iState)>
  [ 47] jmpifz [ 59] ............................ if voidp(_iState) then / else
  [ 50] getparam 0 .............................. <me>
  [ 52] pushzero ................................ <0>
  [ 53] setobjprop 505 .......................... me.iState = 0
  [ 56] jmp [ 66]
  [ 59] getparam 0 .............................. <me>
  [ 61] getparam 6 .............................. <_iState>
  [ 63] setobjprop 505 .......................... me.iState = _iState
  [ 66] getparam 7 .............................. <_aAttributes>
  [ 68] pusharglist 1 ........................... <_aAttributes>
  [ 70] extcall 59 .............................. <voidp(_aAttributes)>
  [ 72] getparam 7 .............................. <_aAttributes>
  [ 74] pushcons 1 .............................. <EMPTY>
  [ 76] eq ...................................... <_aAttributes = EMPTY>
  [ 77] or ...................................... <voidp(_aAttributes) or (_aAttributes = EMPTY)>
  [ 78] jmpifz [ 91] ............................ if voidp(_aAttributes) or (_aAttributes = EMPTY) then / else
  [ 81] getparam 0 .............................. <me>
  [ 83] pusharglist 0 ........................... <[:]>
  [ 85] pushproplist ............................ <[:]>
  [ 86] setobjprop 102 .......................... me.aAttributes = [:]
  [ 88] jmp [ 97]
  [ 91] getparam 0 .............................. <me>
  [ 93] getparam 7 .............................. <_aAttributes>
  [ 95] setobjprop 102 .......................... me.aAttributes = _aAttributes
  [ 97] getparam 5 .............................. <_sAction>
  [ 99] pusharglist 1 ........................... <_sAction>
  [101] extcall 59 .............................. <voidp(_sAction)>
  [103] getparam 5 .............................. <_sAction>
  [105] pushcons 1 .............................. <EMPTY>
  [107] eq ...................................... <_sAction = EMPTY>
  [108] or ...................................... <voidp(_sAction) or (_sAction = EMPTY)>
  [109] jmpifz [121] ............................ if voidp(_sAction) or (_sAction = EMPTY) then / else
  [112] getparam 0 .............................. <me>
  [114] pushcons 2 .............................. <"Default">
  [116] setobjprop 101 .......................... me.sAction = "Default"
  [118] jmp [127]
  [121] getparam 0 .............................. <me>
  [123] getparam 5 .............................. <_sAction>
  [125] setobjprop 101 .......................... me.sAction = _sAction
  [127] getparam 0 .............................. <me>
  [129] pushcons 3 .............................. <"WallItems">
  [131] setobjprop 48 ........................... me.sCastLib = "WallItems"
  [133] getparam 0 .............................. <me>
  [135] pushzero ................................ <0>
  [136] setobjprop 1343 ......................... me.bDragging = 0
  [139] getparam 0 .............................. <me>
  [141] getglobal 133 ........................... <oIsoScene>
  [143] getchainedprop 339 ...................... <oIsoScene.oIsoConstants>
  [146] getobjprop 364 .......................... <oIsoScene.oIsoConstants.DEFAULT_FPS>
  [149] setobjprop 365 .......................... me.iFPS = oIsoScene.oIsoConstants.DEFAULT_FPS
  [152] getparam 0 .............................. <me>
  [154] getmovieprop 369 ........................ <the milliSeconds>
  [157] setobjprop 1344 ......................... me.iTimer = the milliSeconds
  [160] getparam 0 .............................. <me>
  [162] pushcons 4 .............................. <"leftwall ">
  [164] getparam 0 .............................. <me>
  [166] getobjprop 84 ........................... <me.sImageBase>
  [168] joinstr ................................. <"leftwall " & me.sImageBase>
  [169] pusharglist 1 ........................... <"leftwall " & me.sImageBase>
  [171] extcall 30 .............................. <member("leftwall " & me.sImageBase)>
  [173] setobjprop 1345 ......................... me.oLeftWallMember = member("leftwall " & me.sImageBase)
  [176] getparam 0 .............................. <me>
  [178] pushcons 5 .............................. <"rightwall ">
  [180] getparam 0 .............................. <me>
  [182] getobjprop 84 ........................... <me.sImageBase>
  [184] joinstr ................................. <"rightwall " & me.sImageBase>
  [185] pusharglist 1 ........................... <"rightwall " & me.sImageBase>
  [187] extcall 30 .............................. <member("rightwall " & me.sImageBase)>
  [189] setobjprop 1346 ......................... me.oRightWallMember = member("rightwall " & me.sImageBase)
  [192] getparam 0 .............................. <me>
  [194] getglobal 133 ........................... <oIsoScene>
  [196] getchainedprop 396 ...................... <oIsoScene.oWallItems>
  [199] pusharglist 1 ........................... <oIsoScene.oWallItems>
  [201] objcall 688 ............................. <oIsoScene.oWallItems.getPooledSprite()>
  [204] setobjprop 129 .......................... me.iSprite = oIsoScene.oWallItems.getPooledSprite()
  [206] getparam 0 .............................. <me>
  [208] getobjprop 129 .......................... <me.iSprite>
  [210] pusharglist 1 ........................... <me.iSprite>
  [212] extcall 119 ............................. <sprite(me.iSprite)>
  [214] getparam 0 .............................. <me>
  [216] getobjprop 1345 ......................... <me.oLeftWallMember>
  [219] setobjprop 30 ........................... sprite(me.iSprite).member = me.oLeftWallMember
  [221] getprop 129 ............................. <iSprite>
  [223] pusharglist 1 ........................... <iSprite>
  [225] extcall 119 ............................. <sprite(iSprite)>
  [227] getchainedprop 193 ...................... <sprite(iSprite).scriptInstanceList>
  [229] pushcons 6 .............................. <"WallItemScript">
  [231] pusharglist 1 ........................... <"WallItemScript">
  [233] extcall 194 ............................. <script("WallItemScript")>
  [235] getparam 0 .............................. <me>
  [237] pusharglist 2 ........................... <script("WallItemScript"), me>
  [239] objcall 0 ............................... <script("WallItemScript").new(me)>
  [241] pusharglistnoret 2 ...................... <sprite(iSprite).scriptInstanceList, script("WallItemScript").new(me)>
  [243] objcall 140 ............................. sprite(iSprite).scriptInstanceList.add(script("WallItemScript").new(me))
  [245] getparam 0 .............................. <me>
  [247] getobjprop 129 .......................... <me.iSprite>
  [249] pusharglist 1 ........................... <me.iSprite>
  [251] extcall 119 ............................. <sprite(me.iSprite)>
  [253] pushint8 1 .............................. <1>
  [255] setobjprop 695 .......................... sprite(me.iSprite).visible = 1
  [258] getparam 0 .............................. <me>
  [260] getobjprop 129 .......................... <me.iSprite>
  [262] pusharglist 1 ........................... <me.iSprite>
  [264] extcall 119 ............................. <sprite(me.iSprite)>
  [266] getchainedprop 30 ....................... <sprite(me.iSprite).member>
  [268] getobjprop 1247 ......................... <sprite(me.iSprite).member.type>
  [271] pushsymb 1347 ........................... <#flash>
  [274] eq ...................................... <sprite(me.iSprite).member.type = #flash>
  [275] jmpifz [315] ............................ if sprite(me.iSprite).member.type = #flash then / else
  [278] getparam 0 .............................. <me>
  [280] getobjprop 129 .......................... <me.iSprite>
  [282] pusharglist 1 ........................... <me.iSprite>
  [284] extcall 119 ............................. <sprite(me.iSprite)>
  [286] pushint8 36 ............................. <36>
  [288] setobjprop 37 ........................... sprite(me.iSprite).ink = 36
  [290] getparam 0 .............................. <me>
  [292] pushcons 7 .............................. <"WallItem is flashMember. Sprite.ink is:">
  [294] getparam 0 .............................. <me>
  [296] getobjprop 129 .......................... <me.iSprite>
  [298] pusharglist 1 ........................... <me.iSprite>
  [300] extcall 119 ............................. <sprite(me.iSprite)>
  [302] getobjprop 37 ........................... <sprite(me.iSprite).ink>
  [304] joinpadstr .............................. <"WallItem is flashMember. Sprite.ink is:" && sprite(me.iSprite).ink>
  [305] pushint8 1 .............................. <1>
  [307] pusharglistnoret 3 ...................... <me, "WallItem is flashMember. Sprite.ink is:" && sprite(me.iSprite).ink, 1>
  [309] objcall 332 ............................. me.debug("WallItem is flashMember. Sprite.ink is:" && sprite(me.iSprite).ink, 1)
  [312] jmp [327]
  [315] getparam 0 .............................. <me>
  [317] getobjprop 129 .......................... <me.iSprite>
  [319] pusharglist 1 ........................... <me.iSprite>
  [321] extcall 119 ............................. <sprite(me.iSprite)>
  [323] pushint8 8 .............................. <8>
  [325] setobjprop 37 ........................... sprite(me.iSprite).ink = 8
  [327] getparam 10 ............................. <_iX>
  [329] pusharglist 1 ........................... <_iX>
  [331] extcall 59 .............................. <voidp(_iX)>
  [333] jmpifz [345] ............................ if voidp(_iX) then / else
  [336] getparam 0 .............................. <me>
  [338] pushzero ................................ <0>
  [339] setobjprop 548 .......................... me.iX = 0
  [342] jmp [352]
  [345] getparam 0 .............................. <me>
  [347] getparam 10 ............................. <_iX>
  [349] setobjprop 548 .......................... me.iX = _iX
  [352] getparam 11 ............................. <_iY>
  [354] pusharglist 1 ........................... <_iY>
  [356] extcall 59 .............................. <voidp(_iY)>
  [358] jmpifz [370] ............................ if voidp(_iY) then / else
  [361] getparam 0 .............................. <me>
  [363] pushzero ................................ <0>
  [364] setobjprop 635 .......................... me.iY = 0
  [367] jmp [377]
  [370] getparam 0 .............................. <me>
  [372] getparam 11 ............................. <_iY>
  [374] setobjprop 635 .......................... me.iY = _iY
  [377] getparam 9 .............................. <_iZ>
  [379] pusharglist 1 ........................... <_iZ>
  [381] extcall 59 .............................. <voidp(_iZ)>
  [383] jmpifz [404] ............................ if voidp(_iZ) then / else
  [386] getparam 0 .............................. <me>
  [388] getparam 0 .............................. <me>
  [390] getobjprop 129 .......................... <me.iSprite>
  [392] pusharglist 1 ........................... <me.iSprite>
  [394] extcall 119 ............................. <sprite(me.iSprite)>
  [396] getobjprop 138 .......................... <sprite(me.iSprite).locZ>
  [398] setobjprop 546 .......................... me.iZ = sprite(me.iSprite).locZ
  [401] jmp [411]
  [404] getparam 0 .............................. <me>
  [406] getparam 9 .............................. <_iZ>
  [408] setobjprop 546 .......................... me.iZ = _iZ
  [411] getparam 0 .............................. <me>
  [413] getobjprop 84 ........................... <me.sImageBase>
  [415] pushcons 8 .............................. <"_small">
  [417] joinstr ................................. <me.sImageBase & "_small">
  [418] setlocal 0 .............................. sPreviewName = me.sImageBase & "_small"
  [420] getparam 0 .............................. <me>
  [422] getlocal 0 .............................. <sPreviewName>
  [424] pusharglist 1 ........................... <sPreviewName>
  [426] extcall 30 .............................. <member(sPreviewName)>
  [428] setobjprop 131 .......................... me.oPreviewMember = member(sPreviewName)
  [430] getparam 0 .............................. <me>
  [432] pushint8 1 .............................. <1>
  [434] setobjprop 1348 ......................... me.bFirstDraw = 1
  [437] getparam 0 .............................. <me>
  [439] pusharglistnoret 1 ...................... <me>
  [441] extcall 52 .............................. return me
  [443] ret
end

on mouseIsOverITem me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 129 .......................... <me.iSprite>
  [  4] pusharglist 1 ........................... <me.iSprite>
  [  6] extcall 119 ............................. <sprite(me.iSprite)>
  [  8] pusharglist 1 ........................... <sprite(me.iSprite)>
  [ 10] extcall 967 ............................. <rollover(sprite(me.iSprite))>
  [ 13] pusharglistnoret 1 ...................... <rollover(sprite(me.iSprite))>
  [ 15] extcall 52 .............................. return rollover(sprite(me.iSprite))
  [ 17] ret
end

on getType me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 507 .......................... <me.sType>
  [  5] pusharglistnoret 1 ...................... <me.sType>
  [  7] extcall 52 .............................. return me.sType
  [  9] ret
end

on sendPutInStudio me
  [  0] getparam 0 .............................. <me>
  [  2] getglobal 133 ........................... <oIsoScene>
  [  4] getobjprop 240 .......................... <oIsoScene.oSelectedItem>
  [  6] pusharglist 2 ........................... <me, oIsoScene.oSelectedItem>
  [  8] objcall 254 ............................. <me.equals(oIsoScene.oSelectedItem)>
  [ 10] not ..................................... <not me.equals(oIsoScene.oSelectedItem)>
  [ 11] jmpifz [ 18] ............................ if not me.equals(oIsoScene.oSelectedItem) then
  [ 14] pusharglistnoret 0 ...................... <>
  [ 16] extcall 52 .............................. return 
  [ 18] getglobal 133 ........................... <oIsoScene>
  [ 20] getchainedprop 396 ...................... <oIsoScene.oWallItems>
  [ 23] getparam 0 .............................. <me>
  [ 25] pusharglistnoret 2 ...................... <oIsoScene.oWallItems, me>
  [ 27] objcall 1273 ............................ oIsoScene.oWallItems.shiftItem(me)
  [ 30] getglobal 133 ........................... <oIsoScene>
  [ 32] getchainedprop 396 ...................... <oIsoScene.oWallItems>
  [ 35] pusharglist 1 ........................... <oIsoScene.oWallItems>
  [ 37] objcall 1266 ............................ <oIsoScene.oWallItems.setDepthsByPos()>
  [ 40] setlocal 0 .............................. aDirtyItems = oIsoScene.oWallItems.setDepthsByPos()
  [ 42] getglobal 133 ........................... <oIsoScene>
  [ 44] getchainedprop 396 ...................... <oIsoScene.oWallItems>
  [ 47] pusharglistnoret 1 ...................... <oIsoScene.oWallItems>
  [ 49] objcall 1271 ............................ oIsoScene.oWallItems.sortItemsByDepth()
  [ 52] getglobal 133 ........................... <oIsoScene>
  [ 54] getchainedprop 396 ...................... <oIsoScene.oWallItems>
  [ 57] pusharglistnoret 1 ...................... <oIsoScene.oWallItems>
  [ 59] objcall 413 ............................. oIsoScene.oWallItems.drawAll()
  [ 62] getglobal 256 ........................... <oSession>
  [ 65] pusharglist 1 ........................... <oSession>
  [ 67] extcall 59 .............................. <voidp(oSession)>
  [ 69] not ..................................... <not voidp(oSession)>
  [ 70] getglobal 258 ........................... <oPossessionStudio>
  [ 73] pusharglist 1 ........................... <oPossessionStudio>
  [ 75] extcall 59 .............................. <voidp(oPossessionStudio)>
  [ 77] not ..................................... <not voidp(oPossessionStudio)>
  [ 78] and ..................................... <not voidp(oSession) and not voidp(oPossessionStudio)>
  [ 79] jmpifz [149] ............................ if not voidp(oSession) and not voidp(oPossessionStudio) then
  [ 82] getglobal 258 ........................... <oPossessionStudio>
  [ 85] getparam 0 .............................. <me>
  [ 87] pusharglistnoret 2 ...................... <oPossessionStudio, me>
  [ 89] objcall 262 ............................. oPossessionStudio.sendPutInStudio(me)
  [ 92] getlocal 0 .............................. <aDirtyItems>
  [ 94] peek 0
  [ 96] pusharglist 1
  [ 98] extcall 155
  [100] pushint8 1
  [102] peek 0
  [104] peek 2
  [106] lteq
  [107] jmpifz [147] ............................ repeat with oDirtyItem in aDirtyItems
  [110] peek 2
  [112] peek 1
  [114] pusharglist 2
  [116] extcall 72
  [118] setlocal 1
  [120] getlocal 1 .............................. <oDirtyItem>
  [122] getparam 0 .............................. <me>
  [124] pusharglist 2 ........................... <oDirtyItem, me>
  [126] objcall 254 ............................. <oDirtyItem.equals(me)>
  [128] not ..................................... <not oDirtyItem.equals(me)>
  [129] jmpifz [142] ............................ if not oDirtyItem.equals(me) then
  [132] getglobal 258 ........................... <oPossessionStudio>
  [135] getlocal 1 .............................. <oDirtyItem>
  [137] pusharglistnoret 2 ...................... <oPossessionStudio, oDirtyItem>
  [139] objcall 262 ............................. oPossessionStudio.sendPutInStudio(oDirtyItem)
  [142] pushint8 1
  [144] add
  [145] endrepeat [102]
  [147] pop 3
  [149] ret
end

on putInBackPack me
  [  0] getglobal 233 ........................... <gFeatureSet>
  [  2] pushsymb 251 ............................ <#FURNITURE_PICKUP>
  [  4] pusharglist 2 ........................... <gFeatureSet, #FURNITURE_PICKUP>
  [  6] objcall 235 ............................. <gFeatureSet.isEnabled(#FURNITURE_PICKUP)>
  [  8] not ..................................... <not gFeatureSet.isEnabled(#FURNITURE_PICKUP)>
  [  9] jmpifz [ 16] ............................ if not gFeatureSet.isEnabled(#FURNITURE_PICKUP) then
  [ 12] pusharglistnoret 0 ...................... <>
  [ 14] extcall 52 .............................. return 
  [ 16] getglobal 133 ........................... <oIsoScene>
  [ 18] pusharglistnoret 1 ...................... <oIsoScene>
  [ 20] objcall 257 ............................. oIsoScene.deleteSelectedItem()
  [ 23] getglobal 133 ........................... <oIsoScene>
  [ 25] getchainedprop 396 ...................... <oIsoScene.oWallItems>
  [ 28] pusharglist 1 ........................... <oIsoScene.oWallItems>
  [ 30] objcall 1266 ............................ <oIsoScene.oWallItems.setDepthsByPos()>
  [ 33] setlocal 0 .............................. aDirtyItems = oIsoScene.oWallItems.setDepthsByPos()
  [ 35] getglobal 133 ........................... <oIsoScene>
  [ 37] getchainedprop 396 ...................... <oIsoScene.oWallItems>
  [ 40] pusharglistnoret 1 ...................... <oIsoScene.oWallItems>
  [ 42] objcall 1271 ............................ oIsoScene.oWallItems.sortItemsByDepth()
  [ 45] getglobal 133 ........................... <oIsoScene>
  [ 47] getchainedprop 396 ...................... <oIsoScene.oWallItems>
  [ 50] pusharglistnoret 1 ...................... <oIsoScene.oWallItems>
  [ 52] objcall 413 ............................. oIsoScene.oWallItems.drawAll()
  [ 55] ret
end

on getProdId me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 161 .......................... <me.sProdID>
  [  4] pusharglistnoret 1 ...................... <me.sProdID>
  [  6] extcall 52 .............................. return me.sProdID
  [  8] ret
end

on getAction me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 268 .......................... <me.oAction>
  [  5] pusharglistnoret 1 ...................... <me.oAction>
  [  7] extcall 52 .............................. return me.oAction
  [  9] ret
end

on getPreviewImage me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 131 .......................... <me.oPreviewMember>
  [  4] pusharglistnoret 1 ...................... <me.oPreviewMember>
  [  6] extcall 52 .............................. return me.oPreviewMember
  [  8] ret
end

on equals me, _oItem
  [  0] getparam 1 .............................. <_oItem>
  [  2] pusharglist 1 ........................... <_oItem>
  [  4] extcall 59 .............................. <voidp(_oItem)>
  [  6] jmpifz [ 14] ............................ if voidp(_oItem) then
  [  9] pushzero ................................ <0>
  [ 10] pusharglistnoret 1 ...................... <0>
  [ 12] extcall 52 .............................. return 0
  [ 14] getparam 0 .............................. <me>
  [ 16] getobjprop 506 .......................... <me.sPosId>
  [ 19] getparam 1 .............................. <_oItem>
  [ 21] getobjprop 506 .......................... <_oItem.sPosId>
  [ 24] eq ...................................... <me.sPosId = _oItem.sPosId>
  [ 25] jmpifz [ 37] ............................ if me.sPosId = _oItem.sPosId then / else
  [ 28] pushint8 1 .............................. <1>
  [ 30] pusharglistnoret 1 ...................... <1>
  [ 32] extcall 52 .............................. return 1
  [ 34] jmp [ 42]
  [ 37] pushzero ................................ <0>
  [ 38] pusharglistnoret 1 ...................... <0>
  [ 40] extcall 52 .............................. return 0
  [ 42] ret
end

on resetLastPosition me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 1361 ......................... <me.iLastX>
  [  5] pusharglist 1 ........................... <me.iLastX>
  [  7] extcall 59 .............................. <voidp(me.iLastX)>
  [  9] getparam 0 .............................. <me>
  [ 11] getobjprop 1362 ......................... <me.iLastY>
  [ 14] pusharglist 1 ........................... <me.iLastY>
  [ 16] extcall 59 .............................. <voidp(me.iLastY)>
  [ 18] or ...................................... <voidp(me.iLastX) or voidp(me.iLastY)>
  [ 19] jmpifz [ 27] ............................ if voidp(me.iLastX) or voidp(me.iLastY) then
  [ 22] pushzero ................................ <0>
  [ 23] pusharglistnoret 1 ...................... <0>
  [ 25] extcall 52 .............................. return 0
  [ 27] getparam 0 .............................. <me>
  [ 29] getobjprop 1361 ......................... <me.iLastX>
  [ 32] pushzero ................................ <0>
  [ 33] eq ...................................... <me.iLastX = 0>
  [ 34] getparam 0 .............................. <me>
  [ 36] getobjprop 1362 ......................... <me.iLastY>
  [ 39] pushzero ................................ <0>
  [ 40] eq ...................................... <me.iLastY = 0>
  [ 41] or ...................................... <(me.iLastX = 0) or (me.iLastY = 0)>
  [ 42] jmpifz [ 50] ............................ if (me.iLastX = 0) or (me.iLastY = 0) then
  [ 45] pushzero ................................ <0>
  [ 46] pusharglistnoret 1 ...................... <0>
  [ 48] extcall 52 .............................. return 0
  [ 50] getparam 0 .............................. <me>
  [ 52] pushzero ................................ <0>
  [ 53] pusharglistnoret 2 ...................... <me, 0>
  [ 55] objcall 514 ............................. me.setDrag(0)
  [ 58] getparam 0 .............................. <me>
  [ 60] getparam 0 .............................. <me>
  [ 62] getobjprop 1361 ......................... <me.iLastX>
  [ 65] getparam 0 .............................. <me>
  [ 67] getobjprop 1362 ......................... <me.iLastY>
  [ 70] pusharglistnoret 3 ...................... <me, me.iLastX, me.iLastY>
  [ 72] objcall 1340 ............................ me.setGridPosition(me.iLastX, me.iLastY)
  [ 75] getparam 0 .............................. <me>
  [ 77] getobjprop 129 .......................... <me.iSprite>
  [ 79] pusharglist 1 ........................... <me.iSprite>
  [ 81] extcall 119 ............................. <sprite(me.iSprite)>
  [ 83] pushint8 100 ............................ <100>
  [ 85] setobjprop 694 .......................... sprite(me.iSprite).blend = 100
  [ 88] pushint8 1 .............................. <1>
  [ 90] pusharglistnoret 1 ...................... <1>
  [ 92] extcall 52 .............................. return 1
  [ 94] ret
end

on getPosId me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 506 .......................... <me.sPosId>
  [  5] pusharglistnoret 1 ...................... <me.sPosId>
  [  7] extcall 52 .............................. return me.sPosId
  [  9] ret
end

on getGridX me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 548 .......................... <me.iX>
  [  5] pusharglistnoret 1 ...................... <me.iX>
  [  7] extcall 52 .............................. return me.iX
  [  9] ret
end

on getGridY me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 635 .......................... <me.iY>
  [  5] pusharglistnoret 1 ...................... <me.iY>
  [  7] extcall 52 .............................. return me.iY
  [  9] ret
end

on getGridZ me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 546 .......................... <me.iZ>
  [  5] pusharglistnoret 1 ...................... <me.iZ>
  [  7] extcall 52 .............................. return me.iZ
  [  9] ret
end

on setXPos me, iXPos
  [  0] getparam 0 .............................. <me>
  [  2] getparam 1 .............................. <iXPos>
  [  4] setobjprop 548 .......................... me.iX = iXPos
  [  7] ret
end

on setYPos me, iYPos
  [  0] getparam 0 .............................. <me>
  [  2] getparam 1 .............................. <iYPos>
  [  4] setobjprop 635 .......................... me.iY = iYPos
  [  7] ret
end

on setZPos me, iZPos
  [  0] getparam 0 .............................. <me>
  [  2] getparam 1 .............................. <iZPos>
  [  4] setobjprop 546 .......................... me.iZ = iZPos
  [  7] ret
end

on setState me, _iState
  [  0] getparam 0 .............................. <me>
  [  2] getparam 1 .............................. <_iState>
  [  4] setobjprop 505 .......................... me.iState = _iState
  [  7] ret
end

on getDirection me
  [  0] pushzero ................................ <0>
  [  1] pusharglistnoret 1 ...................... <0>
  [  3] extcall 52 .............................. return 0
  [  5] ret
end

on getHeightOffset me
  [  0] pushzero ................................ <0>
  [  1] pusharglistnoret 1 ...................... <0>
  [  3] extcall 52 .............................. return 0
  [  5] ret
end

on setHeightOffset me
  [  0] pusharglistnoret 0 ...................... <>
  [  2] extcall 493 ............................. nothing()
  [  5] ret
end

on getState me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 505 .......................... <me.iState>
  [  5] pusharglistnoret 1 ...................... <me.iState>
  [  7] extcall 52 .............................. return me.iState
  [  9] ret
end

on getAttributes me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 102 .......................... <me.aAttributes>
  [  4] pusharglistnoret 1 ...................... <me.aAttributes>
  [  6] extcall 52 .............................. return me.aAttributes
  [  8] ret
end

on setAttributes me, _aAttributes
  [  0] getparam 0 .............................. <me>
  [  2] getparam 1 .............................. <_aAttributes>
  [  4] setobjprop 102 .......................... me.aAttributes = _aAttributes
  [  6] ret
end

on setAttribute me, sProp, sState
  [  0] getparam 0 .............................. <me>
  [  2] getchainedprop 102 ...................... <me.aAttributes>
  [  4] getparam 1 .............................. <sProp>
  [  6] pusharglist 1 ........................... <sProp>
  [  8] extcall 837 ............................. <symbol(sProp)>
  [ 11] getparam 2 .............................. <sState>
  [ 13] pusharglistnoret 3 ...................... <me.aAttributes, symbol(sProp), sState>
  [ 15] objcall 1366 ............................ me.aAttributes.setaProp(symbol(sProp), sState)
  [ 18] ret
end

on setItemsAllowedOnTop me, _bItemsAllowedOnTop
  [  0] ret
end

on getItemsAllowedOnTop me
  [  0] pushint8 1 .............................. <1>
  [  2] pusharglistnoret 1 ...................... <1>
  [  4] extcall 52 .............................. return 1
  [  6] ret
end

on deleteItem me
  [  0] getglobal 133 ........................... <oIsoScene>
  [  2] getchainedprop 396 ...................... <oIsoScene.oWallItems>
  [  5] getparam 0 .............................. <me>
  [  7] pusharglistnoret 2 ...................... <oIsoScene.oWallItems, me>
  [  9] objcall 977 ............................. oIsoScene.oWallItems.removeItem(me)
  [ 12] ret
end

on mouseDownEvent me, iSpriteNum, bDoubleClick
  [  0] pusharglist 0 ........................... <>
  [  2] thebuiltin 1142 ......................... <the doubleClick>
  [  5] getparam 2 .............................. <bDoubleClick>
  [  7] or ...................................... <the doubleClick or bDoubleClick>
  [  8] jmpifz [ 64] ............................ if the doubleClick or bDoubleClick then
  [ 11] getglobal 68 ............................ <gCatalog>
  [ 13] getparam 0 .............................. <me>
  [ 15] getobjprop 161 .......................... <me.sProdID>
  [ 17] pusharglist 1 ........................... <me.sProdID>
  [ 19] extcall 69 .............................. <integer(me.sProdID)>
  [ 21] pusharglist 2 ........................... <gCatalog, integer(me.sProdID)>
  [ 23] objcall 70 .............................. <gCatalog.getItemByProdId(integer(me.sProdID))>
  [ 25] setlocal 0 .............................. aCatItem = gCatalog.getItemByProdId(integer(me.sProdID))
  [ 27] getlocal 0 .............................. <aCatItem>
  [ 29] pushsymb 385 ............................ <#attributes>
  [ 32] pusharglist 2 ........................... <aCatItem, #attributes>
  [ 34] objcall 72 .............................. <aCatItem[#attributes]>
  [ 36] pushsymb 1368 ........................... <#link>
  [ 39] pusharglist 2 ........................... <aCatItem[#attributes], #link>
  [ 41] objcall 72 .............................. <aCatItem[#attributes][#link]>
  [ 43] setlocal 1 .............................. sCatItemLink = aCatItem[#attributes][#link]
  [ 45] getlocal 1 .............................. <sCatItemLink>
  [ 47] pusharglist 1 ........................... <sCatItemLink>
  [ 49] extcall 59 .............................. <voidp(sCatItemLink)>
  [ 51] not ..................................... <not voidp(sCatItemLink)>
  [ 52] jmpifz [ 64] ............................ if not voidp(sCatItemLink) then
  [ 55] getlocal 1 .............................. <sCatItemLink>
  [ 57] pushcons 9 .............................. <".">
  [ 59] pusharglistnoret 2 ...................... <sCatItemLink, ".">
  [ 61] extcall 1369 ............................ gotoNetPage(sCatItemLink, ".")
  [ 64] getparam 0 .............................. <me>
  [ 66] getobjprop 129 .......................... <me.iSprite>
  [ 68] pusharglist 1 ........................... <me.iSprite>
  [ 70] extcall 119 ............................. <sprite(me.iSprite)>
  [ 72] getchainedprop 30 ....................... <sprite(me.iSprite).member>
  [ 74] getobjprop 1247 ......................... <sprite(me.iSprite).member.type>
  [ 77] pushsymb 1347 ........................... <#flash>
  [ 80] eq ...................................... <sprite(me.iSprite).member.type = #flash>
  [ 81] jmpifz [101] ............................ if sprite(me.iSprite).member.type = #flash then / else
  [ 84] getparam 0 .............................. <me>
  [ 86] getchainedprop 268 ...................... <me.oAction>
  [ 89] getparam 0 .............................. <me>
  [ 91] getobjprop 129 .......................... <me.iSprite>
  [ 93] pusharglistnoret 2 ...................... <me.oAction, me.iSprite>
  [ 95] objcall 295 ............................. me.oAction.mouseDownEvent(me.iSprite)
  [ 98] jmp [111]
  [101] getparam 0 .............................. <me>
  [103] getchainedprop 268 ...................... <me.oAction>
  [106] pusharglistnoret 1 ...................... <me.oAction>
  [108] objcall 295 ............................. me.oAction.mouseDownEvent()
  [111] pushint8 1 .............................. <1>
  [113] pusharglistnoret 1 ...................... <1>
  [115] extcall 52 .............................. return 1
  [117] ret
end

on testTradeDrop me
  [  0] pushzero ................................ <0>
  [  1] setlocal 0 .............................. bDropped = 0
  [  3] getglobal 172 ........................... <ElementMgr>
  [  5] pusharglist 1 ........................... <ElementMgr>
  [  7] objcall 499 ............................. <ElementMgr.getTrader()>
  [ 10] pusharglist 1 ........................... <ElementMgr.getTrader()>
  [ 12] extcall 59 .............................. <voidp(ElementMgr.getTrader())>
  [ 14] not ..................................... <not voidp(ElementMgr.getTrader())>
  [ 15] setlocal 1 .............................. bTrading = not voidp(ElementMgr.getTrader())
  [ 17] getlocal 1 .............................. <bTrading>
  [ 19] jmpifz [ 32] ............................ if bTrading then
  [ 22] pushsymb 427 ............................ <#testTradeDrop>
  [ 25] pusharglist 1 ........................... <#testTradeDrop>
  [ 27] extcall 1371 ............................ <sendAllSprites(#testTradeDrop)>
  [ 30] setlocal 0 .............................. bDropped = sendAllSprites(#testTradeDrop)
  [ 32] getlocal 0 .............................. <bDropped>
  [ 34] pusharglist 1 ........................... <bDropped>
  [ 36] extcall 59 .............................. <voidp(bDropped)>
  [ 38] jmpifz [ 46] ............................ if voidp(bDropped) then
  [ 41] pushzero ................................ <0>
  [ 42] pusharglistnoret 1 ...................... <0>
  [ 44] extcall 52 .............................. return 0
  [ 46] getlocal 0 .............................. <bDropped>
  [ 48] pusharglistnoret 1 ...................... <bDropped>
  [ 50] extcall 52 .............................. return bDropped
  [ 52] ret
end

on setDragPosition me, _iX, _iY
  [  0] getparam 0 .............................. <me>
  [  2] getparam 1 .............................. <_iX>
  [  4] setobjprop 548 .......................... me.iX = _iX
  [  7] getparam 0 .............................. <me>
  [  9] getparam 1 .............................. <_iX>
  [ 11] setobjprop 635 .......................... me.iY = _iX
  [ 14] getparam 0 .............................. <me>
  [ 16] pusharglistnoret 1 ...................... <me>
  [ 18] objcall 503 ............................. me.draw()
  [ 21] ret
end

on setGridPosition me, _iX, _iY, _iZ
  [  0] getparam 0 .............................. <me>
  [  2] getparam 1 .............................. <_iX>
  [  4] setobjprop 548 .......................... me.iX = _iX
  [  7] getparam 0 .............................. <me>
  [  9] getparam 2 .............................. <_iY>
  [ 11] setobjprop 635 .......................... me.iY = _iY
  [ 14] getparam 3 .............................. <_iZ>
  [ 16] pusharglist 1 ........................... <_iZ>
  [ 18] extcall 59 .............................. <voidp(_iZ)>
  [ 20] not ..................................... <not voidp(_iZ)>
  [ 21] jmpifz [ 31] ............................ if not voidp(_iZ) then
  [ 24] getparam 0 .............................. <me>
  [ 26] getparam 3 .............................. <_iZ>
  [ 28] setobjprop 546 .......................... me.iZ = _iZ
  [ 31] getparam 0 .............................. <me>
  [ 33] pusharglistnoret 1 ...................... <me>
  [ 35] objcall 503 ............................. me.draw()
  [ 38] ret
end

on setDirection me, iDir
  [  0] ret
end

on setDrag me, bState
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 1343 ......................... <me.bDragging>
  [  5] not ..................................... <not me.bDragging>
  [  6] getparam 1 .............................. <bState>
  [  8] and ..................................... <not me.bDragging and bState>
  [  9] jmpifz [ 32] ............................ if not me.bDragging and bState then
  [ 12] getparam 0 .............................. <me>
  [ 14] getparam 0 .............................. <me>
  [ 16] getobjprop 548 .......................... <me.iX>
  [ 19] setobjprop 1361 ......................... me.iLastX = me.iX
  [ 22] getparam 0 .............................. <me>
  [ 24] getparam 0 .............................. <me>
  [ 26] getobjprop 635 .......................... <me.iY>
  [ 29] setobjprop 1362 ......................... me.iLastY = me.iY
  [ 32] getparam 0 .............................. <me>
  [ 34] getparam 1 .............................. <bState>
  [ 36] setobjprop 1343 ......................... me.bDragging = bState
  [ 39] getparam 0 .............................. <me>
  [ 41] pusharglistnoret 1 ...................... <me>
  [ 43] objcall 503 ............................. me.draw()
  [ 46] ret
end

on getDrag me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 1343 ......................... <me.bDragging>
  [  5] pusharglistnoret 1 ...................... <me.bDragging>
  [  7] extcall 52 .............................. return me.bDragging
  [  9] ret
end

on drop me
  [  0] getparam 0 .............................. <me>
  [  2] pusharglist 1 ........................... <me>
  [  4] objcall 503 ............................. <me.draw()>
  [  7] setlocal 0 .............................. bIsEligible = me.draw()
  [  9] getlocal 0 .............................. <bIsEligible>
  [ 11] pusharglistnoret 1 ...................... <bIsEligible>
  [ 13] extcall 52 .............................. return bIsEligible
  [ 15] ret
end

on destroy me
  [  0] getglobal 133 ........................... <oIsoScene>
  [  2] getchainedprop 396 ...................... <oIsoScene.oWallItems>
  [  5] getparam 0 .............................. <me>
  [  7] getobjprop 129 .......................... <me.iSprite>
  [  9] pusharglistnoret 2 ...................... <oIsoScene.oWallItems, me.iSprite>
  [ 11] objcall 728 ............................. oIsoScene.oWallItems.returnPooledSprite(me.iSprite)
  [ 14] getmovieprop 406 ........................ <the actorList>
  [ 17] getparam 0 .............................. <me>
  [ 19] pusharglistnoret 2 ...................... <the actorList, me>
  [ 21] objcall 571 ............................. (the actorList).deleteOne(me)
  [ 24] ret
end

on getSprites me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 129 .......................... <me.iSprite>
  [  4] pusharglist 1 ........................... <[me.iSprite]>
  [  6] pushlist ................................ <[me.iSprite]>
  [  7] pusharglistnoret 1 ...................... <[me.iSprite]>
  [  9] extcall 52 .............................. return [me.iSprite]
  [ 11] ret
end

on stepFrame me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 1343 ......................... <me.bDragging>
  [  5] not ..................................... <not me.bDragging>
  [  6] jmpifz [ 13] ............................ if not me.bDragging then
  [  9] pusharglistnoret 0 ...................... <>
  [ 11] extcall 52 .............................. return 
  [ 13] getmovieprop 369 ........................ <the milliSeconds>
  [ 16] getparam 0 .............................. <me>
  [ 18] getobjprop 1344 ......................... <me.iTimer>
  [ 21] sub ..................................... <the milliSeconds - me.iTimer>
  [ 22] pushint16 1000 .......................... <1000>
  [ 25] getparam 0 .............................. <me>
  [ 27] getobjprop 365 .......................... <me.iFPS>
  [ 30] div ..................................... <1000 / me.iFPS>
  [ 31] gteq .................................... <(the milliSeconds - me.iTimer) >= (1000 / me.iFPS)>
  [ 32] jmpifz [ 70] ............................ if (the milliSeconds - me.iTimer) >= (1000 / me.iFPS) then
  [ 35] getparam 0 .............................. <me>
  [ 37] getmovieprop 369 ........................ <the milliSeconds>
  [ 40] setobjprop 1344 ......................... me.iTimer = the milliSeconds
  [ 43] getparam 0 .............................. <me>
  [ 45] pusharglist 0 ........................... <>
  [ 47] thebuiltin 542 .......................... <the mouseH>
  [ 50] setobjprop 548 .......................... me.iX = the mouseH
  [ 53] getparam 0 .............................. <me>
  [ 55] pusharglist 0 ........................... <>
  [ 57] thebuiltin 543 .......................... <the mouseV>
  [ 60] setobjprop 635 .......................... me.iY = the mouseV
  [ 63] getparam 0 .............................. <me>
  [ 65] pusharglistnoret 1 ...................... <me>
  [ 67] objcall 503 ............................. me.draw()
  [ 70] ret
end

on update me
  [  0] getglobal 133 ........................... <oIsoScene>
  [  2] getchainedprop 396 ...................... <oIsoScene.oWallItems>
  [  5] pusharglistnoret 1 ...................... <oIsoScene.oWallItems>
  [  7] objcall 1271 ............................ oIsoScene.oWallItems.sortItemsByDepth()
  [ 10] getparam 0 .............................. <me>
  [ 12] pushint8 1 .............................. <1>
  [ 14] pusharglistnoret 2 ...................... <me, 1>
  [ 16] objcall 503 ............................. me.draw(1)
  [ 19] ret
end

on draw me, bIsEligible
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 129 .......................... <me.iSprite>
  [  4] pusharglist 1 ........................... <me.iSprite>
  [  6] extcall 119 ............................. <sprite(me.iSprite)>
  [  8] getparam 0 .............................. <me>
  [ 10] getobjprop 548 .......................... <me.iX>
  [ 13] setobjprop 143 .......................... sprite(me.iSprite).locH = me.iX
  [ 15] getparam 0 .............................. <me>
  [ 17] getobjprop 129 .......................... <me.iSprite>
  [ 19] pusharglist 1 ........................... <me.iSprite>
  [ 21] extcall 119 ............................. <sprite(me.iSprite)>
  [ 23] getparam 0 .............................. <me>
  [ 25] getobjprop 635 .......................... <me.iY>
  [ 28] setobjprop 122 .......................... sprite(me.iSprite).locV = me.iY
  [ 30] getglobal 172 ........................... <ElementMgr>
  [ 32] pusharglist 1 ........................... <ElementMgr>
  [ 34] objcall 499 ............................. <ElementMgr.getTrader()>
  [ 37] pusharglist 1 ........................... <ElementMgr.getTrader()>
  [ 39] extcall 59 .............................. <voidp(ElementMgr.getTrader())>
  [ 41] not ..................................... <not voidp(ElementMgr.getTrader())>
  [ 42] setlocal 0 .............................. bTrading = not voidp(ElementMgr.getTrader())
  [ 44] getparam 1 .............................. <bIsEligible>
  [ 46] pusharglist 1 ........................... <bIsEligible>
  [ 48] extcall 59 .............................. <voidp(bIsEligible)>
  [ 50] jmpifz [ 56] ............................ if voidp(bIsEligible) then
  [ 53] pushzero ................................ <0>
  [ 54] setparam 1 .............................. bIsEligible = 0
  [ 56] getparam 0 .............................. <me>
  [ 58] getobjprop 548 .......................... <me.iX>
  [ 61] getparam 0 .............................. <me>
  [ 63] getobjprop 635 .......................... <me.iY>
  [ 66] pusharglist 2 ........................... <me.iX, me.iY>
  [ 68] extcall 39 .............................. <point(me.iX, me.iY)>
  [ 70] setlocal 1 .............................. oPoint = point(me.iX, me.iY)
  [ 72] getglobal 133 ........................... <oIsoScene>
  [ 74] getchainedprop 393 ...................... <oIsoScene.oWall>
  [ 77] getlocal 1 .............................. <oPoint>
  [ 79] pusharglist 2 ........................... <oIsoScene.oWall, oPoint>
  [ 81] objcall 1187 ............................ <oIsoScene.oWall.getSpriteUnderPoint(oPoint)>
  [ 84] setlocal 2 .............................. iWallSprite = oIsoScene.oWall.getSpriteUnderPoint(oPoint)
  [ 86] getlocal 2 .............................. <iWallSprite>
  [ 88] pusharglist 1 ........................... <iWallSprite>
  [ 90] extcall 59 .............................. <voidp(iWallSprite)>
  [ 92] not ..................................... <not voidp(iWallSprite)>
  [ 93] jmpifz [141] ............................ if not voidp(iWallSprite) then
  [ 96] getlocal 2 .............................. <iWallSprite>
  [ 98] pushsymb 1199 ........................... <#getId1>
  [101] pusharglist 2 ........................... <iWallSprite, #getId1>
  [103] extcall 420 ............................. <sendSprite(iWallSprite, #getId1)>
  [106] setlocal 3 .............................. sDir = sendSprite(iWallSprite, #getId1)
  [108] getlocal 2 .............................. <iWallSprite>
  [110] pushsymb 1373 ........................... <#getId4>
  [113] pusharglist 2 ........................... <iWallSprite, #getId4>
  [115] extcall 420 ............................. <sendSprite(iWallSprite, #getId4)>
  [118] setlocal 4 .............................. sCorner = sendSprite(iWallSprite, #getId4)
  [120] getparam 1 .............................. <bIsEligible>
  [122] not ..................................... <not bIsEligible>
  [123] jmpifz [141] ............................ if not bIsEligible then
  [126] getparam 0 .............................. <me>
  [128] getlocal 2 .............................. <iWallSprite>
  [130] getlocal 3 .............................. <sDir>
  [132] getlocal 4 .............................. <sCorner>
  [134] pusharglist 4 ........................... <me, iWallSprite, sDir, sCorner>
  [136] objcall 1342 ............................ <me.getEligibleToDrop(iWallSprite, sDir, sCorner)>
  [139] setparam 1 .............................. bIsEligible = me.getEligibleToDrop(iWallSprite, sDir, sCorner)
  [141] getparam 1 .............................. <bIsEligible>
  [143] getlocal 0 .............................. <bTrading>
  [145] or ...................................... <bIsEligible or bTrading>
  [146] getparam 0 .............................. <me>
  [148] getobjprop 1348 ......................... <me.bFirstDraw>
  [151] or ...................................... <bIsEligible or bTrading or me.bFirstDraw>
  [152] jmpifz [171] ............................ if bIsEligible or bTrading or me.bFirstDraw then / else
  [155] getparam 0 .............................. <me>
  [157] getobjprop 129 .......................... <me.iSprite>
  [159] pusharglist 1 ........................... <me.iSprite>
  [161] extcall 119 ............................. <sprite(me.iSprite)>
  [163] pushint8 100 ............................ <100>
  [165] setobjprop 694 .......................... sprite(me.iSprite).blend = 100
  [168] jmp [184]
  [171] getparam 0 .............................. <me>
  [173] getobjprop 129 .......................... <me.iSprite>
  [175] pusharglist 1 ........................... <me.iSprite>
  [177] extcall 119 ............................. <sprite(me.iSprite)>
  [179] pushint8 30 ............................. <30>
  [181] setobjprop 694 .......................... sprite(me.iSprite).blend = 30
  [184] getparam 0 .............................. <me>
  [186] pusharglist 1 ........................... <me>
  [188] objcall 255 ............................. <me.getDrag()>
  [190] jmpifz [243] ............................ if me.getDrag() then / else
  [193] getparam 1 .............................. <bIsEligible>
  [195] getlocal 0 .............................. <bTrading>
  [197] not ..................................... <not bTrading>
  [198] and ..................................... <bIsEligible and not bTrading>
  [199] jmpifz [225] ............................ if bIsEligible and not bTrading then / else
  [202] getparam 0 .............................. <me>
  [204] getobjprop 129 .......................... <me.iSprite>
  [206] pusharglist 1 ........................... <me.iSprite>
  [208] extcall 119 ............................. <sprite(me.iSprite)>
  [210] getglobal 133 ........................... <oIsoScene>
  [212] getchainedprop 396 ...................... <oIsoScene.oWallItems>
  [215] pusharglist 1 ........................... <oIsoScene.oWallItems>
  [217] objcall 1269 ............................ <oIsoScene.oWallItems.getMaxDepth()>
  [220] setobjprop 138 .......................... sprite(me.iSprite).locZ = oIsoScene.oWallItems.getMaxDepth()
  [222] jmp [240]
  [225] getparam 0 .............................. <me>
  [227] getobjprop 129 .......................... <me.iSprite>
  [229] pusharglist 1 ........................... <me.iSprite>
  [231] extcall 119 ............................. <sprite(me.iSprite)>
  [233] pusharglist 0 ........................... <>
  [235] thebuiltin 708 .......................... <the maxinteger>
  [238] setobjprop 138 .......................... sprite(me.iSprite).locZ = the maxinteger
  [240] jmp [258]
  [243] getparam 0 .............................. <me>
  [245] getobjprop 129 .......................... <me.iSprite>
  [247] pusharglist 1 ........................... <me.iSprite>
  [249] extcall 119 ............................. <sprite(me.iSprite)>
  [251] getparam 0 .............................. <me>
  [253] getobjprop 546 .......................... <me.iZ>
  [256] setobjprop 138 .......................... sprite(me.iSprite).locZ = me.iZ
  [258] getlocal 3 .............................. <sDir>
  [260] pusharglist 1 ........................... <sDir>
  [262] extcall 59 .............................. <voidp(sDir)>
  [264] not ..................................... <not voidp(sDir)>
  [265] jmpifz [321] ............................ if not voidp(sDir) then
  [268] getlocal 3 .............................. <sDir>
  [270] peek 0 .................................. case sDir of
  [272] pushcons 10 ............................. <"left">
  [274] eq
  [275] jmpifz [296] ............................ (case) "left":
  [278] getparam 0 .............................. <me>
  [280] getobjprop 129 .......................... <me.iSprite>
  [282] pusharglist 1 ........................... <me.iSprite>
  [284] extcall 119 ............................. <sprite(me.iSprite)>
  [286] getparam 0 .............................. <me>
  [288] getobjprop 1345 ......................... <me.oLeftWallMember>
  [291] setobjprop 30 ........................... sprite(me.iSprite).member = me.oLeftWallMember
  [293] jmp [319]
  [296] peek 0
  [298] pushcons 11 ............................. <"right">
  [300] eq
  [301] jmpifz [319] ............................ (case) "right":
  [304] getparam 0 .............................. <me>
  [306] getobjprop 129 .......................... <me.iSprite>
  [308] pusharglist 1 ........................... <me.iSprite>
  [310] extcall 119 ............................. <sprite(me.iSprite)>
  [312] getparam 0 .............................. <me>
  [314] getobjprop 1346 ......................... <me.oRightWallMember>
  [317] setobjprop 30 ........................... sprite(me.iSprite).member = me.oRightWallMember
  [319] pop 1 ................................... end case
  [321] getparam 0 .............................. <me>
  [323] getobjprop 129 .......................... <me.iSprite>
  [325] pusharglist 1 ........................... <me.iSprite>
  [327] extcall 119 ............................. <sprite(me.iSprite)>
  [329] getparam 0 .............................. <me>
  [331] getobjprop 129 .......................... <me.iSprite>
  [333] pusharglist 1 ........................... <me.iSprite>
  [335] extcall 119 ............................. <sprite(me.iSprite)>
  [337] getchainedprop 30 ....................... <sprite(me.iSprite).member>
  [339] getobjprop 141 .......................... <sprite(me.iSprite).member.width>
  [341] setobjprop 141 .......................... sprite(me.iSprite).width = sprite(me.iSprite).member.width
  [343] getparam 0 .............................. <me>
  [345] getobjprop 129 .......................... <me.iSprite>
  [347] pusharglist 1 ........................... <me.iSprite>
  [349] extcall 119 ............................. <sprite(me.iSprite)>
  [351] getparam 0 .............................. <me>
  [353] getobjprop 129 .......................... <me.iSprite>
  [355] pusharglist 1 ........................... <me.iSprite>
  [357] extcall 119 ............................. <sprite(me.iSprite)>
  [359] getchainedprop 30 ....................... <sprite(me.iSprite).member>
  [361] getobjprop 142 .......................... <sprite(me.iSprite).member.height>
  [363] setobjprop 142 .......................... sprite(me.iSprite).height = sprite(me.iSprite).member.height
  [365] getparam 0 .............................. <me>
  [367] getobjprop 129 .......................... <me.iSprite>
  [369] pusharglist 1 ........................... <me.iSprite>
  [371] extcall 119 ............................. <sprite(me.iSprite)>
  [373] pushint8 1 .............................. <1>
  [375] setobjprop 695 .......................... sprite(me.iSprite).visible = 1
  [378] getparam 0 .............................. <me>
  [380] pushzero ................................ <0>
  [381] setobjprop 1348 ......................... me.bFirstDraw = 0
  [384] getparam 1 .............................. <bIsEligible>
  [386] pusharglistnoret 1 ...................... <bIsEligible>
  [388] extcall 52 .............................. return bIsEligible
  [390] ret
end

on getDepthTestSprite me, sDir
  [  0] getparam 0 .............................. <me>
  [  2] getparam 1 .............................. <sDir>
  [  4] pusharglist 2 ........................... <me, sDir>
  [  6] objcall 1292 ............................ <me.getDepthTestPoint(sDir)>
  [  9] setlocal 0 .............................. oTestPoint = me.getDepthTestPoint(sDir)
  [ 11] getglobal 133 ........................... <oIsoScene>
  [ 13] getchainedprop 393 ...................... <oIsoScene.oWall>
  [ 16] getlocal 0 .............................. <oTestPoint>
  [ 18] pusharglist 2 ........................... <oIsoScene.oWall, oTestPoint>
  [ 20] objcall 1187 ............................ <oIsoScene.oWall.getSpriteUnderPoint(oTestPoint)>
  [ 23] setlocal 1 .............................. iDepthSprite = oIsoScene.oWall.getSpriteUnderPoint(oTestPoint)
  [ 25] getlocal 1 .............................. <iDepthSprite>
  [ 27] pusharglist 1 ........................... <iDepthSprite>
  [ 29] extcall 59 .............................. <voidp(iDepthSprite)>
  [ 31] not ..................................... <not voidp(iDepthSprite)>
  [ 32] jmpifz [ 41] ............................ if not voidp(iDepthSprite) then
  [ 35] getlocal 1 .............................. <iDepthSprite>
  [ 37] pusharglistnoret 1 ...................... <iDepthSprite>
  [ 39] extcall 52 .............................. return iDepthSprite
  [ 41] getglobal 133 ........................... <oIsoScene>
  [ 43] getchainedprop 393 ...................... <oIsoScene.oWall>
  [ 46] getparam 0 .............................. <me>
  [ 48] getobjprop 548 .......................... <me.iX>
  [ 51] getparam 0 .............................. <me>
  [ 53] getobjprop 635 .......................... <me.iY>
  [ 56] pusharglist 2 ........................... <me.iX, me.iY>
  [ 58] extcall 39 .............................. <point(me.iX, me.iY)>
  [ 60] pusharglist 2 ........................... <oIsoScene.oWall, point(me.iX, me.iY)>
  [ 62] objcall 1187 ............................ <oIsoScene.oWall.getSpriteUnderPoint(point(me.iX, me.iY))>
  [ 65] setlocal 1 .............................. iDepthSprite = oIsoScene.oWall.getSpriteUnderPoint(point(me.iX, me.iY))
  [ 67] getlocal 1 .............................. <iDepthSprite>
  [ 69] pusharglistnoret 1 ...................... <iDepthSprite>
  [ 71] extcall 52 .............................. return iDepthSprite
  [ 73] ret
end

on getDepthTestPoint me, sDir
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 129 .......................... <me.iSprite>
  [  4] pusharglist 1 ........................... <me.iSprite>
  [  6] extcall 119 ............................. <sprite(me.iSprite)>
  [  8] getobjprop 43 ........................... <sprite(me.iSprite).left>
  [ 10] setlocal 0 .............................. iTestX = sprite(me.iSprite).left
  [ 12] getparam 1 .............................. <sDir>
  [ 14] pushcons 11 ............................. <"right">
  [ 16] eq ...................................... <sDir = "right">
  [ 17] jmpifz [ 35] ............................ if sDir = "right" then
  [ 20] getlocal 0 .............................. <iTestX>
  [ 22] getparam 0 .............................. <me>
  [ 24] getobjprop 129 .......................... <me.iSprite>
  [ 26] pusharglist 1 ........................... <me.iSprite>
  [ 28] extcall 119 ............................. <sprite(me.iSprite)>
  [ 30] getobjprop 141 .......................... <sprite(me.iSprite).width>
  [ 32] add ..................................... <iTestX + sprite(me.iSprite).width>
  [ 33] setlocal 0 .............................. iTestX = iTestX + sprite(me.iSprite).width
  [ 35] getparam 0 .............................. <me>
  [ 37] getobjprop 129 .......................... <me.iSprite>
  [ 39] pusharglist 1 ........................... <me.iSprite>
  [ 41] extcall 119 ............................. <sprite(me.iSprite)>
  [ 43] getobjprop 44 ........................... <sprite(me.iSprite).top>
  [ 45] getparam 0 .............................. <me>
  [ 47] getobjprop 129 .......................... <me.iSprite>
  [ 49] pusharglist 1 ........................... <me.iSprite>
  [ 51] extcall 119 ............................. <sprite(me.iSprite)>
  [ 53] getobjprop 142 .......................... <sprite(me.iSprite).height>
  [ 55] pushint8 2 .............................. <2>
  [ 57] div ..................................... <sprite(me.iSprite).height / 2>
  [ 58] add ..................................... <sprite(me.iSprite).top + (sprite(me.iSprite).height / 2)>
  [ 59] setlocal 1 .............................. iTestY = sprite(me.iSprite).top + (sprite(me.iSprite).height / 2)
  [ 61] getlocal 0 .............................. <iTestX>
  [ 63] getlocal 1 .............................. <iTestY>
  [ 65] pusharglist 2 ........................... <iTestX, iTestY>
  [ 67] extcall 39 .............................. <point(iTestX, iTestY)>
  [ 69] pusharglistnoret 1 ...................... <point(iTestX, iTestY)>
  [ 71] extcall 52 .............................. return point(iTestX, iTestY)
  [ 73] ret
end

on getEligibleToDrop me, iWallSprite, sDir, sCorner
  [  0] getparam 1 .............................. <iWallSprite>
  [  2] pusharglist 1 ........................... <iWallSprite>
  [  4] extcall 59 .............................. <voidp(iWallSprite)>
  [  6] jmpifz [ 14] ............................ if voidp(iWallSprite) then
  [  9] pushzero ................................ <0>
  [ 10] pusharglistnoret 1 ...................... <0>
  [ 12] extcall 52 .............................. return 0
  [ 14] pushint8 10 ............................. <10>
  [ 16] setlocal 0 .............................. iOffset = 10
  [ 18] getparam 0 .............................. <me>
  [ 20] getobjprop 129 .......................... <me.iSprite>
  [ 22] pusharglist 1 ........................... <me.iSprite>
  [ 24] extcall 119 ............................. <sprite(me.iSprite)>
  [ 26] getobjprop 44 ........................... <sprite(me.iSprite).top>
  [ 28] getparam 1 .............................. <iWallSprite>
  [ 30] pusharglist 1 ........................... <iWallSprite>
  [ 32] extcall 119 ............................. <sprite(iWallSprite)>
  [ 34] getobjprop 44 ........................... <sprite(iWallSprite).top>
  [ 36] getlocal 0 .............................. <iOffset>
  [ 38] sub ..................................... <sprite(iWallSprite).top - iOffset>
  [ 39] lteq .................................... <sprite(me.iSprite).top <= (sprite(iWallSprite).top - iOffset)>
  [ 40] jmpifz [ 48] ............................ if sprite(me.iSprite).top <= (sprite(iWallSprite).top - iOffset) then
  [ 43] pushzero ................................ <0>
  [ 44] pusharglistnoret 1 ...................... <0>
  [ 46] extcall 52 .............................. return 0
  [ 48] getparam 0 .............................. <me>
  [ 50] getobjprop 129 .......................... <me.iSprite>
  [ 52] pusharglist 1 ........................... <me.iSprite>
  [ 54] extcall 119 ............................. <sprite(me.iSprite)>
  [ 56] getobjprop 188 .......................... <sprite(me.iSprite).bottom>
  [ 58] getparam 1 .............................. <iWallSprite>
  [ 60] pusharglist 1 ........................... <iWallSprite>
  [ 62] extcall 119 ............................. <sprite(iWallSprite)>
  [ 64] getobjprop 188 .......................... <sprite(iWallSprite).bottom>
  [ 66] getlocal 0 .............................. <iOffset>
  [ 68] add ..................................... <sprite(iWallSprite).bottom + iOffset>
  [ 69] gteq .................................... <sprite(me.iSprite).bottom >= (sprite(iWallSprite).bottom + iOffset)>
  [ 70] jmpifz [ 78] ............................ if sprite(me.iSprite).bottom >= (sprite(iWallSprite).bottom + iOffset) then
  [ 73] pushzero ................................ <0>
  [ 74] pusharglistnoret 1 ...................... <0>
  [ 76] extcall 52 .............................. return 0
  [ 78] pushint8 1 .............................. <1>
  [ 80] pusharglistnoret 1 ...................... <1>
  [ 82] extcall 52 .............................. return 1
  [ 84] ret
end

on debug me, sMessage, bForce
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 338 .......................... <me.bDebug>
  [  5] getparam 2 .............................. <bForce>
  [  7] or ...................................... <me.bDebug or bForce>
  [  8] jmpifz [ 20] ............................ if me.bDebug or bForce then
  [ 11] pushcons 12 ............................. <"WallItem ">
  [ 13] getparam 1 .............................. <sMessage>
  [ 15] joinstr ................................. <"WallItem " & sMessage>
  [ 16] pusharglistnoret 1 ...................... <"WallItem " & sMessage>
  [ 18] extcall 168 ............................. put "WallItem " & sMessage
  [ 20] ret
end

on isWallItem me
  [  0] pushint8 1 .............................. <1>
  [  2] pusharglistnoret 1 ...................... <1>
  [  4] extcall 52 .............................. return 1
  [  6] ret
end

on isFurniItem me
  [  0] pushzero ................................ <0>
  [  1] pusharglistnoret 1 ...................... <0>
  [  3] extcall 52 .............................. return 0
  [  5] ret
end

on isAvatar me
  [  0] pushzero ................................ <0>
  [  1] pusharglistnoret 1 ...................... <0>
  [  3] extcall 52 .............................. return 0
  [  5] ret
end

on isBurnedCd me
  [  0] pushzero ................................ <0>
  [  1] pusharglistnoret 1 ...................... <0>
  [  3] extcall 52 .............................. return 0
  [  5] ret
end

on toString me
  [  0] pushcons 13 ............................. <"[WALL ITEM] CAT_ID: ">
  [  2] getparam 0 .............................. <me>
  [  4] getobjprop 161 .......................... <me.sProdID>
  [  6] joinstr ................................. <"[WALL ITEM] CAT_ID: " & me.sProdID>
  [  7] pushcons 14 ............................. <", POS_ID: ">
  [  9] joinstr ................................. <"[WALL ITEM] CAT_ID: " & me.sProdID & ", POS_ID: ">
  [ 10] getparam 0 .............................. <me>
  [ 12] pusharglist 1 ........................... <me>
  [ 14] objcall 249 ............................. <me.getPosId()>
  [ 16] joinstr ................................. <"[WALL ITEM] CAT_ID: " & me.sProdID & ", POS_ID: " & me.getPosId()>
  [ 17] pusharglistnoret 1 ...................... <"[WALL ITEM] CAT_ID: " & me.sProdID & ", POS_ID: " & me.getPosId()>
  [ 19] extcall 52 .............................. return "[WALL ITEM] CAT_ID: " & me.sProdID & ", POS_ID: " & me.getPosId()
  [ 21] ret
end

on hitTest me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 129 .......................... <me.iSprite>
  [  4] pusharglist 1 ........................... <me.iSprite>
  [  6] extcall 967 ............................. <rollover(me.iSprite)>
  [  9] pusharglistnoret 1 ...................... <rollover(me.iSprite)>
  [ 11] extcall 52 .............................. return rollover(me.iSprite)
  [ 13] ret
end

on getSpritesUnderMouse me
  [  0] pusharglist 0 ........................... <[:]>
  [  2] pushproplist ............................ <[:]>
  [  3] setlocal 0 .............................. aSpritesUnderMouse = [:]
  [  5] getparam 0 .............................. <me>
  [  7] pusharglist 1 ........................... <me>
  [  9] objcall 910 ............................. <me.getSprites()>
  [ 12] setlocal 1 .............................. _aSprites = me.getSprites()
  [ 14] getlocal 1 .............................. <_aSprites>
  [ 16] peek 0
  [ 18] pusharglist 1
  [ 20] extcall 155
  [ 22] pushint8 1
  [ 24] peek 0
  [ 26] peek 2
  [ 28] lteq
  [ 29] jmpifz [ 86] ............................ repeat with _iSprite in _aSprites
  [ 32] peek 2
  [ 34] peek 1
  [ 36] pusharglist 2
  [ 38] extcall 72
  [ 40] setlocal 2
  [ 42] getlocal 2 .............................. <_iSprite>
  [ 44] pusharglist 1 ........................... <_iSprite>
  [ 46] extcall 967 ............................. <rollover(_iSprite)>
  [ 49] jmpifz [ 81] ............................ if rollover(_iSprite) then
  [ 52] getparam 0 .............................. <me>
  [ 54] getlocal 2 .............................. <_iSprite>
  [ 56] pusharglist 2 ........................... <me, _iSprite>
  [ 58] objcall 913 ............................. <me.hitTest(_iSprite)>
  [ 61] jmpifz [ 81] ............................ if me.hitTest(_iSprite) then
  [ 64] getlocal 0 .............................. <aSpritesUnderMouse>
  [ 66] getlocal 2 .............................. <_iSprite>
  [ 68] pusharglist 1 ........................... <_iSprite>
  [ 70] extcall 119 ............................. <sprite(_iSprite)>
  [ 72] getobjprop 138 .......................... <sprite(_iSprite).locZ>
  [ 74] getlocal 2 .............................. <_iSprite>
  [ 76] pusharglistnoret 3 ...................... <aSpritesUnderMouse, sprite(_iSprite).locZ, _iSprite>
  [ 78] objcall 595 ............................. aSpritesUnderMouse.addProp(sprite(_iSprite).locZ, _iSprite)
  [ 81] pushint8 1
  [ 83] add
  [ 84] endrepeat [ 24]
  [ 86] pop 3
  [ 88] getlocal 0 .............................. <aSpritesUnderMouse>
  [ 90] pusharglistnoret 1 ...................... <aSpritesUnderMouse>
  [ 92] extcall 52 .............................. return aSpritesUnderMouse
  [ 94] ret
end

on rolloverObject me
  [  0] getparam 0 .............................. <me>
  [  2] pusharglist 1 ........................... <me>
  [  4] objcall 910 ............................. <me.getSprites()>
  [  7] setlocal 0 .............................. _aSprites = me.getSprites()
  [  9] getlocal 0 .............................. <_aSprites>
  [ 11] peek 0
  [ 13] pusharglist 1
  [ 15] extcall 155
  [ 17] pushint8 1
  [ 19] peek 0
  [ 21] peek 2
  [ 23] lteq
  [ 24] jmpifz [ 58] ............................ repeat with _iSprite in _aSprites
  [ 27] peek 2
  [ 29] peek 1
  [ 31] pusharglist 2
  [ 33] extcall 72
  [ 35] setlocal 1
  [ 37] getlocal 1 .............................. <_iSprite>
  [ 39] pusharglist 1 ........................... <_iSprite>
  [ 41] extcall 967 ............................. <rollover(_iSprite)>
  [ 44] jmpifz [ 53] ............................ if rollover(_iSprite) then
  [ 47] pushint8 1 .............................. <1>
  [ 49] pusharglistnoret 1 ...................... <1>
  [ 51] extcall 52 .............................. return 1
  [ 53] pushint8 1
  [ 55] add
  [ 56] endrepeat [ 19]
  [ 58] pop 3
  [ 60] pushzero ................................ <0>
  [ 61] pusharglistnoret 1 ...................... <0>
  [ 63] extcall 52 .............................. return 0
  [ 65] ret
end

on getHighestDepth me
  [  0] pushzero ................................ <0>
  [  1] setlocal 0 .............................. iHighestDepth = 0
  [  3] getparam 0 .............................. <me>
  [  5] pusharglist 1 ........................... <me>
  [  7] objcall 910 ............................. <me.getSprites()>
  [ 10] setlocal 1 .............................. _aSprites = me.getSprites()
  [ 12] getlocal 1 .............................. <_aSprites>
  [ 14] peek 0
  [ 16] pusharglist 1
  [ 18] extcall 155
  [ 20] pushint8 1
  [ 22] peek 0
  [ 24] peek 2
  [ 26] lteq
  [ 27] jmpifz [ 69] ............................ repeat with _iSprite in _aSprites
  [ 30] peek 2
  [ 32] peek 1
  [ 34] pusharglist 2
  [ 36] extcall 72
  [ 38] setlocal 2
  [ 40] getlocal 2 .............................. <_iSprite>
  [ 42] pusharglist 1 ........................... <_iSprite>
  [ 44] extcall 119 ............................. <sprite(_iSprite)>
  [ 46] getobjprop 138 .......................... <sprite(_iSprite).locZ>
  [ 48] getlocal 0 .............................. <iHighestDepth>
  [ 50] gt ...................................... <sprite(_iSprite).locZ > iHighestDepth>
  [ 51] jmpifz [ 64] ............................ if sprite(_iSprite).locZ > iHighestDepth then
  [ 54] getlocal 2 .............................. <_iSprite>
  [ 56] pusharglist 1 ........................... <_iSprite>
  [ 58] extcall 119 ............................. <sprite(_iSprite)>
  [ 60] getobjprop 138 .......................... <sprite(_iSprite).locZ>
  [ 62] setlocal 0 .............................. iHighestDepth = sprite(_iSprite).locZ
  [ 64] pushint8 1
  [ 66] add
  [ 67] endrepeat [ 22]
  [ 69] pop 3
  [ 71] getlocal 0 .............................. <iHighestDepth>
  [ 73] pusharglistnoret 1 ...................... <iHighestDepth>
  [ 75] extcall 52 .............................. return iHighestDepth
  [ 77] ret
end

on hitTestAll me
  [  0] getparam 0 .............................. <me>
  [  2] pusharglist 1 ........................... <me>
  [  4] objcall 910 ............................. <me.getSprites()>
  [  7] setlocal 0 .............................. _aSprites = me.getSprites()
  [  9] getlocal 0 .............................. <_aSprites>
  [ 11] peek 0
  [ 13] pusharglist 1
  [ 15] extcall 155
  [ 17] pushint8 1
  [ 19] peek 0
  [ 21] peek 2
  [ 23] lteq
  [ 24] jmpifz [ 60] ............................ repeat with i in _aSprites
  [ 27] peek 2
  [ 29] peek 1
  [ 31] pusharglist 2
  [ 33] extcall 72
  [ 35] setlocal 1
  [ 37] getparam 0 .............................. <me>
  [ 39] getlocal 1 .............................. <i>
  [ 41] pusharglist 2 ........................... <me, i>
  [ 43] objcall 913 ............................. <me.hitTest(i)>
  [ 46] jmpifz [ 55] ............................ if me.hitTest(i) then
  [ 49] getlocal 1 .............................. <i>
  [ 51] pusharglistnoret 1 ...................... <i>
  [ 53] extcall 52 .............................. return i
  [ 55] pushint8 1
  [ 57] add
  [ 58] endrepeat [ 19]
  [ 60] pop 3
  [ 62] pusharglist 0 ........................... <>
  [ 64] extcall 238 ............................. <VOID>
  [ 66] pusharglistnoret 1 ...................... <VOID>
  [ 68] extcall 52 .............................. return VOID
  [ 70] ret
end

on canDelete me
  [  0] pushint8 1 .............................. <1>
  [  2] pusharglistnoret 1 ...................... <1>
  [  4] extcall 52 .............................. return 1
  [  6] ret
end

on canUse me
  [  0] pushzero ................................ <0>
  [  1] pusharglistnoret 1 ...................... <0>
  [  3] extcall 52 .............................. return 0
  [  5] ret
end

on canPickup me
  [  0] pushint8 1 .............................. <1>
  [  2] pusharglistnoret 1 ...................... <1>
  [  4] extcall 52 .............................. return 1
  [  6] ret
end
