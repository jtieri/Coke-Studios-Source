property pOpenWindows, pLastUsedSprite, oMessenger, oSequencer, oMixer, oCdplayer, oTrader, oJukebox, oLoader, bDebug, pSelectedCatId, pSelectedAttributes
global oStudioManager, oDenizenManager, oCatalogManager, oPossessionManager, oSession, oRoom, oStudio, oStudioMap, oIsoScene, TextMgr, ElementMgr, oRoomServlet, oUserServlet, gMembersToDelete, sLanguageSetting, sCatalogText, ochat, gFeatureSet

on new me
  [  0] pushzero ................................ <0>
  [  1] setprop 9 ............................... bDebug = 0
  [  3] pusharglist 0 ........................... <[:]>
  [  5] pushproplist ............................ <[:]>
  [  6] setprop 31 .............................. pOpenWindows = [:]
  [  8] pushint8 1 .............................. <1>
  [ 10] setprop 111 ............................. pLastUsedSprite = 1
  [ 12] getparam 0 .............................. <me>
  [ 14] pusharglistnoret 1 ...................... <me>
  [ 16] extcall 23 .............................. return me
  [ 18] ret
end

on debug me, sMessage, bForce
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 9 ............................ <me.bDebug>
  [  4] getparam 2 .............................. <bForce>
  [  6] or ...................................... <me.bDebug or bForce>
  [  7] jmpifz [ 19] ............................ if me.bDebug or bForce then
  [ 10] pushcons 0 .............................. <"ElementManager: ">
  [ 12] getparam 1 .............................. <sMessage>
  [ 14] joinstr ................................. <"ElementManager: " & sMessage>
  [ 15] pusharglistnoret 1 ...................... <"ElementManager: " & sMessage>
  [ 17] extcall 26 .............................. put "ElementManager: " & sMessage
  [ 19] ret
end

on newwindow me, description, whichrect
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 1 .............................. <"newWindow()">
  [  4] pushcons 2 .............................. <"description:">
  [  6] joinpadstr .............................. <"newWindow()" && "description:">
  [  7] getparam 1 .............................. <description>
  [  9] joinpadstr .............................. <"newWindow()" && "description:" && description>
  [ 10] pushcons 3 .............................. <"whichRect:">
  [ 12] joinpadstr .............................. <"newWindow()" && "description:" && description && "whichRect:">
  [ 13] getparam 2 .............................. <whichrect>
  [ 15] joinpadstr .............................. <"newWindow()" && "description:" && description && "whichRect:" && whichrect>
  [ 16] pushint8 1 .............................. <1>
  [ 18] pusharglistnoret 3 ...................... <me, "newWindow()" && "description:" && description && "whichRect:" && whichrect, 1>
  [ 20] objcall 1 ............................... me.debug("newWindow()" && "description:" && description && "whichRect:" && whichrect, 1)
  [ 22] getparam 1 .............................. <description>
  [ 24] pushcons 4 .............................. <"nav_private">
  [ 26] eq ...................................... <description = "nav_private">
  [ 27] jmpifz [ 57] ............................ if description = "nav_private" then
  [ 30] getglobal 309 ........................... <gFeatureSet>
  [ 33] pushsymb 310 ............................ <#PRIVATE_STUDIOS>
  [ 36] pusharglist 2 ........................... <gFeatureSet, #PRIVATE_STUDIOS>
  [ 38] objcall 311 ............................. <gFeatureSet.isEnabled(#PRIVATE_STUDIOS)>
  [ 41] not ..................................... <not gFeatureSet.isEnabled(#PRIVATE_STUDIOS)>
  [ 42] jmpifz [ 57] ............................ if not gFeatureSet.isEnabled(#PRIVATE_STUDIOS) then
  [ 45] getglobal 30 ............................ <ElementMgr>
  [ 47] pushcons 5 .............................. <"FEATURE_DISABLED">
  [ 49] pusharglistnoret 2 ...................... <ElementMgr, "FEATURE_DISABLED">
  [ 51] objcall 245 ............................. ElementMgr.alert("FEATURE_DISABLED")
  [ 53] pusharglistnoret 0 ...................... <>
  [ 55] extcall 23 .............................. return 
  [ 57] getparam 0 .............................. <me>
  [ 59] getparam 1 .............................. <description>
  [ 61] pusharglist 2 ........................... <me, description>
  [ 63] objcall 43 .............................. <me.parsewindow(description)>
  [ 65] setlocal 0 .............................. MyData = me.parsewindow(description)
  [ 67] getparam 2 .............................. <whichrect>
  [ 69] pusharglist 1 ........................... <whichrect>
  [ 71] extcall 12 .............................. <voidp(whichrect)>
  [ 73] pushzero ................................ <0>
  [ 74] eq ...................................... <voidp(whichrect) = 0>
  [ 75] jmpifz [ 84] ............................ if voidp(whichrect) = 0 then
  [ 78] getlocal 0 .............................. <MyData>
  [ 80] getparam 2 .............................. <whichrect>
  [ 82] setobjprop 15 ........................... MyData.rect = whichrect
  [ 84] getprop 31 .............................. <pOpenWindows>
  [ 86] getlocal 0 .............................. <MyData>
  [ 88] getobjprop 21 ........................... <MyData.name>
  [ 90] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [ 92] extcall 312 ............................. <getaProp(pOpenWindows, MyData.name)>
  [ 95] setlocal 1 .............................. MyWindow = getaProp(pOpenWindows, MyData.name)
  [ 97] getlocal 1 .............................. <MyWindow>
  [ 99] pusharglist 1 ........................... <MyWindow>
  [101] extcall 12 .............................. <voidp(MyWindow)>
  [103] pushzero ................................ <0>
  [104] eq ...................................... <voidp(MyWindow) = 0>
  [105] jmpifz [117] ............................ if voidp(MyWindow) = 0 then / else
  [108] getlocal 1 .............................. <MyWindow>
  [110] pusharglistnoret 1 ...................... <MyWindow>
  [112] objcall 3 ............................... MyWindow.bringtofront()
  [114] jmp [160]
  [117] pushcons 6 .............................. <"Windows Script">
  [119] pusharglist 1 ........................... <"Windows Script">
  [121] extcall 39 .............................. <script("Windows Script")>
  [123] getlocal 0 .............................. <MyData>
  [125] pusharglist 2 ........................... <script("Windows Script"), MyData>
  [127] extcall 0 ............................... <new(script("Windows Script"), MyData)>
  [129] setlocal 1 .............................. MyWindow = new(script("Windows Script"), MyData)
  [131] getprop 31 .............................. <pOpenWindows>
  [133] getlocal 0 .............................. <MyData>
  [135] getobjprop 21 ........................... <MyData.name>
  [137] getlocal 1 .............................. <MyWindow>
  [139] pusharglistnoret 3 ...................... <pOpenWindows, MyData.name, MyWindow>
  [141] extcall 58 .............................. addProp(pOpenWindows, MyData.name, MyWindow)
  [143] getlocal 1 .............................. <MyWindow>
  [145] pushint32 1000000 ....................... <1000000>
  [150] pusharglistnoret 2 ...................... <MyWindow, 1000000>
  [152] objcall 6 ............................... MyWindow.boostup(1000000)
  [154] getlocal 1 .............................. <MyWindow>
  [156] pusharglistnoret 1 ...................... <MyWindow>
  [158] objcall 3 ............................... MyWindow.bringtofront()
  [160] getparam 1 .............................. <description>
  [162] pushcons 7 .............................. <"nav_public">
  [164] containsstr ............................. <description contains "nav_public">
  [165] jmpifz [197] ............................ if description contains "nav_public" then / else
  [168] getprop 31 .............................. <pOpenWindows>
  [170] getlocal 0 .............................. <MyData>
  [172] getobjprop 21 ........................... <MyData.name>
  [174] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [176] objcall 44 .............................. <pOpenWindows[MyData.name]>
  [178] getchainedprop 10 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [180] getchainedprop 59 ....................... <pOpenWindows[MyData.name].pScrollingLists.roomlist>
  [182] pusharglistnoret 1 ...................... <pOpenWindows[MyData.name].pScrollingLists.roomlist>
  [184] objcall 313 ............................. pOpenWindows[MyData.name].pScrollingLists.roomlist.displayloading()
  [187] getglobal 207 ........................... <oStudioManager>
  [189] pusharglistnoret 1 ...................... <oStudioManager>
  [191] objcall 314 ............................. oStudioManager.getAllPublicStudios()
  [194] jmp [397]
  [197] getparam 1 .............................. <description>
  [199] pushcons 4 .............................. <"nav_private">
  [201] containsstr ............................. <description contains "nav_private">
  [202] jmpifz [397] ............................ if description contains "nav_private" then
  [205] pushcons 8 .............................. <"userlist">
  [207] pusharglist 1 ........................... <"userlist">
  [209] extcall 34 .............................. <member("userlist")>
  [211] getobjprop 61 ........................... <member("userlist").memberNum>
  [213] pushzero ................................ <0>
  [214] gt ...................................... <member("userlist").memberNum > 0>
  [215] jmpifz [390] ............................ if member("userlist").memberNum > 0 then / else
  [218] pushcons 8 .............................. <"userlist">
  [220] pusharglist 1 ........................... <"userlist">
  [222] extcall 34 .............................. <member("userlist")>
  [224] getobjprop 315 .......................... <member("userlist").comments>
  [227] pushcons 9 .............................. <"blocked">
  [229] nteq .................................... <member("userlist").comments <> "blocked">
  [230] pushcons 8 .............................. <"userlist">
  [232] pusharglist 1 ........................... <"userlist">
  [234] extcall 34 .............................. <member("userlist")>
  [236] getobjprop 315 .......................... <member("userlist").comments>
  [239] pushcons 10 ............................. <EMPTY>
  [241] nteq .................................... <member("userlist").comments <> EMPTY>
  [242] and ..................................... <(member("userlist").comments <> "blocked") and (member("userlist").comments <> EMPTY)>
  [243] jmpifz [365] ............................ if (member("userlist").comments <> "blocked") and (member("userlist").comments <> EMPTY) then / else
  [246] getprop 31 .............................. <pOpenWindows>
  [248] getlocal 0 .............................. <MyData>
  [250] getobjprop 21 ........................... <MyData.name>
  [252] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [254] objcall 44 .............................. <pOpenWindows[MyData.name]>
  [256] getobjprop 10 ........................... <pOpenWindows[MyData.name].pScrollingLists>
  [258] pusharglist 1 ........................... <pOpenWindows[MyData.name].pScrollingLists>
  [260] extcall 29 .............................. <count(pOpenWindows[MyData.name].pScrollingLists)>
  [262] jmpifz [362] ............................ if count(pOpenWindows[MyData.name].pScrollingLists) then
  [265] getprop 31 .............................. <pOpenWindows>
  [267] getlocal 0 .............................. <MyData>
  [269] getobjprop 21 ........................... <MyData.name>
  [271] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [273] objcall 44 .............................. <pOpenWindows[MyData.name]>
  [275] getchainedprop 10 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [277] getchainedprop 64 ....................... <pOpenWindows[MyData.name].pScrollingLists.userList>
  [279] pushcons 8 .............................. <"userlist">
  [281] pusharglist 1 ........................... <"userlist">
  [283] extcall 34 .............................. <member("userlist")>
  [285] getchainedprop 315 ...................... <member("userlist").comments>
  [288] pushsymb 97 ............................. <#line>
  [290] pushint8 1 .............................. <1>
  [292] pusharglist 3 ........................... <member("userlist").comments, #line, 1>
  [294] objcall 149 ............................. <member("userlist").comments.line[1]>
  [296] pusharglist 1 ........................... <member("userlist").comments.line[1]>
  [298] extcall 316 ............................. <value(member("userlist").comments.line[1])>
  [301] setobjprop 317 .......................... pOpenWindows[MyData.name].pScrollingLists.userList.pUserData = value(member("userlist").comments.line[1])
  [304] getprop 31 .............................. <pOpenWindows>
  [306] getlocal 0 .............................. <MyData>
  [308] getobjprop 21 ........................... <MyData.name>
  [310] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [312] objcall 44 .............................. <pOpenWindows[MyData.name]>
  [314] getchainedprop 10 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [316] getchainedprop 64 ....................... <pOpenWindows[MyData.name].pScrollingLists.userList>
  [318] pushcons 8 .............................. <"userlist">
  [320] pusharglist 1 ........................... <"userlist">
  [322] extcall 34 .............................. <member("userlist")>
  [324] getchainedprop 315 ...................... <member("userlist").comments>
  [327] pushsymb 97 ............................. <#line>
  [329] pushint8 2 .............................. <2>
  [331] pusharglist 3 ........................... <member("userlist").comments, #line, 2>
  [333] objcall 149 ............................. <member("userlist").comments.line[2]>
  [335] pusharglist 1 ........................... <member("userlist").comments.line[2]>
  [337] extcall 316 ............................. <value(member("userlist").comments.line[2])>
  [340] setobjprop 318 .......................... pOpenWindows[MyData.name].pScrollingLists.userList.pScrollIndex = value(member("userlist").comments.line[2])
  [343] getprop 31 .............................. <pOpenWindows>
  [345] getlocal 0 .............................. <MyData>
  [347] getobjprop 21 ........................... <MyData.name>
  [349] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [351] objcall 44 .............................. <pOpenWindows[MyData.name]>
  [353] getchainedprop 10 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [355] getchainedprop 64 ....................... <pOpenWindows[MyData.name].pScrollingLists.userList>
  [357] pusharglistnoret 1 ...................... <pOpenWindows[MyData.name].pScrollingLists.userList>
  [359] objcall 319 ............................. pOpenWindows[MyData.name].pScrollingLists.userList.updatecontent()
  [362] jmp [387]
  [365] pushcons 8 .............................. <"userlist">
  [367] pusharglist 1 ........................... <"userlist">
  [369] extcall 34 .............................. <member("userlist")>
  [371] getobjprop 315 .......................... <member("userlist").comments>
  [374] pushcons 9 .............................. <"blocked">
  [376] nteq .................................... <member("userlist").comments <> "blocked">
  [377] jmpifz [387] ............................ if member("userlist").comments <> "blocked" then
  [380] getglobal 207 ........................... <oStudioManager>
  [382] pusharglistnoret 1 ...................... <oStudioManager>
  [384] objcall 320 ............................. oStudioManager.getAllPrivateStudios()
  [387] jmp [397]
  [390] getglobal 207 ........................... <oStudioManager>
  [392] pusharglistnoret 1 ...................... <oStudioManager>
  [394] objcall 320 ............................. oStudioManager.getAllPrivateStudios()
  [397] getparam 1 .............................. <description>
  [399] pushcons 11 ............................. <"people">
  [401] containsstr ............................. <description contains "people">
  [402] jmpifz [480] ............................ if description contains "people" then
  [405] getlocal 0 .............................. <MyData>
  [407] getobjprop 21 ........................... <MyData.name>
  [409] pushcons 12 ............................. <"public">
  [411] containsstr ............................. <MyData.name contains "public">
  [412] jmpifz [449] ............................ if MyData.name contains "public" then / else
  [415] getprop 31 .............................. <pOpenWindows>
  [417] getlocal 0 .............................. <MyData>
  [419] getobjprop 21 ........................... <MyData.name>
  [421] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [423] objcall 44 .............................. <pOpenWindows[MyData.name]>
  [425] getchainedprop 10 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [427] getchainedprop 59 ....................... <pOpenWindows[MyData.name].pScrollingLists.roomlist>
  [429] getchainedprop 321 ...................... <pOpenWindows[MyData.name].pScrollingLists.roomlist.pLastClicked>
  [432] getobjprop 322 .......................... <pOpenWindows[MyData.name].pScrollingLists.roomlist.pLastClicked.studioId>
  [435] setlocal 2 .............................. sRoomId = pOpenWindows[MyData.name].pScrollingLists.roomlist.pLastClicked.studioId
  [437] getglobal 207 ........................... <oStudioManager>
  [439] getlocal 2 .............................. <sRoomId>
  [441] pusharglistnoret 2 ...................... <oStudioManager, sRoomId>
  [443] objcall 323 ............................. oStudioManager.getOccupantsByStudioId(sRoomId)
  [446] jmp [480]
  [449] getmovieprop 324 ........................ <the runMode>
  [452] pushcons 13 ............................. <"Author">
  [454] eq ...................................... <the runMode = "Author">
  [455] jmpifz [465] ............................ if the runMode = "Author" then / else
  [458] pushcons 10 ............................. <EMPTY>
  [460] setlocal 2 .............................. sRoomId = EMPTY
  [462] jmp [471]
  [465] pushcons 14 ............................. <"userroomID">
  [467] pushzero ................................ <0>
  [468] getfield ................................ <field("userroomID")>
  [469] setlocal 2 .............................. sRoomId = field("userroomID")
  [471] getglobal 207 ........................... <oStudioManager>
  [473] getlocal 2 .............................. <sRoomId>
  [475] pusharglistnoret 2 ...................... <oStudioManager, sRoomId>
  [477] objcall 323 ............................. oStudioManager.getOccupantsByStudioId(sRoomId)
  [480] getparam 1 .............................. <description>
  [482] pushcons 15 ............................. <"jukebox.catalog">
  [484] containsstr ............................. <description contains "jukebox.catalog">
  [485] jmpifz [548] ............................ if description contains "jukebox.catalog" then / else
  [488] getprop 31 .............................. <pOpenWindows>
  [490] getlocal 0 .............................. <MyData>
  [492] getobjprop 21 ........................... <MyData.name>
  [494] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [496] objcall 44 .............................. <pOpenWindows[MyData.name]>
  [498] getchainedprop 10 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [500] getchainedprop 67 ....................... <pOpenWindows[MyData.name].pScrollingLists.cataloglist>
  [502] pusharglistnoret 1 ...................... <pOpenWindows[MyData.name].pScrollingLists.cataloglist>
  [504] objcall 313 ............................. pOpenWindows[MyData.name].pScrollingLists.cataloglist.displayloading()
  [507] getmovieprop 324 ........................ <the runMode>
  [510] pushcons 16 ............................. <"author">
  [512] eq ...................................... <the runMode = "author">
  [513] jmpifz [538] ............................ if the runMode = "author" then / else
  [516] getprop 31 .............................. <pOpenWindows>
  [518] getlocal 0 .............................. <MyData>
  [520] getobjprop 21 ........................... <MyData.name>
  [522] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [524] objcall 44 .............................. <pOpenWindows[MyData.name]>
  [526] getchainedprop 10 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [528] getchainedprop 67 ....................... <pOpenWindows[MyData.name].pScrollingLists.cataloglist>
  [530] pusharglistnoret 1 ...................... <pOpenWindows[MyData.name].pScrollingLists.cataloglist>
  [532] objcall 319 ............................. pOpenWindows[MyData.name].pScrollingLists.cataloglist.updatecontent()
  [535] jmp [545]
  [538] getglobal 79 ............................ <oDenizenManager>
  [540] pusharglistnoret 1 ...................... <oDenizenManager>
  [542] objcall 325 ............................. oDenizenManager.getGenres()
  [545] jmp [681]
  [548] getparam 1 .............................. <description>
  [550] pushcons 17 ............................. <"jukebox.playlist">
  [552] containsstr ............................. <description contains "jukebox.playlist">
  [553] jmpifz [616] ............................ if description contains "jukebox.playlist" then / else
  [556] getprop 31 .............................. <pOpenWindows>
  [558] getlocal 0 .............................. <MyData>
  [560] getobjprop 21 ........................... <MyData.name>
  [562] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [564] objcall 44 .............................. <pOpenWindows[MyData.name]>
  [566] getchainedprop 10 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [568] getchainedprop 68 ....................... <pOpenWindows[MyData.name].pScrollingLists.playList>
  [570] pusharglistnoret 1 ...................... <pOpenWindows[MyData.name].pScrollingLists.playList>
  [572] objcall 313 ............................. pOpenWindows[MyData.name].pScrollingLists.playList.displayloading()
  [575] getmovieprop 324 ........................ <the runMode>
  [578] pushcons 16 ............................. <"author">
  [580] eq ...................................... <the runMode = "author">
  [581] jmpifz [606] ............................ if the runMode = "author" then / else
  [584] getprop 31 .............................. <pOpenWindows>
  [586] getlocal 0 .............................. <MyData>
  [588] getobjprop 21 ........................... <MyData.name>
  [590] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [592] objcall 44 .............................. <pOpenWindows[MyData.name]>
  [594] getchainedprop 10 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [596] getchainedprop 68 ....................... <pOpenWindows[MyData.name].pScrollingLists.playList>
  [598] pusharglistnoret 1 ...................... <pOpenWindows[MyData.name].pScrollingLists.playList>
  [600] objcall 319 ............................. pOpenWindows[MyData.name].pScrollingLists.playList.updatecontent()
  [603] jmp [613]
  [606] getglobal 79 ............................ <oDenizenManager>
  [608] pusharglistnoret 1 ...................... <oDenizenManager>
  [610] objcall 326 ............................. oDenizenManager.getPlaylist()
  [613] jmp [681]
  [616] getparam 1 .............................. <description>
  [618] pushcons 18 ............................. <"jukebox.playback">
  [620] containsstr ............................. <description contains "jukebox.playback">
  [621] jmpifz [681] ............................ if description contains "jukebox.playback" then
  [624] getprop 31 .............................. <pOpenWindows>
  [626] getlocal 0 .............................. <MyData>
  [628] getobjprop 21 ........................... <MyData.name>
  [630] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [632] objcall 44 .............................. <pOpenWindows[MyData.name]>
  [634] getchainedprop 10 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [636] getchainedprop 68 ....................... <pOpenWindows[MyData.name].pScrollingLists.playList>
  [638] pusharglistnoret 1 ...................... <pOpenWindows[MyData.name].pScrollingLists.playList>
  [640] objcall 313 ............................. pOpenWindows[MyData.name].pScrollingLists.playList.displayloading()
  [643] getmovieprop 324 ........................ <the runMode>
  [646] pushcons 16 ............................. <"author">
  [648] eq ...................................... <the runMode = "author">
  [649] jmpifz [674] ............................ if the runMode = "author" then / else
  [652] getprop 31 .............................. <pOpenWindows>
  [654] getlocal 0 .............................. <MyData>
  [656] getobjprop 21 ........................... <MyData.name>
  [658] pusharglist 2 ........................... <pOpenWindows, MyData.name>
  [660] objcall 44 .............................. <pOpenWindows[MyData.name]>
  [662] getchainedprop 10 ....................... <pOpenWindows[MyData.name].pScrollingLists>
  [664] getchainedprop 68 ....................... <pOpenWindows[MyData.name].pScrollingLists.playList>
  [666] pusharglistnoret 1 ...................... <pOpenWindows[MyData.name].pScrollingLists.playList>
  [668] objcall 319 ............................. pOpenWindows[MyData.name].pScrollingLists.playList.updatecontent()
  [671] jmp [681]
  [674] getglobal 79 ............................ <oDenizenManager>
  [676] pusharglistnoret 1 ...................... <oDenizenManager>
  [678] objcall 326 ............................. oDenizenManager.getPlaylist()
  [681] getparam 0 .............................. <me>
  [683] pusharglistnoret 1 ...................... <me>
  [685] objcall 259 ............................. me.bringAlertToFront()
  [688] getlocal 1 .............................. <MyWindow>
  [690] pusharglistnoret 1 ...................... <MyWindow>
  [692] extcall 23 .............................. return MyWindow
  [694] ret
end

on parsewindow me, description
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 19 ............................. <"parseWindow()">
  [  4] pushcons 2 .............................. <"description:">
  [  6] joinpadstr .............................. <"parseWindow()" && "description:">
  [  7] getparam 1 .............................. <description>
  [  9] joinpadstr .............................. <"parseWindow()" && "description:" && description>
  [ 10] pusharglistnoret 2 ...................... <me, "parseWindow()" && "description:" && description>
  [ 12] objcall 1 ............................... me.debug("parseWindow()" && "description:" && description)
  [ 14] pushcons 20 ............................. <"XML">
  [ 16] pusharglist 1 ........................... <"XML">
  [ 18] extcall 331 ............................. <newObject("XML")>
  [ 21] setlocal 0 .............................. oXml = newObject("XML")
  [ 23] getlocal 0 .............................. <oXml>
  [ 25] pushint8 1 .............................. <1>
  [ 27] setobjprop 332 .......................... oXml.ignoreWhite = 1
  [ 30] getlocal 0 .............................. <oXml>
  [ 32] getparam 1 .............................. <description>
  [ 34] pusharglist 1 ........................... <description>
  [ 36] extcall 34 .............................. <member(description)>
  [ 38] getobjprop 78 ........................... <member(description).text>
  [ 40] pusharglistnoret 2 ...................... <oXml, member(description).text>
  [ 42] objcall 333 ............................. oXml.parseXML(member(description).text)
  [ 45] getlocal 0 .............................. <oXml>
  [ 47] pushcons 21 ............................. <"window">
  [ 49] pusharglist 2 ........................... <oXml, "window">
  [ 51] extcall 334 ............................. <getNode(oXml, "window")>
  [ 54] setlocal 1 .............................. oWindow = getNode(oXml, "window")
  [ 56] getlocal 1 .............................. <oWindow>
  [ 58] pushcons 22 ............................. <"name">
  [ 60] pusharglist 2 ........................... <oWindow, "name">
  [ 62] extcall 334 ............................. <getNode(oWindow, "name")>
  [ 65] setlocal 2 .............................. oName = getNode(oWindow, "name")
  [ 67] getlocal 1 .............................. <oWindow>
  [ 69] pushcons 23 ............................. <"date">
  [ 71] pusharglist 2 ........................... <oWindow, "date">
  [ 73] extcall 334 ............................. <getNode(oWindow, "date")>
  [ 76] setlocal 3 .............................. oDAte = getNode(oWindow, "date")
  [ 78] getlocal 1 .............................. <oWindow>
  [ 80] pushcons 24 ............................. <"version">
  [ 82] pusharglist 2 ........................... <oWindow, "version">
  [ 84] extcall 334 ............................. <getNode(oWindow, "version")>
  [ 87] setlocal 4 .............................. oVersion = getNode(oWindow, "version")
  [ 89] getlocal 1 .............................. <oWindow>
  [ 91] pushcons 25 ............................. <"elements">
  [ 93] pusharglist 2 ........................... <oWindow, "elements">
  [ 95] extcall 334 ............................. <getNode(oWindow, "elements")>
  [ 98] setlocal 5 .............................. oElements = getNode(oWindow, "elements")
  [100] getlocal 1 .............................. <oWindow>
  [102] pushcons 26 ............................. <"rect">
  [104] pusharglist 2 ........................... <oWindow, "rect">
  [106] extcall 334 ............................. <getNode(oWindow, "rect")>
  [109] setlocal 6 .............................. oRect = getNode(oWindow, "rect")
  [111] getlocal 1 .............................. <oWindow>
  [113] pushcons 27 ............................. <"border">
  [115] pusharglist 2 ........................... <oWindow, "border">
  [117] extcall 334 ............................. <getNode(oWindow, "border")>
  [120] setlocal 7 .............................. oBorder = getNode(oWindow, "border")
  [122] pushint8 9 .............................. <9>
  [124] pushint8 10 ............................. <10>
  [126] pushint8 13 ............................. <13>
  [128] pusharglist 3 ........................... <[9, 10, 13]>
  [130] pushlist ................................ <[9, 10, 13]>
  [131] setlocal 8 .............................. aStripChars = [9, 10, 13]
  [133] getlocal 2 .............................. <oName>
  [135] pusharglist 1 ........................... <oName>
  [137] extcall 12 .............................. <voidp(oName)>
  [139] not ..................................... <not voidp(oName)>
  [140] jmpifz [160] ............................ if not voidp(oName) then
  [143] getlocal 2 .............................. <oName>
  [145] getchainedprop 336 ...................... <oName.firstChild>
  [148] getobjprop 337 .......................... <oName.firstChild.nodeValue>
  [151] getlocal 8 .............................. <aStripChars>
  [153] pusharglist 2 ........................... <oName.firstChild.nodeValue, aStripChars>
  [155] extcall 335 ............................. <stripChars(oName.firstChild.nodeValue, aStripChars)>
  [158] setlocal 9 .............................. sName = stripChars(oName.firstChild.nodeValue, aStripChars)
  [160] getlocal 3 .............................. <oDAte>
  [162] pusharglist 1 ........................... <oDAte>
  [164] extcall 12 .............................. <voidp(oDAte)>
  [166] not ..................................... <not voidp(oDAte)>
  [167] jmpifz [187] ............................ if not voidp(oDAte) then
  [170] getlocal 3 .............................. <oDAte>
  [172] getchainedprop 336 ...................... <oDAte.firstChild>
  [175] getobjprop 337 .......................... <oDAte.firstChild.nodeValue>
  [178] getlocal 8 .............................. <aStripChars>
  [180] pusharglist 2 ........................... <oDAte.firstChild.nodeValue, aStripChars>
  [182] extcall 335 ............................. <stripChars(oDAte.firstChild.nodeValue, aStripChars)>
  [185] setlocal 10 ............................. sDate = stripChars(oDAte.firstChild.nodeValue, aStripChars)
  [187] getlocal 4 .............................. <oVersion>
  [189] pusharglist 1 ........................... <oVersion>
  [191] extcall 12 .............................. <voidp(oVersion)>
  [193] not ..................................... <not voidp(oVersion)>
  [194] jmpifz [214] ............................ if not voidp(oVersion) then
  [197] getlocal 4 .............................. <oVersion>
  [199] getchainedprop 336 ...................... <oVersion.firstChild>
  [202] getobjprop 337 .......................... <oVersion.firstChild.nodeValue>
  [205] getlocal 8 .............................. <aStripChars>
  [207] pusharglist 2 ........................... <oVersion.firstChild.nodeValue, aStripChars>
  [209] extcall 335 ............................. <stripChars(oVersion.firstChild.nodeValue, aStripChars)>
  [212] setlocal 11 ............................. sVersion = stripChars(oVersion.firstChild.nodeValue, aStripChars)
  [214] getlocal 5 .............................. <oElements>
  [216] pusharglist 1 ........................... <oElements>
  [218] extcall 12 .............................. <voidp(oElements)>
  [220] not ..................................... <not voidp(oElements)>
  [221] jmpifz [241] ............................ if not voidp(oElements) then
  [224] getlocal 5 .............................. <oElements>
  [226] getchainedprop 336 ...................... <oElements.firstChild>
  [229] getobjprop 337 .......................... <oElements.firstChild.nodeValue>
  [232] getlocal 8 .............................. <aStripChars>
  [234] pusharglist 2 ........................... <oElements.firstChild.nodeValue, aStripChars>
  [236] extcall 335 ............................. <stripChars(oElements.firstChild.nodeValue, aStripChars)>
  [239] setlocal 12 ............................. sElements = stripChars(oElements.firstChild.nodeValue, aStripChars)
  [241] getlocal 6 .............................. <oRect>
  [243] pusharglist 1 ........................... <oRect>
  [245] extcall 12 .............................. <voidp(oRect)>
  [247] not ..................................... <not voidp(oRect)>
  [248] jmpifz [268] ............................ if not voidp(oRect) then
  [251] getlocal 6 .............................. <oRect>
  [253] getchainedprop 336 ...................... <oRect.firstChild>
  [256] getobjprop 337 .......................... <oRect.firstChild.nodeValue>
  [259] getlocal 8 .............................. <aStripChars>
  [261] pusharglist 2 ........................... <oRect.firstChild.nodeValue, aStripChars>
  [263] extcall 335 ............................. <stripChars(oRect.firstChild.nodeValue, aStripChars)>
  [266] setlocal 13 ............................. sRect = stripChars(oRect.firstChild.nodeValue, aStripChars)
  [268] getlocal 7 .............................. <oBorder>
  [270] pusharglist 1 ........................... <oBorder>
  [272] extcall 12 .............................. <voidp(oBorder)>
  [274] not ..................................... <not voidp(oBorder)>
  [275] jmpifz [295] ............................ if not voidp(oBorder) then
  [278] getlocal 7 .............................. <oBorder>
  [280] getchainedprop 336 ...................... <oBorder.firstChild>
  [283] getobjprop 337 .......................... <oBorder.firstChild.nodeValue>
  [286] getlocal 8 .............................. <aStripChars>
  [288] pusharglist 2 ........................... <oBorder.firstChild.nodeValue, aStripChars>
  [290] extcall 335 ............................. <stripChars(oBorder.firstChild.nodeValue, aStripChars)>
  [293] setlocal 14 ............................. sBorder = stripChars(oBorder.firstChild.nodeValue, aStripChars)
  [295] getlocal 9 .............................. <sName>
  [297] setlocal 15 ............................. myName = sName
  [299] pusharglist 0 ........................... <[]>
  [301] pushlist ................................ <[]>
  [302] setlocal 16 ............................. myElements = []
  [304] getmovieprop 157 ........................ <the itemDelimiter>
  [306] setlocal 17 ............................. sOldDelimiter = the itemDelimiter
  [308] pushcons 28 ............................. <"]">
  [310] setmovieprop 157 ........................ the itemDelimiter = "]"
  [312] getlocal 12 ............................. <sElements>
  [314] pushsymb 223 ............................ <#items>
  [316] pusharglist 2 ........................... <sElements, #items>
  [318] objcall 29 .............................. <sElements.items.count>
  [320] setlocal 18 ............................. iLength = sElements.items.count
  [322] pushint8 1 .............................. <1>
  [324] setlocal 19
  [326] getlocal 19
  [328] getlocal 18 ............................. <iLength>
  [330] lteq
  [331] jmpifz [458] ............................ repeat with i = 1 to iLength
  [334] getlocal 12 ............................. <sElements>
  [336] pushsymb 158 ............................ <#item>
  [338] getlocal 19 ............................. <i>
  [340] pusharglist 3 ........................... <sElements, #item, i>
  [342] objcall 149 ............................. <sElements.item[i]>
  [344] pushcons 28 ............................. <"]">
  [346] joinstr ................................. <sElements.item[i] & "]">
  [347] setlocal 20 ............................. sElement = sElements.item[i] & "]"
  [349] getlocal 20 ............................. <sElement>
  [351] pusharglist 1 ........................... <sElement>
  [353] extcall 316 ............................. <value(sElement)>
  [356] setlocal 21 ............................. aElement = value(sElement)
  [358] getlocal 21 ............................. <aElement>
  [360] pusharglist 1 ........................... <aElement>
  [362] extcall 12 .............................. <voidp(aElement)>
  [364] not ..................................... <not voidp(aElement)>
  [365] jmpifz [379] ............................ if not voidp(aElement) then
  [368] getlocal 16 ............................. <myElements>
  [370] getlocal 21 ............................. <aElement>
  [372] pusharglistnoret 2 ...................... <myElements, aElement>
  [374] objcall 81 .............................. myElements.add(aElement)
  [376] jmp [449] ............................... next repeat
  [379] getlocal 20 ............................. <sElement>
  [381] pushcons 29 ............................. <"[">
  [383] containsstr ............................. <sElement contains "[">
  [384] jmpifz [449] ............................ if sElement contains "[" then
  [387] getlocal 12 ............................. <sElements>
  [389] pushsymb 158 ............................ <#item>
  [391] getlocal 19 ............................. <i>
  [393] pusharglist 3 ........................... <sElements, #item, i>
  [395] objcall 149 ............................. <sElements.item[i]>
  [397] pushcons 28 ............................. <"]">
  [399] joinstr ................................. <sElements.item[i] & "]">
  [400] getlocal 12 ............................. <sElements>
  [402] pushsymb 158 ............................ <#item>
  [404] getlocal 19 ............................. <i>
  [406] pushint8 1 .............................. <1>
  [408] add ..................................... <i + 1>
  [409] pusharglist 3 ........................... <sElements, #item, i + 1>
  [411] objcall 149 ............................. <sElements.item[i + 1]>
  [413] joinstr ................................. <sElements.item[i] & "]" & sElements.item[i + 1]>
  [414] pushcons 28 ............................. <"]">
  [416] joinstr ................................. <sElements.item[i] & "]" & sElements.item[i + 1] & "]">
  [417] setlocal 20 ............................. sElement = sElements.item[i] & "]" & sElements.item[i + 1] & "]"
  [419] getlocal 20 ............................. <sElement>
  [421] pusharglist 1 ........................... <sElement>
  [423] extcall 316 ............................. <value(sElement)>
  [426] setlocal 21 ............................. aElement = value(sElement)
  [428] getlocal 21 ............................. <aElement>
  [430] pusharglist 1 ........................... <aElement>
  [432] extcall 12 .............................. <voidp(aElement)>
  [434] not ..................................... <not voidp(aElement)>
  [435] jmpifz [446] ............................ if not voidp(aElement) then
  [438] getlocal 16 ............................. <myElements>
  [440] getlocal 21 ............................. <aElement>
  [442] pusharglistnoret 2 ...................... <myElements, aElement>
  [444] objcall 81 .............................. myElements.add(aElement)
  [446] jmp [449] ............................... next repeat
  [449] pushint8 1
  [451] getlocal 19
  [453] add
  [454] setlocal 19
  [456] endrepeat [326]
  [458] getlocal 17 ............................. <sOldDelimiter>
  [460] setmovieprop 157 ........................ the itemDelimiter = sOldDelimiter
  [462] getlocal 13 ............................. <sRect>
  [464] pusharglist 1 ........................... <sRect>
  [466] extcall 316 ............................. <value(sRect)>
  [469] setlocal 22 ............................. myRect = value(sRect)
  [471] pushsymb 21 ............................. <#name>
  [473] getlocal 15 ............................. <myName>
  [475] pushsymb 22 ............................. <#elements>
  [477] getlocal 16 ............................. <myElements>
  [479] pushsymb 15 ............................. <#rect>
  [481] getlocal 22 ............................. <myRect>
  [483] pusharglist 6 ........................... <[#name: myName, #elements: myElements, #rect: myRect]>
  [485] pushproplist ............................ <[#name: myName, #elements: myElements, #rect: myRect]>
  [486] pusharglistnoret 1 ...................... <[#name: myName, #elements: myElements, #rect: myRect]>
  [488] extcall 23 .............................. return [#name: myName, #elements: myElements, #rect: myRect]
  [490] ret
end

on cleanupdata myString
  [  0] getparam 0 .............................. <myString>
  [  2] pushcons 30 ............................. <TAB>
  [  4] containsstr ............................. <myString contains TAB>
  [  5] jmpifz [ 32] ............................ repeat while myString contains TAB
  [  8] pushcons 30 ............................. <TAB>
  [ 10] getparam 0 .............................. <myString>
  [ 12] pusharglist 2 ........................... <TAB, myString>
  [ 14] extcall 164 ............................. <offset(TAB, myString)>
  [ 16] setlocal 0 .............................. mychar = offset(TAB, myString)
  [ 18] getlocal 0 .............................. <mychar>
  [ 20] pushzero ................................ <0>
  [ 21] pushzero ................................ <0>
  [ 22] pushzero ................................ <0>
  [ 23] pushzero ................................ <0>
  [ 24] pushzero ................................ <0>
  [ 25] pushzero ................................ <0>
  [ 26] pushzero ................................ <0>
  [ 27] pushzero ................................ <0>
  [ 28] deletechunk 4 ........................... delete char mychar of myString
  [ 30] endrepeat [  0]
  [ 32] getparam 0 .............................. <myString>
  [ 34] pushsymb 97 ............................. <#line>
  [ 36] pusharglist 2 ........................... <myString, #line>
  [ 38] objcall 29 .............................. <myString.line.count>
  [ 40] setlocal 1
  [ 42] getlocal 1
  [ 44] pushint8 1 .............................. <1>
  [ 46] gteq
  [ 47] jmpifz [104] ............................ repeat with n = myString.line.count down to 1
  [ 50] getparam 0 .............................. <myString>
  [ 52] pushsymb 97 ............................. <#line>
  [ 54] getlocal 1 .............................. <n>
  [ 56] pusharglist 3 ........................... <myString, #line, n>
  [ 58] objcall 149 ............................. <myString.line[n]>
  [ 60] pushcons 10 ............................. <EMPTY>
  [ 62] eq ...................................... <myString.line[n] = EMPTY>
  [ 63] jmpifz [ 81] ............................ if myString.line[n] = EMPTY then
  [ 66] pushzero ................................ <0>
  [ 67] pushzero ................................ <0>
  [ 68] pushzero ................................ <0>
  [ 69] pushzero ................................ <0>
  [ 70] pushzero ................................ <0>
  [ 71] pushzero ................................ <0>
  [ 72] getlocal 1 .............................. <n>
  [ 74] pushzero ................................ <0>
  [ 75] pushzero ................................ <0>
  [ 76] deletechunk 4 ........................... delete line n of myString
  [ 78] jmp [ 95] ............................... next repeat
  [ 81] pushzero ................................ <0>
  [ 82] pushzero ................................ <0>
  [ 83] pushzero ................................ <0>
  [ 84] pushzero ................................ <0>
  [ 85] pushzero ................................ <0>
  [ 86] pushzero ................................ <0>
  [ 87] getlocal 1 .............................. <n>
  [ 89] pushzero ................................ <0>
  [ 90] getparam 0 .............................. <myString>
  [ 92] getchunk ................................ <line n of myString>
  [ 93] setlocal 2 .............................. myLine = line n of myString
  [ 95] pushint8 -1
  [ 97] getlocal 1
  [ 99] add
  [100] setlocal 1
  [102] endrepeat [ 42]
  [104] getparam 0 .............................. <myString>
  [106] pushsymb 163 ............................ <#char>
  [108] getparam 0 .............................. <myString>
  [110] pusharglist 1 ........................... <myString>
  [112] extcall 96 .............................. <length(myString)>
  [114] pusharglist 3 ........................... <myString, #char, length(myString)>
  [116] objcall 149 ............................. <myString.char[length(myString)]>
  [118] pushcons 31 ............................. <" ">
  [120] eq ...................................... <myString.char[length(myString)] = " ">
  [121] jmpifz [142] ............................ repeat while myString.char[length(myString)] = " "
  [124] getparam 0 .............................. <myString>
  [126] pusharglist 1 ........................... <myString>
  [128] extcall 96 .............................. <length(myString)>
  [130] pushzero ................................ <0>
  [131] pushzero ................................ <0>
  [132] pushzero ................................ <0>
  [133] pushzero ................................ <0>
  [134] pushzero ................................ <0>
  [135] pushzero ................................ <0>
  [136] pushzero ................................ <0>
  [137] pushzero ................................ <0>
  [138] deletechunk 4 ........................... delete char length(myString) of myString
  [140] endrepeat [104]
  [142] getparam 0 .............................. <myString>
  [144] pushsymb 163 ............................ <#char>
  [146] pushint8 1 .............................. <1>
  [148] pusharglist 3 ........................... <myString, #char, 1>
  [150] objcall 149 ............................. <myString.char[1]>
  [152] pushcons 32 ............................. <QUOTE>
  [154] eq ...................................... <myString.char[1] = QUOTE>
  [155] getparam 0 .............................. <myString>
  [157] pushsymb 163 ............................ <#char>
  [159] getparam 0 .............................. <myString>
  [161] pusharglist 1 ........................... <myString>
  [163] extcall 96 .............................. <length(myString)>
  [165] pusharglist 3 ........................... <myString, #char, length(myString)>
  [167] objcall 149 ............................. <myString.char[length(myString)]>
  [169] pushcons 32 ............................. <QUOTE>
  [171] eq ...................................... <myString.char[length(myString)] = QUOTE>
  [172] and ..................................... <(myString.char[1] = QUOTE) and (myString.char[length(myString)] = QUOTE)>
  [173] jmpifz [204] ............................ if (myString.char[1] = QUOTE) and (myString.char[length(myString)] = QUOTE) then
  [176] getparam 0 .............................. <myString>
  [178] pusharglist 1 ........................... <myString>
  [180] extcall 96 .............................. <length(myString)>
  [182] pushzero ................................ <0>
  [183] pushzero ................................ <0>
  [184] pushzero ................................ <0>
  [185] pushzero ................................ <0>
  [186] pushzero ................................ <0>
  [187] pushzero ................................ <0>
  [188] pushzero ................................ <0>
  [189] pushzero ................................ <0>
  [190] deletechunk 4 ........................... delete char length(myString) of myString
  [192] pushint8 1 .............................. <1>
  [194] pushzero ................................ <0>
  [195] pushzero ................................ <0>
  [196] pushzero ................................ <0>
  [197] pushzero ................................ <0>
  [198] pushzero ................................ <0>
  [199] pushzero ................................ <0>
  [200] pushzero ................................ <0>
  [201] pushzero ................................ <0>
  [202] deletechunk 4 ........................... delete char 1 of myString
  [204] getparam 0 .............................. <myString>
  [206] pusharglistnoret 1 ...................... <myString>
  [208] extcall 23 .............................. return myString
  [210] ret
end

on displayPublicStudios me, aRoomData
  [  0] getprop 31 .............................. <pOpenWindows>
  [  2] peek 0
  [  4] pusharglist 1
  [  6] extcall 29
  [  8] pushint8 1
  [ 10] peek 0
  [ 12] peek 2
  [ 14] lteq
  [ 15] jmpifz [ 87] ............................ repeat with n in pOpenWindows
  [ 18] peek 2
  [ 20] peek 1
  [ 22] pusharglist 2
  [ 24] extcall 44
  [ 26] setlocal 0
  [ 28] getlocal 0 .............................. <n>
  [ 30] getobjprop 10 ........................... <n.pScrollingLists>
  [ 32] pusharglist 1 ........................... <n.pScrollingLists>
  [ 34] extcall 29 .............................. <count(n.pScrollingLists)>
  [ 36] jmpifz [ 82] ............................ if count(n.pScrollingLists) then
  [ 39] getlocal 0 .............................. <n>
  [ 41] getobjprop 10 ........................... <n.pScrollingLists>
  [ 43] pushsymb 59 ............................. <#roomlist>
  [ 45] pusharglist 2 ........................... <n.pScrollingLists, #roomlist>
  [ 47] extcall 312 ............................. <getaProp(n.pScrollingLists, #roomlist)>
  [ 50] pusharglist 1 ........................... <getaProp(n.pScrollingLists, #roomlist)>
  [ 52] extcall 12 .............................. <voidp(getaProp(n.pScrollingLists, #roomlist))>
  [ 54] pushzero ................................ <0>
  [ 55] eq ...................................... <voidp(getaProp(n.pScrollingLists, #roomlist)) = 0>
  [ 56] jmpifz [ 82] ............................ if voidp(getaProp(n.pScrollingLists, #roomlist)) = 0 then
  [ 59] getlocal 0 .............................. <n>
  [ 61] getchainedprop 10 ....................... <n.pScrollingLists>
  [ 63] getchainedprop 59 ....................... <n.pScrollingLists.roomlist>
  [ 65] getparam 1 .............................. <aRoomData>
  [ 67] setobjprop 360 .......................... n.pScrollingLists.roomlist.pRoomData = aRoomData
  [ 70] getlocal 0 .............................. <n>
  [ 72] getchainedprop 10 ....................... <n.pScrollingLists>
  [ 74] getchainedprop 59 ....................... <n.pScrollingLists.roomlist>
  [ 76] pusharglistnoret 1 ...................... <n.pScrollingLists.roomlist>
  [ 78] objcall 319 ............................. n.pScrollingLists.roomlist.updatecontent()
  [ 81] ret ..................................... exit
  [ 82] pushint8 1
  [ 84] add
  [ 85] endrepeat [ 10]
  [ 87] pop 3
  [ 89] ret
end

on displayStudioDetail me, aDetail
  [  0] getprop 31 .............................. <pOpenWindows>
  [  2] peek 0
  [  4] pusharglist 1
  [  6] extcall 29
  [  8] pushint8 1
  [ 10] peek 0
  [ 12] peek 2
  [ 14] lteq
  [ 15] jmpifz [115] ............................ repeat with n in pOpenWindows
  [ 18] peek 2
  [ 20] peek 1
  [ 22] pusharglist 2
  [ 24] extcall 44
  [ 26] setlocal 0
  [ 28] getlocal 0 .............................. <n>
  [ 30] getobjprop 10 ........................... <n.pScrollingLists>
  [ 32] pusharglist 1 ........................... <n.pScrollingLists>
  [ 34] extcall 29 .............................. <count(n.pScrollingLists)>
  [ 36] jmpifz [110] ............................ if count(n.pScrollingLists) then
  [ 39] getlocal 0 .............................. <n>
  [ 41] getobjprop 10 ........................... <n.pScrollingLists>
  [ 43] pushsymb 59 ............................. <#roomlist>
  [ 45] pusharglist 2 ........................... <n.pScrollingLists, #roomlist>
  [ 47] extcall 312 ............................. <getaProp(n.pScrollingLists, #roomlist)>
  [ 50] pusharglist 1 ........................... <getaProp(n.pScrollingLists, #roomlist)>
  [ 52] extcall 12 .............................. <voidp(getaProp(n.pScrollingLists, #roomlist))>
  [ 54] pushzero ................................ <0>
  [ 55] eq ...................................... <voidp(getaProp(n.pScrollingLists, #roomlist)) = 0>
  [ 56] jmpifz [ 76] ............................ if voidp(getaProp(n.pScrollingLists, #roomlist)) = 0 then
  [ 59] getlocal 0 .............................. <n>
  [ 61] getchainedprop 10 ....................... <n.pScrollingLists>
  [ 63] getchainedprop 59 ....................... <n.pScrollingLists.roomlist>
  [ 65] getparam 1 .............................. <aDetail>
  [ 67] pusharglistnoret 2 ...................... <n.pScrollingLists.roomlist, aDetail>
  [ 69] objcall 362 ............................. n.pScrollingLists.roomlist.displayRoomDetail(aDetail)
  [ 72] ret ..................................... exit
  [ 73] jmp [110] ............................... next repeat
  [ 76] getlocal 0 .............................. <n>
  [ 78] getobjprop 10 ........................... <n.pScrollingLists>
  [ 80] pushsymb 64 ............................. <#userList>
  [ 82] pusharglist 2 ........................... <n.pScrollingLists, #userList>
  [ 84] extcall 312 ............................. <getaProp(n.pScrollingLists, #userList)>
  [ 87] pusharglist 1 ........................... <getaProp(n.pScrollingLists, #userList)>
  [ 89] extcall 12 .............................. <voidp(getaProp(n.pScrollingLists, #userList))>
  [ 91] pushzero ................................ <0>
  [ 92] eq ...................................... <voidp(getaProp(n.pScrollingLists, #userList)) = 0>
  [ 93] jmpifz [110] ............................ if voidp(getaProp(n.pScrollingLists, #userList)) = 0 then
  [ 96] getlocal 0 .............................. <n>
  [ 98] getchainedprop 10 ....................... <n.pScrollingLists>
  [100] getchainedprop 64 ....................... <n.pScrollingLists.userList>
  [102] getparam 1 .............................. <aDetail>
  [104] pusharglistnoret 2 ...................... <n.pScrollingLists.userList, aDetail>
  [106] objcall 362 ............................. n.pScrollingLists.userList.displayRoomDetail(aDetail)
  [109] ret ..................................... exit
  [110] pushint8 1
  [112] add
  [113] endrepeat [ 10]
  [115] pop 3
  [117] ret
end

on displayPrivateStudios me, aRoomData
  [  0] getprop 31 .............................. <pOpenWindows>
  [  2] peek 0
  [  4] pusharglist 1
  [  6] extcall 29
  [  8] pushint8 1
  [ 10] peek 0
  [ 12] peek 2
  [ 14] lteq
  [ 15] jmpifz [ 87] ............................ repeat with n in pOpenWindows
  [ 18] peek 2
  [ 20] peek 1
  [ 22] pusharglist 2
  [ 24] extcall 44
  [ 26] setlocal 0
  [ 28] getlocal 0 .............................. <n>
  [ 30] getobjprop 10 ........................... <n.pScrollingLists>
  [ 32] pusharglist 1 ........................... <n.pScrollingLists>
  [ 34] extcall 29 .............................. <count(n.pScrollingLists)>
  [ 36] jmpifz [ 82] ............................ if count(n.pScrollingLists) then
  [ 39] getlocal 0 .............................. <n>
  [ 41] getobjprop 10 ........................... <n.pScrollingLists>
  [ 43] pushsymb 64 ............................. <#userList>
  [ 45] pusharglist 2 ........................... <n.pScrollingLists, #userList>
  [ 47] extcall 312 ............................. <getaProp(n.pScrollingLists, #userList)>
  [ 50] pusharglist 1 ........................... <getaProp(n.pScrollingLists, #userList)>
  [ 52] extcall 12 .............................. <voidp(getaProp(n.pScrollingLists, #userList))>
  [ 54] pushzero ................................ <0>
  [ 55] eq ...................................... <voidp(getaProp(n.pScrollingLists, #userList)) = 0>
  [ 56] jmpifz [ 82] ............................ if voidp(getaProp(n.pScrollingLists, #userList)) = 0 then
  [ 59] getlocal 0 .............................. <n>
  [ 61] getchainedprop 10 ....................... <n.pScrollingLists>
  [ 63] getchainedprop 64 ....................... <n.pScrollingLists.userList>
  [ 65] getparam 1 .............................. <aRoomData>
  [ 67] setobjprop 317 .......................... n.pScrollingLists.userList.pUserData = aRoomData
  [ 70] getlocal 0 .............................. <n>
  [ 72] getchainedprop 10 ....................... <n.pScrollingLists>
  [ 74] getchainedprop 64 ....................... <n.pScrollingLists.userList>
  [ 76] pusharglistnoret 1 ...................... <n.pScrollingLists.userList>
  [ 78] objcall 319 ............................. n.pScrollingLists.userList.updatecontent()
  [ 81] ret ..................................... exit
  [ 82] pushint8 1
  [ 84] add
  [ 85] endrepeat [ 10]
  [ 87] pop 3
  [ 89] ret
end

on displayStudioPeople me, aPeople
  [  0] getprop 31 .............................. <pOpenWindows>
  [  2] peek 0
  [  4] pusharglist 1
  [  6] extcall 29
  [  8] pushint8 1
  [ 10] peek 0
  [ 12] peek 2
  [ 14] lteq
  [ 15] jmpifz [ 89] ............................ repeat with n in pOpenWindows
  [ 18] peek 2
  [ 20] peek 1
  [ 22] pusharglist 2
  [ 24] extcall 44
  [ 26] setlocal 0
  [ 28] getlocal 0 .............................. <n>
  [ 30] getobjprop 10 ........................... <n.pScrollingLists>
  [ 32] pusharglist 1 ........................... <n.pScrollingLists>
  [ 34] extcall 29 .............................. <count(n.pScrollingLists)>
  [ 36] jmpifz [ 84] ............................ if count(n.pScrollingLists) then
  [ 39] getlocal 0 .............................. <n>
  [ 41] getobjprop 10 ........................... <n.pScrollingLists>
  [ 43] pushsymb 60 ............................. <#peoplelist>
  [ 45] pusharglist 2 ........................... <n.pScrollingLists, #peoplelist>
  [ 47] extcall 312 ............................. <getaProp(n.pScrollingLists, #peoplelist)>
  [ 50] pusharglist 1 ........................... <getaProp(n.pScrollingLists, #peoplelist)>
  [ 52] extcall 12 .............................. <voidp(getaProp(n.pScrollingLists, #peoplelist))>
  [ 54] pushzero ................................ <0>
  [ 55] eq ...................................... <voidp(getaProp(n.pScrollingLists, #peoplelist)) = 0>
  [ 56] jmpifz [ 84] ............................ if voidp(getaProp(n.pScrollingLists, #peoplelist)) = 0 then
  [ 59] getlocal 0 .............................. <n>
  [ 61] getchainedprop 10 ....................... <n.pScrollingLists>
  [ 63] getchainedprop 60 ....................... <n.pScrollingLists.peoplelist>
  [ 65] getparam 1 .............................. <aPeople>
  [ 67] setobjprop 317 .......................... n.pScrollingLists.peoplelist.pUserData = aPeople
  [ 70] getlocal 0 .............................. <n>
  [ 72] getchainedprop 10 ....................... <n.pScrollingLists>
  [ 74] getchainedprop 60 ....................... <n.pScrollingLists.peoplelist>
  [ 76] pushint8 1 .............................. <1>
  [ 78] pusharglistnoret 2 ...................... <n.pScrollingLists.peoplelist, 1>
  [ 80] objcall 319 ............................. n.pScrollingLists.peoplelist.updatecontent(1)
  [ 83] ret ..................................... exit
  [ 84] pushint8 1
  [ 86] add
  [ 87] endrepeat [ 10]
  [ 89] pop 3
  [ 91] ret
end

on LastUsedSprite me
  [  0] pushint16 751 ........................... <751>
  [  3] setlocal 0
  [  5] getlocal 0
  [  7] getmovieprop 366 ........................ <the lastChannel>
  [ 10] lteq
  [ 11] jmpifz [ 47] ............................ repeat with n = 751 to the lastChannel
  [ 14] getlocal 0 .............................. <n>
  [ 16] pusharglist 1 ........................... <n>
  [ 18] extcall 36 .............................. <sprite(n)>
  [ 20] getobjprop 61 ........................... <sprite(n).memberNum>
  [ 22] pushint8 1 .............................. <1>
  [ 24] lt ...................................... <sprite(n).memberNum < 1>
  [ 25] jmpifz [ 38] ............................ if sprite(n).memberNum < 1 then
  [ 28] getlocal 0 .............................. <n>
  [ 30] setprop 111 ............................. pLastUsedSprite = n
  [ 32] getlocal 0 .............................. <n>
  [ 34] pusharglistnoret 1 ...................... <n>
  [ 36] extcall 23 .............................. return n
  [ 38] pushint8 1
  [ 40] getlocal 0
  [ 42] add
  [ 43] setlocal 0
  [ 45] endrepeat [  5]
  [ 47] ret
end

on alert me, textID, textID2, bDialogWindow
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 33 ............................. <"alert()">
  [  4] pushcons 34 ............................. <"textID:">
  [  6] joinpadstr .............................. <"alert()" && "textID:">
  [  7] getparam 1 .............................. <textID>
  [  9] joinpadstr .............................. <"alert()" && "textID:" && textID>
  [ 10] pushcons 35 ............................. <"textID2:">
  [ 12] joinpadstr .............................. <"alert()" && "textID:" && textID && "textID2:">
  [ 13] getparam 2 .............................. <textID2>
  [ 15] joinpadstr .............................. <"alert()" && "textID:" && textID && "textID2:" && textID2>
  [ 16] pusharglistnoret 2 ...................... <me, "alert()" && "textID:" && textID && "textID2:" && textID2>
  [ 18] objcall 1 ............................... me.debug("alert()" && "textID:" && textID && "textID2:" && textID2)
  [ 20] getparam 3 .............................. <bDialogWindow>
  [ 22] jmpifz [ 69] ............................ if bDialogWindow then / else
  [ 25] getparam 0 .............................. <me>
  [ 27] pushcons 36 ............................. <"whale_wash_dialog.window">
  [ 29] pusharglistnoret 2 ...................... <me, "whale_wash_dialog.window">
  [ 31] objcall 239 ............................. me.newwindow("whale_wash_dialog.window")
  [ 33] getparam 0 .............................. <me>
  [ 35] pushcons 37 ............................. <"textmgr.getreftext(textID):">
  [ 37] getglobal 91 ............................ <TextMgr>
  [ 39] getparam 1 .............................. <textID>
  [ 41] pusharglist 2 ........................... <TextMgr, textID>
  [ 43] objcall 93 .............................. <TextMgr.GetRefText(textID)>
  [ 45] joinpadstr .............................. <"textmgr.getreftext(textID):" && TextMgr.GetRefText(textID)>
  [ 46] pusharglistnoret 2 ...................... <me, "textmgr.getreftext(textID):" && TextMgr.GetRefText(textID)>
  [ 48] objcall 1 ............................... me.debug("textmgr.getreftext(textID):" && TextMgr.GetRefText(textID))
  [ 50] pushcons 38 ............................. <"entry_alertext">
  [ 52] pusharglist 1 ........................... <"entry_alertext">
  [ 54] extcall 34 .............................. <member("entry_alertext")>
  [ 56] getglobal 91 ............................ <TextMgr>
  [ 58] getparam 1 .............................. <textID>
  [ 60] pusharglist 2 ........................... <TextMgr, textID>
  [ 62] objcall 93 .............................. <TextMgr.GetRefText(textID)>
  [ 64] setobjprop 78 ........................... member("entry_alertext").text = TextMgr.GetRefText(textID)
  [ 66] jmp [193]
  [ 69] getparam 2 .............................. <textID2>
  [ 71] pusharglist 1 ........................... <textID2>
  [ 73] extcall 12 .............................. <voidp(textID2)>
  [ 75] jmpifz [105] ............................ if voidp(textID2) then / else
  [ 78] getparam 0 .............................. <me>
  [ 80] pushcons 39 ............................. <"sanfo_general_alert.window">
  [ 82] pusharglistnoret 2 ...................... <me, "sanfo_general_alert.window">
  [ 84] objcall 239 ............................. me.newwindow("sanfo_general_alert.window")
  [ 86] pushcons 38 ............................. <"entry_alertext">
  [ 88] pusharglist 1 ........................... <"entry_alertext">
  [ 90] extcall 34 .............................. <member("entry_alertext")>
  [ 92] getglobal 91 ............................ <TextMgr>
  [ 94] getparam 1 .............................. <textID>
  [ 96] pusharglist 2 ........................... <TextMgr, textID>
  [ 98] objcall 93 .............................. <TextMgr.GetRefText(textID)>
  [100] setobjprop 78 ........................... member("entry_alertext").text = TextMgr.GetRefText(textID)
  [102] jmp [193]
  [105] getparam 0 .............................. <me>
  [107] pushcons 40 ............................. <"sanfo_general_alert_extralong.window">
  [109] pusharglistnoret 2 ...................... <me, "sanfo_general_alert_extralong.window">
  [111] objcall 239 ............................. me.newwindow("sanfo_general_alert_extralong.window")
  [113] getglobal 91 ............................ <TextMgr>
  [115] getparam 2 .............................. <textID2>
  [117] pusharglist 2 ........................... <TextMgr, textID2>
  [119] objcall 93 .............................. <TextMgr.GetRefText(textID2)>
  [121] setlocal 0 .............................. mymessage = TextMgr.GetRefText(textID2)
  [123] getlocal 0 .............................. <mymessage>
  [125] pusharglist 1 ........................... <mymessage>
  [127] extcall 12 .............................. <voidp(mymessage)>
  [129] getlocal 0 .............................. <mymessage>
  [131] pushcons 10 ............................. <EMPTY>
  [133] eq ...................................... <mymessage = EMPTY>
  [134] or ...................................... <voidp(mymessage) or (mymessage = EMPTY)>
  [135] jmpifz [167] ............................ if voidp(mymessage) or (mymessage = EMPTY) then / else
  [138] pushcons 41 ............................. <"bold_alert_text">
  [140] pusharglist 1 ........................... <"bold_alert_text">
  [142] extcall 34 .............................. <member("bold_alert_text")>
  [144] getglobal 91 ............................ <TextMgr>
  [146] getparam 1 .............................. <textID>
  [148] pusharglist 2 ........................... <TextMgr, textID>
  [150] objcall 93 .............................. <TextMgr.GetRefText(textID)>
  [152] setobjprop 78 ........................... member("bold_alert_text").text = TextMgr.GetRefText(textID)
  [154] pushcons 42 ............................. <"entry_bigalertext22">
  [156] pusharglist 1 ........................... <"entry_bigalertext22">
  [158] extcall 34 .............................. <member("entry_bigalertext22")>
  [160] getparam 2 .............................. <textID2>
  [162] setobjprop 78 ........................... member("entry_bigalertext22").text = textID2
  [164] jmp [193]
  [167] pushcons 41 ............................. <"bold_alert_text">
  [169] pusharglist 1 ........................... <"bold_alert_text">
  [171] extcall 34 .............................. <member("bold_alert_text")>
  [173] getglobal 91 ............................ <TextMgr>
  [175] getparam 1 .............................. <textID>
  [177] pusharglist 2 ........................... <TextMgr, textID>
  [179] objcall 93 .............................. <TextMgr.GetRefText(textID)>
  [181] setobjprop 78 ........................... member("bold_alert_text").text = TextMgr.GetRefText(textID)
  [183] pushcons 42 ............................. <"entry_bigalertext22">
  [185] pusharglist 1 ........................... <"entry_bigalertext22">
  [187] extcall 34 .............................. <member("entry_bigalertext22")>
  [189] getlocal 0 .............................. <mymessage>
  [191] setobjprop 78 ........................... member("entry_bigalertext22").text = mymessage
  [193] getparam 0 .............................. <me>
  [195] pusharglist 1 ........................... <me>
  [197] objcall 289 ............................. <me.getLoader()>
  [200] pusharglistnoret 1 ...................... <me.getLoader()>
  [202] objcall 5 ............................... me.getLoader().closeWindow()
  [204] ret
end

on decisiondialog me, textID, okbuttonscript
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 43 ............................. <"sanfo_decision_dialog.window">
  [  4] pusharglistnoret 2 ...................... <me, "sanfo_decision_dialog.window">
  [  6] objcall 239 ............................. me.newwindow("sanfo_decision_dialog.window")
  [  8] pushcons 44 ............................. <"entry_bigalertext">
  [ 10] pusharglist 1 ........................... <"entry_bigalertext">
  [ 12] extcall 34 .............................. <member("entry_bigalertext")>
  [ 14] getglobal 91 ............................ <TextMgr>
  [ 16] getparam 1 .............................. <textID>
  [ 18] pusharglist 2 ........................... <TextMgr, textID>
  [ 20] objcall 93 .............................. <TextMgr.GetRefText(textID)>
  [ 22] setobjprop 78 ........................... member("entry_bigalertext").text = TextMgr.GetRefText(textID)
  [ 24] pusharglistnoret 0 ...................... <>
  [ 26] extcall 374 ............................. updateStage()
  [ 29] pushsymb 376 ............................ <#getokbutton>
  [ 32] pusharglist 1 ........................... <#getokbutton>
  [ 34] extcall 375 ............................. <sendAllSprites(#getokbutton)>
  [ 37] setlocal 0 .............................. okbutton = sendAllSprites(#getokbutton)
  [ 39] getlocal 0 .............................. <okbutton>
  [ 41] pusharglist 1 ........................... <okbutton>
  [ 43] extcall 36 .............................. <sprite(okbutton)>
  [ 45] getobjprop 40 ........................... <sprite(okbutton).scriptInstanceList>
  [ 47] getparam 2 .............................. <okbuttonscript>
  [ 49] pusharglist 1 ........................... <okbuttonscript>
  [ 51] extcall 39 .............................. <script(okbuttonscript)>
  [ 53] pusharglist 1 ........................... <script(okbuttonscript)>
  [ 55] extcall 0 ............................... <new(script(okbuttonscript))>
  [ 57] pusharglistnoret 2 ...................... <sprite(okbutton).scriptInstanceList, new(script(okbuttonscript))>
  [ 59] extcall 42 .............................. append(sprite(okbutton).scriptInstanceList, new(script(okbuttonscript)))
  [ 61] ret
end

on startCreateStudio_Result me, iError, sStudioID
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 44] ............................ (case) 0:
  [  9] getglobal 30 ............................ <ElementMgr>
  [ 11] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [ 13] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 16] getobjprop 14 ........................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [ 18] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [ 20] getglobal 30 ............................ <ElementMgr>
  [ 22] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [ 24] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 27] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 29] objcall 5 ............................... ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [ 31] getglobal 30 ............................ <ElementMgr>
  [ 33] pushcons 45 ............................. <"nav_createroom.window">
  [ 35] getlocal 0 .............................. <myRect>
  [ 37] pusharglistnoret 3 ...................... <ElementMgr, "nav_createroom.window", myRect>
  [ 39] objcall 239 ............................. ElementMgr.newwindow("nav_createroom.window", myRect)
  [ 41] jmp [211]
  [ 44] peek 0
  [ 46] pushint8 1 .............................. <1>
  [ 48] eq
  [ 49] jmpifz [ 95] ............................ (case) 1:
  [ 52] getglobal 30 ............................ <ElementMgr>
  [ 54] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [ 56] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 59] getobjprop 14 ........................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [ 61] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [ 63] getglobal 30 ............................ <ElementMgr>
  [ 65] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [ 67] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 70] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 72] objcall 5 ............................... ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [ 74] getglobal 30 ............................ <ElementMgr>
  [ 76] pushcons 46 ............................. <"nav_private_start.window">
  [ 78] getlocal 0 .............................. <myRect>
  [ 80] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_start.window", myRect>
  [ 82] objcall 239 ............................. ElementMgr.newwindow("nav_private_start.window", myRect)
  [ 84] getparam 0 .............................. <me>
  [ 86] pushcons 47 ............................. <"ALERT_GENERIC">
  [ 88] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [ 90] objcall 245 ............................. me.alert("ALERT_GENERIC")
  [ 92] jmp [211]
  [ 95] peek 0
  [ 97] pushint8 6 .............................. <6>
  [ 99] eq
  [100] jmpifz [146] ............................ (case) 6:
  [103] getglobal 30 ............................ <ElementMgr>
  [105] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [107] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [110] getobjprop 14 ........................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [112] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [114] getglobal 30 ............................ <ElementMgr>
  [116] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [118] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [121] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [123] objcall 5 ............................... ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [125] getglobal 30 ............................ <ElementMgr>
  [127] pushcons 46 ............................. <"nav_private_start.window">
  [129] getlocal 0 .............................. <myRect>
  [131] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_start.window", myRect>
  [133] objcall 239 ............................. ElementMgr.newwindow("nav_private_start.window", myRect)
  [135] getparam 0 .............................. <me>
  [137] pushcons 47 ............................. <"ALERT_GENERIC">
  [139] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [141] objcall 245 ............................. me.alert("ALERT_GENERIC")
  [143] jmp [211]
  [146] peek 0
  [148] pushint8 9 .............................. <9>
  [150] eq
  [151] jmpifz [211] ............................ (case) 9:
  [154] getglobal 30 ............................ <ElementMgr>
  [156] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [158] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [161] getobjprop 14 ........................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [163] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [165] getglobal 30 ............................ <ElementMgr>
  [167] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [169] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [172] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [174] objcall 5 ............................... ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [176] getglobal 30 ............................ <ElementMgr>
  [178] pushcons 46 ............................. <"nav_private_start.window">
  [180] getlocal 0 .............................. <myRect>
  [182] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_start.window", myRect>
  [184] objcall 239 ............................. ElementMgr.newwindow("nav_private_start.window", myRect)
  [186] getglobal 79 ............................ <oDenizenManager>
  [188] pusharglist 1 ........................... <oDenizenManager>
  [190] objcall 80 .............................. <oDenizenManager.getScreenName()>
  [192] setlocal 1 .............................. myscreenname = oDenizenManager.getScreenName()
  [194] getglobal 207 ........................... <oStudioManager>
  [196] getlocal 1 .............................. <myscreenname>
  [198] pusharglistnoret 2 ...................... <oStudioManager, myscreenname>
  [200] objcall 380 ............................. oStudioManager.getByOwnerName(myscreenname)
  [203] getparam 0 .............................. <me>
  [205] pushcons 48 ............................. <"ALERT_OVER_LIMIT">
  [207] pusharglistnoret 2 ...................... <me, "ALERT_OVER_LIMIT">
  [209] objcall 245 ............................. me.alert("ALERT_OVER_LIMIT")
  [211] pop 1 ................................... end case
  [213] ret
end

on createStudio_Result me, iError, sStudioName, sStudioID
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [100] ............................ (case) 0:
  [  9] getglobal 30 ............................ <ElementMgr>
  [ 11] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [ 13] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 16] getobjprop 14 ........................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [ 18] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [ 20] getglobal 30 ............................ <ElementMgr>
  [ 22] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [ 24] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 27] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 29] objcall 5 ............................... ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [ 31] getglobal 30 ............................ <ElementMgr>
  [ 33] pushcons 49 ............................. <"nav_roomready.window">
  [ 35] getlocal 0 .............................. <myRect>
  [ 37] pusharglistnoret 3 ...................... <ElementMgr, "nav_roomready.window", myRect>
  [ 39] objcall 239 ............................. ElementMgr.newwindow("nav_roomready.window", myRect)
  [ 41] pushcons 50 ............................. <"nav_studio_own_createdname">
  [ 43] pusharglist 1 ........................... <"nav_studio_own_createdname">
  [ 45] extcall 34 .............................. <member("nav_studio_own_createdname")>
  [ 47] getparam 2 .............................. <sStudioName>
  [ 49] setobjprop 78 ........................... member("nav_studio_own_createdname").text = sStudioName
  [ 51] pushcons 51 ............................. <"userroomid">
  [ 53] pusharglist 1 ........................... <"userroomid">
  [ 55] extcall 34 .............................. <member("userroomid")>
  [ 57] getobjprop 61 ........................... <member("userroomid").memberNum>
  [ 59] pushint8 1 .............................. <1>
  [ 61] lt ...................................... <member("userroomid").memberNum < 1>
  [ 62] jmpifz [ 87] ............................ if member("userroomid").memberNum < 1 then
  [ 65] pushsymb 102 ............................ <#field>
  [ 67] pusharglist 1 ........................... <#field>
  [ 69] extcall 0 ............................... <new(#field)>
  [ 71] setlocal 1 .............................. myMember = new(#field)
  [ 73] getlocal 1 .............................. <myMember>
  [ 75] pushcons 51 ............................. <"userroomid">
  [ 77] setobjprop 21 ........................... myMember.name = "userroomid"
  [ 79] getglobal 63 ............................ <gMembersToDelete>
  [ 81] getlocal 1 .............................. <myMember>
  [ 83] pusharglistnoret 2 ...................... <gMembersToDelete, myMember>
  [ 85] extcall 42 .............................. append(gMembersToDelete, myMember)
  [ 87] pushcons 51 ............................. <"userroomid">
  [ 89] pusharglist 1 ........................... <"userroomid">
  [ 91] extcall 34 .............................. <member("userroomid")>
  [ 93] getparam 3 .............................. <sStudioID>
  [ 95] setobjprop 78 ........................... member("userroomid").text = sStudioID
  [ 97] jmp [369]
  [100] peek 0
  [102] pushint8 1 .............................. <1>
  [104] eq
  [105] jmpifz [151] ............................ (case) 1:
  [108] getglobal 30 ............................ <ElementMgr>
  [110] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [112] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [115] getobjprop 14 ........................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [117] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [119] getglobal 30 ............................ <ElementMgr>
  [121] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [123] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [126] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [128] objcall 5 ............................... ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [130] getglobal 30 ............................ <ElementMgr>
  [132] pushcons 45 ............................. <"nav_createroom.window">
  [134] getlocal 0 .............................. <myRect>
  [136] pusharglistnoret 3 ...................... <ElementMgr, "nav_createroom.window", myRect>
  [138] objcall 239 ............................. ElementMgr.newwindow("nav_createroom.window", myRect)
  [140] getparam 0 .............................. <me>
  [142] pushcons 47 ............................. <"ALERT_GENERIC">
  [144] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [146] objcall 245 ............................. me.alert("ALERT_GENERIC")
  [148] jmp [369]
  [151] peek 0
  [153] pushint8 6 .............................. <6>
  [155] eq
  [156] jmpifz [202] ............................ (case) 6:
  [159] getglobal 30 ............................ <ElementMgr>
  [161] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [163] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [166] getobjprop 14 ........................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [168] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [170] getglobal 30 ............................ <ElementMgr>
  [172] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [174] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [177] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [179] objcall 5 ............................... ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [181] getglobal 30 ............................ <ElementMgr>
  [183] pushcons 45 ............................. <"nav_createroom.window">
  [185] getlocal 0 .............................. <myRect>
  [187] pusharglistnoret 3 ...................... <ElementMgr, "nav_createroom.window", myRect>
  [189] objcall 239 ............................. ElementMgr.newwindow("nav_createroom.window", myRect)
  [191] getparam 0 .............................. <me>
  [193] pushcons 47 ............................. <"ALERT_GENERIC">
  [195] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [197] objcall 245 ............................. me.alert("ALERT_GENERIC")
  [199] jmp [369]
  [202] peek 0
  [204] pushint8 7 .............................. <7>
  [206] eq
  [207] jmpifz [253] ............................ (case) 7:
  [210] getglobal 30 ............................ <ElementMgr>
  [212] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [214] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [217] getobjprop 14 ........................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [219] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [221] getglobal 30 ............................ <ElementMgr>
  [223] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [225] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [228] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [230] objcall 5 ............................... ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [232] getglobal 30 ............................ <ElementMgr>
  [234] pushcons 45 ............................. <"nav_createroom.window">
  [236] getlocal 0 .............................. <myRect>
  [238] pusharglistnoret 3 ...................... <ElementMgr, "nav_createroom.window", myRect>
  [240] objcall 239 ............................. ElementMgr.newwindow("nav_createroom.window", myRect)
  [242] getparam 0 .............................. <me>
  [244] pushcons 52 ............................. <"ALERT_ST_NAME_LANG">
  [246] pusharglistnoret 2 ...................... <me, "ALERT_ST_NAME_LANG">
  [248] objcall 245 ............................. me.alert("ALERT_ST_NAME_LANG")
  [250] jmp [369]
  [253] peek 0
  [255] pushint8 8 .............................. <8>
  [257] eq
  [258] jmpifz [304] ............................ (case) 8:
  [261] getglobal 30 ............................ <ElementMgr>
  [263] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [265] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [268] getobjprop 14 ........................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [270] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [272] getglobal 30 ............................ <ElementMgr>
  [274] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [276] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [279] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [281] objcall 5 ............................... ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [283] getglobal 30 ............................ <ElementMgr>
  [285] pushcons 45 ............................. <"nav_createroom.window">
  [287] getlocal 0 .............................. <myRect>
  [289] pusharglistnoret 3 ...................... <ElementMgr, "nav_createroom.window", myRect>
  [291] objcall 239 ............................. ElementMgr.newwindow("nav_createroom.window", myRect)
  [293] getparam 0 .............................. <me>
  [295] pushcons 53 ............................. <"ALERT_ST_DESC_LANG">
  [297] pusharglistnoret 2 ...................... <me, "ALERT_ST_DESC_LANG">
  [299] objcall 245 ............................. me.alert("ALERT_ST_DESC_LANG")
  [301] jmp [369]
  [304] peek 0
  [306] pushint8 9 .............................. <9>
  [308] eq
  [309] jmpifz [369] ............................ (case) 9:
  [312] getglobal 30 ............................ <ElementMgr>
  [314] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [316] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [319] getobjprop 14 ........................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [321] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [323] getglobal 30 ............................ <ElementMgr>
  [325] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [327] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [330] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [332] objcall 5 ............................... ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [334] getglobal 30 ............................ <ElementMgr>
  [336] pushcons 46 ............................. <"nav_private_start.window">
  [338] getlocal 0 .............................. <myRect>
  [340] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_start.window", myRect>
  [342] objcall 239 ............................. ElementMgr.newwindow("nav_private_start.window", myRect)
  [344] getglobal 79 ............................ <oDenizenManager>
  [346] pusharglist 1 ........................... <oDenizenManager>
  [348] objcall 80 .............................. <oDenizenManager.getScreenName()>
  [350] setlocal 2 .............................. myscreenname = oDenizenManager.getScreenName()
  [352] getglobal 207 ........................... <oStudioManager>
  [354] getlocal 2 .............................. <myscreenname>
  [356] pusharglistnoret 2 ...................... <oStudioManager, myscreenname>
  [358] objcall 380 ............................. oStudioManager.getByOwnerName(myscreenname)
  [361] getparam 0 .............................. <me>
  [363] pushcons 48 ............................. <"ALERT_OVER_LIMIT">
  [365] pusharglistnoret 2 ...................... <me, "ALERT_OVER_LIMIT">
  [367] objcall 245 ............................. me.alert("ALERT_OVER_LIMIT")
  [369] pop 1 ................................... end case
  [371] ret
end

on startModifyStudio_Result me, iError, sStudioName, sStudioDescription
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 68] ............................ (case) 0:
  [  9] getparam 0 .............................. <me>
  [ 11] getchainedprop 31 ....................... <me.pOpenWindows>
  [ 13] getchainedprop 385 ...................... <me.pOpenWindows.nav_private_info>
  [ 16] getobjprop 14 ........................... <me.pOpenWindows.nav_private_info.prect>
  [ 18] setlocal 0 .............................. myRect = me.pOpenWindows.nav_private_info.prect
  [ 20] getparam 0 .............................. <me>
  [ 22] getchainedprop 31 ....................... <me.pOpenWindows>
  [ 24] getchainedprop 385 ...................... <me.pOpenWindows.nav_private_info>
  [ 27] pusharglistnoret 1 ...................... <me.pOpenWindows.nav_private_info>
  [ 29] objcall 5 ............................... me.pOpenWindows.nav_private_info.closeWindow()
  [ 31] getparam 0 .............................. <me>
  [ 33] pushcons 54 ............................. <"nav_private_modify.window">
  [ 35] getlocal 0 .............................. <myRect>
  [ 37] pusharglistnoret 3 ...................... <me, "nav_private_modify.window", myRect>
  [ 39] objcall 239 ............................. me.newwindow("nav_private_modify.window", myRect)
  [ 41] pushcons 55 ............................. <"nav_modify_studio_name">
  [ 43] pusharglist 1 ........................... <"nav_modify_studio_name">
  [ 45] extcall 34 .............................. <member("nav_modify_studio_name")>
  [ 47] getparam 2 .............................. <sStudioName>
  [ 49] setobjprop 78 ........................... member("nav_modify_studio_name").text = sStudioName
  [ 51] pushcons 56 ............................. <"nav_modify_studio_desc">
  [ 53] pusharglist 1 ........................... <"nav_modify_studio_desc">
  [ 55] extcall 34 .............................. <member("nav_modify_studio_desc")>
  [ 57] getparam 3 .............................. <sStudioDescription>
  [ 59] pusharglist 1 ........................... <sStudioDescription>
  [ 61] extcall 161 ............................. <string(sStudioDescription)>
  [ 63] setobjprop 78 ........................... member("nav_modify_studio_desc").text = string(sStudioDescription)
  [ 65] jmp [100]
  [ 68] peek 0
  [ 70] pushint8 1 .............................. <1>
  [ 72] nteq
  [ 73] jmpifz [ 92] ............................ (case) 1, ...
  [ 76] peek 0
  [ 78] pushint8 2 .............................. <2>
  [ 80] nteq
  [ 81] jmpifz [ 92] ............................ (case) ..., 2, ...
  [ 84] peek 0
  [ 86] pushint8 3 .............................. <3>
  [ 88] eq
  [ 89] jmpifz [100] ............................ (case) ..., 3:
  [ 92] getparam 0 .............................. <me>
  [ 94] pushcons 47 ............................. <"ALERT_GENERIC">
  [ 96] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [ 98] objcall 245 ............................. me.alert("ALERT_GENERIC")
  [100] pop 1 ................................... end case
  [102] ret
end

on deleteStudio_Result me, iError
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 44] ............................ (case) 0:
  [  9] getparam 0 .............................. <me>
  [ 11] getchainedprop 31 ....................... <me.pOpenWindows>
  [ 13] getchainedprop 387 ...................... <me.pOpenWindows.nav_private_modify_delete2>
  [ 16] getobjprop 14 ........................... <me.pOpenWindows.nav_private_modify_delete2.prect>
  [ 18] setlocal 0 .............................. myRect = me.pOpenWindows.nav_private_modify_delete2.prect
  [ 20] getparam 0 .............................. <me>
  [ 22] getchainedprop 31 ....................... <me.pOpenWindows>
  [ 24] getchainedprop 387 ...................... <me.pOpenWindows.nav_private_modify_delete2>
  [ 27] pusharglistnoret 1 ...................... <me.pOpenWindows.nav_private_modify_delete2>
  [ 29] objcall 5 ............................... me.pOpenWindows.nav_private_modify_delete2.closeWindow()
  [ 31] getparam 0 .............................. <me>
  [ 33] pushcons 57 ............................. <"nav_private_modify_delete3.window">
  [ 35] getlocal 0 .............................. <myRect>
  [ 37] pusharglistnoret 3 ...................... <me, "nav_private_modify_delete3.window", myRect>
  [ 39] objcall 239 ............................. me.newwindow("nav_private_modify_delete3.window", myRect)
  [ 41] jmp [159]
  [ 44] peek 0
  [ 46] pushint8 1 .............................. <1>
  [ 48] nteq
  [ 49] jmpifz [ 68] ............................ (case) 1, ...
  [ 52] peek 0
  [ 54] pushint8 2 .............................. <2>
  [ 56] nteq
  [ 57] jmpifz [ 68] ............................ (case) ..., 2, ...
  [ 60] peek 0
  [ 62] pushint8 3 .............................. <3>
  [ 64] eq
  [ 65] jmpifz [111] ............................ (case) ..., 3:
  [ 68] getparam 0 .............................. <me>
  [ 70] getchainedprop 31 ....................... <me.pOpenWindows>
  [ 72] getchainedprop 387 ...................... <me.pOpenWindows.nav_private_modify_delete2>
  [ 75] getobjprop 14 ........................... <me.pOpenWindows.nav_private_modify_delete2.prect>
  [ 77] setlocal 0 .............................. myRect = me.pOpenWindows.nav_private_modify_delete2.prect
  [ 79] getparam 0 .............................. <me>
  [ 81] getchainedprop 31 ....................... <me.pOpenWindows>
  [ 83] getchainedprop 387 ...................... <me.pOpenWindows.nav_private_modify_delete2>
  [ 86] pusharglistnoret 1 ...................... <me.pOpenWindows.nav_private_modify_delete2>
  [ 88] objcall 5 ............................... me.pOpenWindows.nav_private_modify_delete2.closeWindow()
  [ 90] getparam 0 .............................. <me>
  [ 92] pushcons 46 ............................. <"nav_private_start.window">
  [ 94] getlocal 0 .............................. <myRect>
  [ 96] pusharglistnoret 3 ...................... <me, "nav_private_start.window", myRect>
  [ 98] objcall 239 ............................. me.newwindow("nav_private_start.window", myRect)
  [100] getparam 0 .............................. <me>
  [102] pushcons 47 ............................. <"ALERT_GENERIC">
  [104] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [106] objcall 245 ............................. me.alert("ALERT_GENERIC")
  [108] jmp [159]
  [111] peek 0
  [113] pushint8 17 ............................. <17>
  [115] eq
  [116] jmpifz [159] ............................ (case) 17:
  [119] getparam 0 .............................. <me>
  [121] getchainedprop 31 ....................... <me.pOpenWindows>
  [123] getchainedprop 387 ...................... <me.pOpenWindows.nav_private_modify_delete2>
  [126] getobjprop 14 ........................... <me.pOpenWindows.nav_private_modify_delete2.prect>
  [128] setlocal 0 .............................. myRect = me.pOpenWindows.nav_private_modify_delete2.prect
  [130] getparam 0 .............................. <me>
  [132] getchainedprop 31 ....................... <me.pOpenWindows>
  [134] getchainedprop 387 ...................... <me.pOpenWindows.nav_private_modify_delete2>
  [137] pusharglistnoret 1 ...................... <me.pOpenWindows.nav_private_modify_delete2>
  [139] objcall 5 ............................... me.pOpenWindows.nav_private_modify_delete2.closeWindow()
  [141] getparam 0 .............................. <me>
  [143] pushcons 46 ............................. <"nav_private_start.window">
  [145] getlocal 0 .............................. <myRect>
  [147] pusharglistnoret 3 ...................... <me, "nav_private_start.window", myRect>
  [149] objcall 239 ............................. me.newwindow("nav_private_start.window", myRect)
  [151] getparam 0 .............................. <me>
  [153] pushcons 58 ............................. <"ALERT_STUDIO_NOT_EMPTY">
  [155] pusharglistnoret 2 ...................... <me, "ALERT_STUDIO_NOT_EMPTY">
  [157] objcall 245 ............................. me.alert("ALERT_STUDIO_NOT_EMPTY")
  [159] pop 1 ................................... end case
  [161] ret
end

on getDenizenByScreenName_Result me, iError, sScreenName, sLastAccess, sLastSeen, sAvatarMission, sAvatarString, bOnline, bExists, sLastSeenInName
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [441] ............................ (case) 0:
  [  9] getparam 8 .............................. <bExists>
  [ 11] not ..................................... <not bExists>
  [ 12] jmpifz [ 97] ............................ if not bExists then / else
  [ 15] getparam 0 .............................. <me>
  [ 17] getobjprop 31 ........................... <me.pOpenWindows>
  [ 19] pushsymb 388 ............................ <#nav_search_results>
  [ 22] pusharglist 2 ........................... <me.pOpenWindows, #nav_search_results>
  [ 24] extcall 312 ............................. <getaProp(me.pOpenWindows, #nav_search_results)>
  [ 27] pusharglist 1 ........................... <getaProp(me.pOpenWindows, #nav_search_results)>
  [ 29] extcall 12 .............................. <voidp(getaProp(me.pOpenWindows, #nav_search_results))>
  [ 31] pushzero ................................ <0>
  [ 32] eq ...................................... <voidp(getaProp(me.pOpenWindows, #nav_search_results)) = 0>
  [ 33] jmpifz [ 68] ............................ if voidp(getaProp(me.pOpenWindows, #nav_search_results)) = 0 then
  [ 36] getparam 0 .............................. <me>
  [ 38] getchainedprop 31 ....................... <me.pOpenWindows>
  [ 40] getchainedprop 388 ...................... <me.pOpenWindows.nav_search_results>
  [ 43] getobjprop 14 ........................... <me.pOpenWindows.nav_search_results.prect>
  [ 45] setlocal 0 .............................. myRect = me.pOpenWindows.nav_search_results.prect
  [ 47] getparam 0 .............................. <me>
  [ 49] getchainedprop 31 ....................... <me.pOpenWindows>
  [ 51] getchainedprop 388 ...................... <me.pOpenWindows.nav_search_results>
  [ 54] pusharglistnoret 1 ...................... <me.pOpenWindows.nav_search_results>
  [ 56] objcall 5 ............................... me.pOpenWindows.nav_search_results.closeWindow()
  [ 58] getparam 0 .............................. <me>
  [ 60] pushcons 59 ............................. <"nav_search_start.window">
  [ 62] getlocal 0 .............................. <myRect>
  [ 64] pusharglistnoret 3 ...................... <me, "nav_search_start.window", myRect>
  [ 66] objcall 239 ............................. me.newwindow("nav_search_start.window", myRect)
  [ 68] pushcons 60 ............................. <"nav_v-ego_search_starttext">
  [ 70] pusharglist 1 ........................... <"nav_v-ego_search_starttext">
  [ 72] extcall 34 .............................. <member("nav_v-ego_search_starttext")>
  [ 74] getglobal 91 ............................ <TextMgr>
  [ 76] pushcons 61 ............................. <"NAV_VEGOS_NOT_FOUND">
  [ 78] pusharglist 2 ........................... <TextMgr, "NAV_VEGOS_NOT_FOUND">
  [ 80] objcall 93 .............................. <TextMgr.GetRefText("NAV_VEGOS_NOT_FOUND")>
  [ 82] setobjprop 78 ........................... member("nav_v-ego_search_starttext").text = TextMgr.GetRefText("NAV_VEGOS_NOT_FOUND")
  [ 84] pushcons 62 ............................. <"nav_v-ego_desc">
  [ 86] pusharglist 1 ........................... <"nav_v-ego_desc">
  [ 88] extcall 34 .............................. <member("nav_v-ego_desc")>
  [ 90] pushcons 10 ............................. <EMPTY>
  [ 92] setobjprop 78 ........................... member("nav_v-ego_desc").text = EMPTY
  [ 94] jmp [438]
  [ 97] getparam 0 .............................. <me>
  [ 99] getobjprop 31 ........................... <me.pOpenWindows>
  [101] pushsymb 388 ............................ <#nav_search_results>
  [104] pusharglist 2 ........................... <me.pOpenWindows, #nav_search_results>
  [106] extcall 312 ............................. <getaProp(me.pOpenWindows, #nav_search_results)>
  [109] pusharglist 1 ........................... <getaProp(me.pOpenWindows, #nav_search_results)>
  [111] extcall 12 .............................. <voidp(getaProp(me.pOpenWindows, #nav_search_results))>
  [113] pushint8 1 .............................. <1>
  [115] eq ...................................... <voidp(getaProp(me.pOpenWindows, #nav_search_results)) = 1>
  [116] jmpifz [151] ............................ if voidp(getaProp(me.pOpenWindows, #nav_search_results)) = 1 then
  [119] getparam 0 .............................. <me>
  [121] getchainedprop 31 ....................... <me.pOpenWindows>
  [123] getchainedprop 389 ...................... <me.pOpenWindows.nav_search_start>
  [126] getobjprop 14 ........................... <me.pOpenWindows.nav_search_start.prect>
  [128] setlocal 0 .............................. myRect = me.pOpenWindows.nav_search_start.prect
  [130] getparam 0 .............................. <me>
  [132] getchainedprop 31 ....................... <me.pOpenWindows>
  [134] getchainedprop 389 ...................... <me.pOpenWindows.nav_search_start>
  [137] pusharglistnoret 1 ...................... <me.pOpenWindows.nav_search_start>
  [139] objcall 5 ............................... me.pOpenWindows.nav_search_start.closeWindow()
  [141] getparam 0 .............................. <me>
  [143] pushcons 63 ............................. <"nav_search_results.window">
  [145] getlocal 0 .............................. <myRect>
  [147] pusharglistnoret 3 ...................... <me, "nav_search_results.window", myRect>
  [149] objcall 239 ............................. me.newwindow("nav_search_results.window", myRect)
  [151] pushcons 64 ............................. <"nav_v-ego_search_name1">
  [153] pusharglist 1 ........................... <"nav_v-ego_search_name1">
  [155] extcall 34 .............................. <member("nav_v-ego_search_name1")>
  [157] getparam 2 .............................. <sScreenName>
  [159] setobjprop 78 ........................... member("nav_v-ego_search_name1").text = sScreenName
  [161] getparam 5 .............................. <sAvatarMission>
  [163] pusharglist 0 ........................... <>
  [165] extcall 390 ............................. <VOID>
  [168] nteq .................................... <sAvatarMission <> VOID>
  [169] jmpifz [185] ............................ if sAvatarMission <> VOID then / else
  [172] pushcons 65 ............................. <"nav_v-ego_search_motto">
  [174] pusharglist 1 ........................... <"nav_v-ego_search_motto">
  [176] extcall 34 .............................. <member("nav_v-ego_search_motto")>
  [178] getparam 5 .............................. <sAvatarMission>
  [180] setobjprop 78 ........................... member("nav_v-ego_search_motto").text = sAvatarMission
  [182] jmp [195]
  [185] pushcons 65 ............................. <"nav_v-ego_search_motto">
  [187] pusharglist 1 ........................... <"nav_v-ego_search_motto">
  [189] extcall 34 .............................. <member("nav_v-ego_search_motto")>
  [191] pushcons 10 ............................. <EMPTY>
  [193] setobjprop 78 ........................... member("nav_v-ego_search_motto").text = EMPTY
  [195] getglobal 79 ............................ <oDenizenManager>
  [197] getparam 6 .............................. <sAvatarString>
  [199] pusharglist 2 ........................... <oDenizenManager, sAvatarString>
  [201] objcall 391 ............................. <oDenizenManager.getDenizenAvatarImage(sAvatarString)>
  [204] setlocal 1 .............................. oPreviewImage = oDenizenManager.getDenizenAvatarImage(sAvatarString)
  [206] pushcons 66 ............................. <"nav_v-ego_result_dummyfigure">
  [208] pusharglist 1 ........................... <"nav_v-ego_result_dummyfigure">
  [210] extcall 34 .............................. <member("nav_v-ego_result_dummyfigure")>
  [212] getlocal 1 .............................. <oPreviewImage>
  [214] setobjprop 74 ........................... member("nav_v-ego_result_dummyfigure").image = oPreviewImage
  [216] getparam 7 .............................. <bOnline>
  [218] not ..................................... <not bOnline>
  [219] jmpifz [257] ............................ if not bOnline then / else
  [222] pushcons 67 ............................. <"nav_v-ego_search_lastlocation">
  [224] pusharglist 1 ........................... <"nav_v-ego_search_lastlocation">
  [226] extcall 34 .............................. <member("nav_v-ego_search_lastlocation")>
  [228] getglobal 91 ............................ <TextMgr>
  [230] pushcons 68 ............................. <"NAV_VEGOS_CURRENTLY">
  [232] pusharglist 2 ........................... <TextMgr, "NAV_VEGOS_CURRENTLY">
  [234] objcall 93 .............................. <TextMgr.GetRefText("NAV_VEGOS_CURRENTLY")>
  [236] setobjprop 78 ........................... member("nav_v-ego_search_lastlocation").text = TextMgr.GetRefText("NAV_VEGOS_CURRENTLY")
  [238] pushcons 69 ............................. <"nav_v-ego_search_Location_name">
  [240] pusharglist 1 ........................... <"nav_v-ego_search_Location_name">
  [242] extcall 34 .............................. <member("nav_v-ego_search_Location_name")>
  [244] getglobal 91 ............................ <TextMgr>
  [246] pushcons 70 ............................. <"NAV_VEGOS_OFFLINE">
  [248] pusharglist 2 ........................... <TextMgr, "NAV_VEGOS_OFFLINE">
  [250] objcall 93 .............................. <TextMgr.GetRefText("NAV_VEGOS_OFFLINE")>
  [252] setobjprop 78 ........................... member("nav_v-ego_search_Location_name").text = TextMgr.GetRefText("NAV_VEGOS_OFFLINE")
  [254] jmp [368]
  [257] pushcons 67 ............................. <"nav_v-ego_search_lastlocation">
  [259] pusharglist 1 ........................... <"nav_v-ego_search_lastlocation">
  [261] extcall 34 .............................. <member("nav_v-ego_search_lastlocation")>
  [263] getglobal 91 ............................ <TextMgr>
  [265] pushcons 71 ............................. <"NAV_VEGOS_LAST_SEEN">
  [267] pusharglist 2 ........................... <TextMgr, "NAV_VEGOS_LAST_SEEN">
  [269] objcall 93 .............................. <TextMgr.GetRefText("NAV_VEGOS_LAST_SEEN")>
  [271] setobjprop 78 ........................... member("nav_v-ego_search_lastlocation").text = TextMgr.GetRefText("NAV_VEGOS_LAST_SEEN")
  [273] getparam 4 .............................. <sLastSeen>
  [275] pusharglist 1 ........................... <sLastSeen>
  [277] extcall 12 .............................. <voidp(sLastSeen)>
  [279] getparam 4 .............................. <sLastSeen>
  [281] pushcons 10 ............................. <EMPTY>
  [283] eq ...................................... <sLastSeen = EMPTY>
  [284] or ...................................... <voidp(sLastSeen) or (sLastSeen = EMPTY)>
  [285] getparam 4 .............................. <sLastSeen>
  [287] pushcons 72 ............................. <"$LOBBY$">
  [289] eq ...................................... <sLastSeen = "$LOBBY$">
  [290] or ...................................... <voidp(sLastSeen) or (sLastSeen = EMPTY) or (sLastSeen = "$LOBBY$")>
  [291] jmpifz [307] ............................ if voidp(sLastSeen) or (sLastSeen = EMPTY) or (sLastSeen = "$LOBBY$") then / else
  [294] getglobal 91 ............................ <TextMgr>
  [296] pushcons 73 ............................. <"NAV_VEGOS_LOBBY">
  [298] pusharglist 2 ........................... <TextMgr, "NAV_VEGOS_LOBBY">
  [300] objcall 93 .............................. <TextMgr.GetRefText("NAV_VEGOS_LOBBY")>
  [302] setlocal 2 .............................. myloc = TextMgr.GetRefText("NAV_VEGOS_LOBBY")
  [304] jmp [358]
  [307] getparam 0 .............................. <me>
  [309] pusharglist 1 ........................... <me>
  [311] objcall 269 ............................. <me.getMessengerObject()>
  [314] getparam 2 .............................. <sScreenName>
  [316] pusharglist 2 ........................... <me.getMessengerObject(), sScreenName>
  [318] objcall 392 ............................. <me.getMessengerObject().isFriend(sScreenName)>
  [321] setlocal 3 .............................. bIsFriend = me.getMessengerObject().isFriend(sScreenName)
  [323] getparam 4 .............................. <sLastSeen>
  [325] pushcons 74 ............................. <"$SYSTEM$">
  [327] contains0str ............................ <sLastSeen starts "$SYSTEM$">
  [328] setlocal 4 .............................. bIsPublic = sLastSeen starts "$SYSTEM$"
  [330] getlocal 3 .............................. <bIsFriend>
  [332] jmpifz [342] ............................ if bIsFriend then / else
  [335] getparam 9 .............................. <sLastSeenInName>
  [337] setlocal 2 .............................. myloc = sLastSeenInName
  [339] jmp [358]
  [342] getlocal 4 .............................. <bIsPublic>
  [344] jmpifz [354] ............................ if bIsPublic then / else
  [347] pushcons 75 ............................. <"Public Studio">
  [349] setlocal 2 .............................. myloc = "Public Studio"
  [351] jmp [358]
  [354] pushcons 76 ............................. <"Private Studio">
  [356] setlocal 2 .............................. myloc = "Private Studio"
  [358] pushcons 69 ............................. <"nav_v-ego_search_Location_name">
  [360] pusharglist 1 ........................... <"nav_v-ego_search_Location_name">
  [362] extcall 34 .............................. <member("nav_v-ego_search_Location_name")>
  [364] getlocal 2 .............................. <myloc>
  [366] setobjprop 78 ........................... member("nav_v-ego_search_Location_name").text = myloc
  [368] getparam 3 .............................. <sLastAccess>
  [370] pusharglist 0 ........................... <>
  [372] extcall 390 ............................. <VOID>
  [375] nteq .................................... <sLastAccess <> VOID>
  [376] jmpifz [438] ............................ if sLastAccess <> VOID then
  [379] pushcons 77 ............................. <"nav_v-ego_search_name2">
  [381] pusharglist 1 ........................... <"nav_v-ego_search_name2">
  [383] extcall 34 .............................. <member("nav_v-ego_search_name2")>
  [385] getglobal 91 ............................ <TextMgr>
  [387] pushcons 78 ............................. <"NAV_VEGOS_LAST_ACCESS">
  [389] pusharglist 2 ........................... <TextMgr, "NAV_VEGOS_LAST_ACCESS">
  [391] objcall 93 .............................. <TextMgr.GetRefText("NAV_VEGOS_LAST_ACCESS")>
  [393] setobjprop 78 ........................... member("nav_v-ego_search_name2").text = TextMgr.GetRefText("NAV_VEGOS_LAST_ACCESS")
  [395] pushcons 31 ............................. <" ">
  [397] setmovieprop 157 ........................ the itemDelimiter = " "
  [399] getglobal 91 ............................ <TextMgr>
  [401] getparam 3 .............................. <sLastAccess>
  [403] pusharglist 2 ........................... <TextMgr, sLastAccess>
  [405] objcall 393 ............................. <TextMgr.getDate(sLastAccess)>
  [408] setlocal 5 .............................. NewDate = TextMgr.getDate(sLastAccess)
  [410] getglobal 91 ............................ <TextMgr>
  [412] getparam 3 .............................. <sLastAccess>
  [414] pusharglist 2 ........................... <TextMgr, sLastAccess>
  [416] objcall 394 ............................. <TextMgr.getTime(sLastAccess)>
  [419] setlocal 6 .............................. mytime = TextMgr.getTime(sLastAccess)
  [421] getlocal 5 .............................. <NewDate>
  [423] getlocal 6 .............................. <mytime>
  [425] joinpadstr .............................. <NewDate && mytime>
  [426] setlocal 7 .............................. outputdate = NewDate && mytime
  [428] pushcons 79 ............................. <"nav_v-ego_search_name3">
  [430] pusharglist 1 ........................... <"nav_v-ego_search_name3">
  [432] extcall 34 .............................. <member("nav_v-ego_search_name3")>
  [434] getlocal 7 .............................. <outputdate>
  [436] setobjprop 78 ........................... member("nav_v-ego_search_name3").text = outputdate
  [438] jmp [618]
  [441] peek 0
  [443] pushint8 1 .............................. <1>
  [445] eq
  [446] jmpifz [531] ............................ (case) 1:
  [449] getparam 0 .............................. <me>
  [451] getobjprop 31 ........................... <me.pOpenWindows>
  [453] pushsymb 388 ............................ <#nav_search_results>
  [456] pusharglist 2 ........................... <me.pOpenWindows, #nav_search_results>
  [458] extcall 312 ............................. <getaProp(me.pOpenWindows, #nav_search_results)>
  [461] pusharglist 1 ........................... <getaProp(me.pOpenWindows, #nav_search_results)>
  [463] extcall 12 .............................. <voidp(getaProp(me.pOpenWindows, #nav_search_results))>
  [465] pushzero ................................ <0>
  [466] eq ...................................... <voidp(getaProp(me.pOpenWindows, #nav_search_results)) = 0>
  [467] jmpifz [502] ............................ if voidp(getaProp(me.pOpenWindows, #nav_search_results)) = 0 then
  [470] getparam 0 .............................. <me>
  [472] getchainedprop 31 ....................... <me.pOpenWindows>
  [474] getchainedprop 388 ...................... <me.pOpenWindows.nav_search_results>
  [477] getobjprop 14 ........................... <me.pOpenWindows.nav_search_results.prect>
  [479] setlocal 0 .............................. myRect = me.pOpenWindows.nav_search_results.prect
  [481] getparam 0 .............................. <me>
  [483] getchainedprop 31 ....................... <me.pOpenWindows>
  [485] getchainedprop 388 ...................... <me.pOpenWindows.nav_search_results>
  [488] pusharglistnoret 1 ...................... <me.pOpenWindows.nav_search_results>
  [490] objcall 5 ............................... me.pOpenWindows.nav_search_results.closeWindow()
  [492] getparam 0 .............................. <me>
  [494] pushcons 59 ............................. <"nav_search_start.window">
  [496] getlocal 0 .............................. <myRect>
  [498] pusharglistnoret 3 ...................... <me, "nav_search_start.window", myRect>
  [500] objcall 239 ............................. me.newwindow("nav_search_start.window", myRect)
  [502] pushcons 60 ............................. <"nav_v-ego_search_starttext">
  [504] pusharglist 1 ........................... <"nav_v-ego_search_starttext">
  [506] extcall 34 .............................. <member("nav_v-ego_search_starttext")>
  [508] getglobal 91 ............................ <TextMgr>
  [510] pushcons 61 ............................. <"NAV_VEGOS_NOT_FOUND">
  [512] pusharglist 2 ........................... <TextMgr, "NAV_VEGOS_NOT_FOUND">
  [514] objcall 93 .............................. <TextMgr.GetRefText("NAV_VEGOS_NOT_FOUND")>
  [516] setobjprop 78 ........................... member("nav_v-ego_search_starttext").text = TextMgr.GetRefText("NAV_VEGOS_NOT_FOUND")
  [518] pushcons 62 ............................. <"nav_v-ego_desc">
  [520] pusharglist 1 ........................... <"nav_v-ego_desc">
  [522] extcall 34 .............................. <member("nav_v-ego_desc")>
  [524] pushcons 10 ............................. <EMPTY>
  [526] setobjprop 78 ........................... member("nav_v-ego_desc").text = EMPTY
  [528] jmp [618]
  [531] peek 0
  [533] pushint8 2 .............................. <2>
  [535] eq
  [536] jmpifz [618] ............................ (case) 2:
  [539] getparam 0 .............................. <me>
  [541] getobjprop 31 ........................... <me.pOpenWindows>
  [543] pushsymb 388 ............................ <#nav_search_results>
  [546] pusharglist 2 ........................... <me.pOpenWindows, #nav_search_results>
  [548] extcall 312 ............................. <getaProp(me.pOpenWindows, #nav_search_results)>
  [551] pusharglist 1 ........................... <getaProp(me.pOpenWindows, #nav_search_results)>
  [553] extcall 12 .............................. <voidp(getaProp(me.pOpenWindows, #nav_search_results))>
  [555] pushzero ................................ <0>
  [556] eq ...................................... <voidp(getaProp(me.pOpenWindows, #nav_search_results)) = 0>
  [557] jmpifz [592] ............................ if voidp(getaProp(me.pOpenWindows, #nav_search_results)) = 0 then
  [560] getparam 0 .............................. <me>
  [562] getchainedprop 31 ....................... <me.pOpenWindows>
  [564] getchainedprop 388 ...................... <me.pOpenWindows.nav_search_results>
  [567] getobjprop 14 ........................... <me.pOpenWindows.nav_search_results.prect>
  [569] setlocal 0 .............................. myRect = me.pOpenWindows.nav_search_results.prect
  [571] getparam 0 .............................. <me>
  [573] getchainedprop 31 ....................... <me.pOpenWindows>
  [575] getchainedprop 388 ...................... <me.pOpenWindows.nav_search_results>
  [578] pusharglistnoret 1 ...................... <me.pOpenWindows.nav_search_results>
  [580] objcall 5 ............................... me.pOpenWindows.nav_search_results.closeWindow()
  [582] getparam 0 .............................. <me>
  [584] pushcons 59 ............................. <"nav_search_start.window">
  [586] getlocal 0 .............................. <myRect>
  [588] pusharglistnoret 3 ...................... <me, "nav_search_start.window", myRect>
  [590] objcall 239 ............................. me.newwindow("nav_search_start.window", myRect)
  [592] pushcons 60 ............................. <"nav_v-ego_search_starttext">
  [594] pusharglist 1 ........................... <"nav_v-ego_search_starttext">
  [596] extcall 34 .............................. <member("nav_v-ego_search_starttext")>
  [598] getglobal 91 ............................ <TextMgr>
  [600] pushcons 61 ............................. <"NAV_VEGOS_NOT_FOUND">
  [602] pusharglist 2 ........................... <TextMgr, "NAV_VEGOS_NOT_FOUND">
  [604] objcall 93 .............................. <TextMgr.GetRefText("NAV_VEGOS_NOT_FOUND")>
  [606] setobjprop 78 ........................... member("nav_v-ego_search_starttext").text = TextMgr.GetRefText("NAV_VEGOS_NOT_FOUND")
  [608] pushcons 62 ............................. <"nav_v-ego_desc">
  [610] pusharglist 1 ........................... <"nav_v-ego_desc">
  [612] extcall 34 .............................. <member("nav_v-ego_desc")>
  [614] pushcons 10 ............................. <EMPTY>
  [616] setobjprop 78 ........................... member("nav_v-ego_desc").text = EMPTY
  [618] pop 1 ................................... end case
  [620] ret
end

on modifyStudio_Result me, iError, sStudioName
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 78] ............................ (case) 0:
  [  9] getglobal 30 ............................ <ElementMgr>
  [ 11] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [ 13] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 16] getobjprop 14 ........................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [ 18] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [ 20] getglobal 30 ............................ <ElementMgr>
  [ 22] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [ 24] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 27] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 29] objcall 5 ............................... ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [ 31] getglobal 30 ............................ <ElementMgr>
  [ 33] pushcons 46 ............................. <"nav_private_start.window">
  [ 35] getlocal 0 .............................. <myRect>
  [ 37] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_start.window", myRect>
  [ 39] objcall 239 ............................. ElementMgr.newwindow("nav_private_start.window", myRect)
  [ 41] pushcons 8 .............................. <"userlist">
  [ 43] pusharglist 1 ........................... <"userlist">
  [ 45] extcall 34 .............................. <member("userlist")>
  [ 47] pushcons 9 .............................. <"blocked">
  [ 49] setobjprop 315 .......................... member("userlist").comments = "blocked"
  [ 52] getglobal 30 ............................ <ElementMgr>
  [ 54] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [ 56] getchainedprop 410 ...................... <ElementMgr.pOpenWindows.nav_private_start>
  [ 59] getchainedprop 10 ....................... <ElementMgr.pOpenWindows.nav_private_start.pScrollingLists>
  [ 61] getchainedprop 64 ....................... <ElementMgr.pOpenWindows.nav_private_start.pScrollingLists.userList>
  [ 63] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_private_start.pScrollingLists.userList>
  [ 65] objcall 313 ............................. ElementMgr.pOpenWindows.nav_private_start.pScrollingLists.userList.displayloading()
  [ 68] getglobal 207 ........................... <oStudioManager>
  [ 70] pusharglistnoret 1 ...................... <oStudioManager>
  [ 72] objcall 320 ............................. oStudioManager.getAllPrivateStudios()
  [ 75] jmp [347]
  [ 78] peek 0
  [ 80] pushint8 1 .............................. <1>
  [ 82] eq
  [ 83] jmpifz [129] ............................ (case) 1:
  [ 86] getglobal 30 ............................ <ElementMgr>
  [ 88] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [ 90] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [ 93] getobjprop 14 ........................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [ 95] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [ 97] getglobal 30 ............................ <ElementMgr>
  [ 99] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [101] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [104] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [106] objcall 5 ............................... ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [108] getglobal 30 ............................ <ElementMgr>
  [110] pushcons 54 ............................. <"nav_private_modify.window">
  [112] getlocal 0 .............................. <myRect>
  [114] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_modify.window", myRect>
  [116] objcall 239 ............................. ElementMgr.newwindow("nav_private_modify.window", myRect)
  [118] getparam 0 .............................. <me>
  [120] pushcons 47 ............................. <"ALERT_GENERIC">
  [122] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [124] objcall 245 ............................. me.alert("ALERT_GENERIC")
  [126] jmp [347]
  [129] peek 0
  [131] pushint8 6 .............................. <6>
  [133] eq
  [134] jmpifz [180] ............................ (case) 6:
  [137] getglobal 30 ............................ <ElementMgr>
  [139] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [141] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [144] getobjprop 14 ........................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [146] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [148] getglobal 30 ............................ <ElementMgr>
  [150] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [152] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [155] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [157] objcall 5 ............................... ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [159] getglobal 30 ............................ <ElementMgr>
  [161] pushcons 54 ............................. <"nav_private_modify.window">
  [163] getlocal 0 .............................. <myRect>
  [165] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_modify.window", myRect>
  [167] objcall 239 ............................. ElementMgr.newwindow("nav_private_modify.window", myRect)
  [169] getparam 0 .............................. <me>
  [171] pushcons 47 ............................. <"ALERT_GENERIC">
  [173] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [175] objcall 245 ............................. me.alert("ALERT_GENERIC")
  [177] jmp [347]
  [180] peek 0
  [182] pushint8 7 .............................. <7>
  [184] eq
  [185] jmpifz [231] ............................ (case) 7:
  [188] getglobal 30 ............................ <ElementMgr>
  [190] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [192] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [195] getobjprop 14 ........................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [197] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [199] getglobal 30 ............................ <ElementMgr>
  [201] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [203] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [206] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [208] objcall 5 ............................... ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [210] getglobal 30 ............................ <ElementMgr>
  [212] pushcons 54 ............................. <"nav_private_modify.window">
  [214] getlocal 0 .............................. <myRect>
  [216] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_modify.window", myRect>
  [218] objcall 239 ............................. ElementMgr.newwindow("nav_private_modify.window", myRect)
  [220] getparam 0 .............................. <me>
  [222] pushcons 52 ............................. <"ALERT_ST_NAME_LANG">
  [224] pusharglistnoret 2 ...................... <me, "ALERT_ST_NAME_LANG">
  [226] objcall 245 ............................. me.alert("ALERT_ST_NAME_LANG")
  [228] jmp [347]
  [231] peek 0
  [233] pushint8 8 .............................. <8>
  [235] eq
  [236] jmpifz [282] ............................ (case) 8:
  [239] getglobal 30 ............................ <ElementMgr>
  [241] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [243] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [246] getobjprop 14 ........................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [248] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [250] getglobal 30 ............................ <ElementMgr>
  [252] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [254] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [257] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [259] objcall 5 ............................... ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [261] getglobal 30 ............................ <ElementMgr>
  [263] pushcons 54 ............................. <"nav_private_modify.window">
  [265] getlocal 0 .............................. <myRect>
  [267] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_modify.window", myRect>
  [269] objcall 239 ............................. ElementMgr.newwindow("nav_private_modify.window", myRect)
  [271] getparam 0 .............................. <me>
  [273] pushcons 53 ............................. <"ALERT_ST_DESC_LANG">
  [275] pusharglistnoret 2 ...................... <me, "ALERT_ST_DESC_LANG">
  [277] objcall 245 ............................. me.alert("ALERT_ST_DESC_LANG")
  [279] jmp [347]
  [282] peek 0
  [284] pushint8 9 .............................. <9>
  [286] eq
  [287] jmpifz [347] ............................ (case) 9:
  [290] getglobal 30 ............................ <ElementMgr>
  [292] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [294] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [297] getobjprop 14 ........................... <ElementMgr.pOpenWindows.nav_loadnewroom.prect>
  [299] setlocal 0 .............................. myRect = ElementMgr.pOpenWindows.nav_loadnewroom.prect
  [301] getglobal 30 ............................ <ElementMgr>
  [303] getchainedprop 31 ....................... <ElementMgr.pOpenWindows>
  [305] getchainedprop 379 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [308] pusharglistnoret 1 ...................... <ElementMgr.pOpenWindows.nav_loadnewroom>
  [310] objcall 5 ............................... ElementMgr.pOpenWindows.nav_loadnewroom.closeWindow()
  [312] getglobal 30 ............................ <ElementMgr>
  [314] pushcons 54 ............................. <"nav_private_modify.window">
  [316] getlocal 0 .............................. <myRect>
  [318] pusharglistnoret 3 ...................... <ElementMgr, "nav_private_modify.window", myRect>
  [320] objcall 239 ............................. ElementMgr.newwindow("nav_private_modify.window", myRect)
  [322] getglobal 79 ............................ <oDenizenManager>
  [324] pusharglist 1 ........................... <oDenizenManager>
  [326] objcall 80 .............................. <oDenizenManager.getScreenName()>
  [328] setlocal 1 .............................. myscreenname = oDenizenManager.getScreenName()
  [330] getglobal 207 ........................... <oStudioManager>
  [332] getlocal 1 .............................. <myscreenname>
  [334] pusharglistnoret 2 ...................... <oStudioManager, myscreenname>
  [336] objcall 380 ............................. oStudioManager.getByOwnerName(myscreenname)
  [339] getparam 0 .............................. <me>
  [341] pushcons 48 ............................. <"ALERT_OVER_LIMIT">
  [343] pusharglistnoret 2 ...................... <me, "ALERT_OVER_LIMIT">
  [345] objcall 245 ............................. me.alert("ALERT_OVER_LIMIT")
  [347] pop 1 ................................... end case
  [349] ret
end

on loginUser_Result me, iError, iState, iStatus, bNewUser
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 80 ............................. <"loginUser_Result()">
  [  4] pushcons 81 ............................. <"iError:">
  [  6] joinpadstr .............................. <"loginUser_Result()" && "iError:">
  [  7] getparam 1 .............................. <iError>
  [  9] joinpadstr .............................. <"loginUser_Result()" && "iError:" && iError>
  [ 10] pushcons 82 ............................. <"iState:">
  [ 12] joinpadstr .............................. <"loginUser_Result()" && "iError:" && iError && "iState:">
  [ 13] getparam 2 .............................. <iState>
  [ 15] joinpadstr .............................. <"loginUser_Result()" && "iError:" && iError && "iState:" && iState>
  [ 16] pushcons 83 ............................. <"iStatus:">
  [ 18] joinpadstr .............................. <"loginUser_Result()" && "iError:" && iError && "iState:" && iState && "iStatus:">
  [ 19] getparam 3 .............................. <iStatus>
  [ 21] joinpadstr .............................. <"loginUser_Result()" && "iError:" && iError && "iState:" && iState && "iStatus:" && iStatus>
  [ 22] pushcons 84 ............................. <"bNewUser:">
  [ 24] joinpadstr .............................. <"loginUser_Result()" && "iError:" && iError && "iState:" && iState && "iStatus:" && iStatus && "bNewUser:">
  [ 25] getparam 4 .............................. <bNewUser>
  [ 27] joinpadstr .............................. <"loginUser_Result()" && "iError:" && iError && "iState:" && iState && "iStatus:" && iStatus && "bNewUser:" && bNewUser>
  [ 28] pusharglistnoret 2 ...................... <me, "loginUser_Result()" && "iError:" && iError && "iState:" && iState && "iStatus:" && iStatus && "bNewUser:" && bNewUser>
  [ 30] objcall 1 ............................... me.debug("loginUser_Result()" && "iError:" && iError && "iState:" && iState && "iStatus:" && iStatus && "bNewUser:" && bNewUser)
  [ 32] pushint8 2 .............................. <2>
  [ 34] setlocal 0
  [ 36] getlocal 0
  [ 38] pushint8 6 .............................. <6>
  [ 40] lteq
  [ 41] jmpifz [ 82] ............................ repeat with n = 2 to 6
  [ 44] getlocal 0 .............................. <n>
  [ 46] pusharglist 1 ........................... <n>
  [ 48] extcall 36 .............................. <sprite(n)>
  [ 50] pusharglist 0 ........................... <[]>
  [ 52] pushlist ................................ <[]>
  [ 53] setobjprop 40 ........................... sprite(n).scriptInstanceList = []
  [ 55] getlocal 0 .............................. <n>
  [ 57] pusharglist 1 ........................... <n>
  [ 59] extcall 36 .............................. <sprite(n)>
  [ 61] pushint8 1 .............................. <1>
  [ 63] inv ..................................... <-1>
  [ 64] setobjprop 61 ........................... sprite(n).memberNum = -1
  [ 66] getlocal 0 .............................. <n>
  [ 68] pushzero ................................ <0>
  [ 69] pusharglistnoret 2 ...................... <n, 0>
  [ 71] extcall 35 .............................. puppetSprite(n, 0)
  [ 73] pushint8 1
  [ 75] getlocal 0
  [ 77] add
  [ 78] setlocal 0
  [ 80] endrepeat [ 36]
  [ 82] getparam 1 .............................. <iError>
  [ 84] peek 0 .................................. case iError of
  [ 86] pushzero ................................ <0>
  [ 87] eq
  [ 88] jmpifz [182] ............................ (case) 0:
  [ 91] getparam 3 .............................. <iStatus>
  [ 93] peek 0 .................................. case iStatus of
  [ 95] pushint8 1 .............................. <1>
  [ 97] eq
  [ 98] jmpifz [161] ............................ (case) 1:
  [101] getparam 2 .............................. <iState>
  [103] peek 0 .................................. case iState of
  [105] pushint8 1 .............................. <1>
  [107] eq
  [108] jmpifz [122] ............................ (case) 1:
  [111] getparam 0 .............................. <me>
  [113] pushcons 85 ............................. <"ALERT_STATE_CLOSED">
  [115] pusharglistnoret 2 ...................... <me, "ALERT_STATE_CLOSED">
  [117] objcall 245 ............................. me.alert("ALERT_STATE_CLOSED")
  [119] jmp [156]
  [122] peek 0
  [124] pushint8 2 .............................. <2>
  [126] eq
  [127] jmpifz [140] ............................ (case) 2:
  [130] pushcons 86 ............................. <"LoadCasts2">
  [132] pusharglistnoret 1 ...................... <"LoadCasts2">
  [134] extcall 411 ............................. go("LoadCasts2")
  [137] jmp [156]
  [140] peek 0
  [142] pushint8 3 .............................. <3>
  [144] eq
  [145] jmpifz [156] ............................ (case) 3:
  [148] getparam 0 .............................. <me>
  [150] pushcons 87 ............................. <"ALERT_STATE_FULL">
  [152] pusharglistnoret 2 ...................... <me, "ALERT_STATE_FULL">
  [154] objcall 245 ............................. me.alert("ALERT_STATE_FULL")
  [156] pop 1 ................................... end case
  [158] jmp [177]
  [161] peek 0
  [163] pushint8 2 .............................. <2>
  [165] eq
  [166] jmpifz [177] ............................ (case) 2:
  [169] getparam 0 .............................. <me>
  [171] pushcons 88 ............................. <"ALERT_BANNED">
  [173] pusharglistnoret 2 ...................... <me, "ALERT_BANNED">
  [175] objcall 245 ............................. me.alert("ALERT_BANNED")
  [177] pop 1 ................................... end case
  [179] jmp [217]
  [182] peek 0
  [184] pushint8 1 .............................. <1>
  [186] eq
  [187] jmpifz [201] ............................ (case) 1:
  [190] getparam 0 .............................. <me>
  [192] pushcons 47 ............................. <"ALERT_GENERIC">
  [194] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [196] objcall 245 ............................. me.alert("ALERT_GENERIC")
  [198] jmp [217]
  [201] peek 0
  [203] pushint8 2 .............................. <2>
  [205] eq
  [206] jmpifz [217] ............................ (case) 2:
  [209] getparam 0 .............................. <me>
  [211] pushcons 89 ............................. <"ALERT_INVALID_SCREEN_NAME">
  [213] pusharglistnoret 2 ...................... <me, "ALERT_INVALID_SCREEN_NAME">
  [215] objcall 245 ............................. me.alert("ALERT_INVALID_SCREEN_NAME")
  [217] pop 1 ................................... end case
  [219] ret
end

on loginModerator_Result me, iError
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 90 ............................. <"loginModerator_Result() ">
  [  4] getparam 1 .............................. <iError>
  [  6] joinstr ................................. <"loginModerator_Result() " & iError>
  [  7] pushint8 1 .............................. <1>
  [  9] pusharglistnoret 3 ...................... <me, "loginModerator_Result() " & iError, 1>
  [ 11] objcall 1 ............................... me.debug("loginModerator_Result() " & iError, 1)
  [ 13] ret
end

on connectionFailed me, iReasonId
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 91 ............................. <"connectionfailed():iReasonID">
  [  4] getparam 1 .............................. <iReasonId>
  [  6] joinpadstr .............................. <"connectionfailed():iReasonID" && iReasonId>
  [  7] pushint8 1 .............................. <1>
  [  9] pusharglistnoret 3 ...................... <me, "connectionfailed():iReasonID" && iReasonId, 1>
  [ 11] objcall 1 ............................... me.debug("connectionfailed():iReasonID" && iReasonId, 1)
  [ 13] getparam 1 .............................. <iReasonId>
  [ 15] peek 0 .................................. case iReasonId of
  [ 17] pushint8 5 .............................. <5>
  [ 19] eq
  [ 20] jmpifz [ 34] ............................ (case) 5:
  [ 23] getparam 0 .............................. <me>
  [ 25] pushcons 92 ............................. <"ALERT_NO_CONNECTION">
  [ 27] pusharglistnoret 2 ...................... <me, "ALERT_NO_CONNECTION">
  [ 29] objcall 245 ............................. me.alert("ALERT_NO_CONNECTION")
  [ 31] jmp [ 42] ............................... (case) otherwise:
  [ 34] getparam 0 .............................. <me>
  [ 36] pushcons 47 ............................. <"ALERT_GENERIC">
  [ 38] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [ 40] objcall 245 ............................. me.alert("ALERT_GENERIC")
  [ 42] pop 1 ................................... end case
  [ 44] ret
end

on loginFailed me, iReasonId
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 93 ............................. <"loginFailed():iReasonID">
  [  4] getparam 1 .............................. <iReasonId>
  [  6] joinpadstr .............................. <"loginFailed():iReasonID" && iReasonId>
  [  7] pushint8 1 .............................. <1>
  [  9] pusharglistnoret 3 ...................... <me, "loginFailed():iReasonID" && iReasonId, 1>
  [ 11] objcall 1 ............................... me.debug("loginFailed():iReasonID" && iReasonId, 1)
  [ 13] getparam 1 .............................. <iReasonId>
  [ 15] peek 0 .................................. case iReasonId of
  [ 17] pushint16 8956 .......................... <8956>
  [ 20] eq
  [ 21] jmpifz [ 35] ............................ (case) 8956:
  [ 24] getparam 0 .............................. <me>
  [ 26] pushcons 94 ............................. <"ALERT_USER_NOT_FOUND">
  [ 28] pusharglistnoret 2 ...................... <me, "ALERT_USER_NOT_FOUND">
  [ 30] objcall 245 ............................. me.alert("ALERT_USER_NOT_FOUND")
  [ 32] jmp [ 83]
  [ 35] peek 0
  [ 37] pushint16 8957 .......................... <8957>
  [ 40] eq
  [ 41] jmpifz [ 55] ............................ (case) 8957:
  [ 44] getparam 0 .............................. <me>
  [ 46] pushcons 95 ............................. <"ALERT_DUPLICATE_LOGIN">
  [ 48] pusharglistnoret 2 ...................... <me, "ALERT_DUPLICATE_LOGIN">
  [ 50] objcall 245 ............................. me.alert("ALERT_DUPLICATE_LOGIN")
  [ 52] jmp [ 83]
  [ 55] peek 0
  [ 57] pushint16 8950 .......................... <8950>
  [ 60] eq
  [ 61] jmpifz [ 75] ............................ (case) 8950:
  [ 64] getparam 0 .............................. <me>
  [ 66] pushcons 87 ............................. <"ALERT_STATE_FULL">
  [ 68] pusharglistnoret 2 ...................... <me, "ALERT_STATE_FULL">
  [ 70] objcall 245 ............................. me.alert("ALERT_STATE_FULL")
  [ 72] jmp [ 83] ............................... (case) otherwise:
  [ 75] getparam 0 .............................. <me>
  [ 77] pushcons 47 ............................. <"ALERT_GENERIC">
  [ 79] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [ 81] objcall 245 ............................. me.alert("ALERT_GENERIC")
  [ 83] pop 1 ................................... end case
  [ 85] ret
end

on lostConnection me
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 96 ............................. <"ALERT_DROPPED_CONNECTION">
  [  4] pusharglistnoret 2 ...................... <me, "ALERT_DROPPED_CONNECTION">
  [  6] objcall 245 ............................. me.alert("ALERT_DROPPED_CONNECTION")
  [  8] ret
end

on roomEnterFailed me, sRoomId, iReasonId
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 97 ............................. <"roomEnterFailed():sRoomID">
  [  4] getparam 1 .............................. <sRoomId>
  [  6] joinpadstr .............................. <"roomEnterFailed():sRoomID" && sRoomId>
  [  7] pushcons 98 ............................. <"iReasonID:">
  [  9] joinpadstr .............................. <"roomEnterFailed():sRoomID" && sRoomId && "iReasonID:">
  [ 10] getparam 2 .............................. <iReasonId>
  [ 12] joinpadstr .............................. <"roomEnterFailed():sRoomID" && sRoomId && "iReasonID:" && iReasonId>
  [ 13] pushint8 1 .............................. <1>
  [ 15] pusharglistnoret 3 ...................... <me, "roomEnterFailed():sRoomID" && sRoomId && "iReasonID:" && iReasonId, 1>
  [ 17] objcall 1 ............................... me.debug("roomEnterFailed():sRoomID" && sRoomId && "iReasonID:" && iReasonId, 1)
  [ 19] getparam 2 .............................. <iReasonId>
  [ 21] peek 0 .................................. case iReasonId of
  [ 23] pushint16 9000 .......................... <9000>
  [ 26] eq
  [ 27] jmpifz [ 41] ............................ (case) 9000:
  [ 30] getparam 0 .............................. <me>
  [ 32] pushcons 99 ............................. <"ALERT_ROOM_NOT_EXIST">
  [ 34] pusharglistnoret 2 ...................... <me, "ALERT_ROOM_NOT_EXIST">
  [ 36] objcall 245 ............................. me.alert("ALERT_ROOM_NOT_EXIST")
  [ 38] jmp [ 74]
  [ 41] peek 0
  [ 43] pushint16 9008 .......................... <9008>
  [ 46] eq
  [ 47] jmpifz [ 66] ............................ (case) 9008:
  [ 50] pusharglistnoret 0 ...................... <>
  [ 52] extcall 416 ............................. gotoEntry()
  [ 55] getparam 0 .............................. <me>
  [ 57] pushcons 100 ............................ <"ALERT_FULL">
  [ 59] pusharglistnoret 2 ...................... <me, "ALERT_FULL">
  [ 61] objcall 245 ............................. me.alert("ALERT_FULL")
  [ 63] jmp [ 74] ............................... (case) otherwise:
  [ 66] getparam 0 .............................. <me>
  [ 68] pushcons 47 ............................. <"ALERT_GENERIC">
  [ 70] pusharglistnoret 2 ...................... <me, "ALERT_GENERIC">
  [ 72] objcall 245 ............................. me.alert("ALERT_GENERIC")
  [ 74] pop 1 ................................... end case
  [ 76] ret
end

on bringAlertToFront me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 31 ........................... <me.pOpenWindows>
  [  4] pusharglist 1 ........................... <me.pOpenWindows>
  [  6] extcall 29 .............................. <count(me.pOpenWindows)>
  [  8] setlocal 0
  [ 10] getlocal 0
  [ 12] pushint8 1 .............................. <1>
  [ 14] gteq
  [ 15] jmpifz [ 59] ............................ repeat with n = count(me.pOpenWindows) down to 1
  [ 18] getparam 0 .............................. <me>
  [ 20] pushsymb 31 ............................. <#pOpenWindows>
  [ 22] getlocal 0 .............................. <n>
  [ 24] pusharglist 3 ........................... <me, #pOpenWindows, n>
  [ 26] objcall 149 ............................. <me.pOpenWindows[n]>
  [ 28] setlocal 1 .............................. _oWindow = me.pOpenWindows[n]
  [ 30] getlocal 1 .............................. <_oWindow>
  [ 32] getobjprop 13 ........................... <_oWindow.pname>
  [ 34] setlocal 2 .............................. _sWindowName = _oWindow.pname
  [ 36] getlocal 2 .............................. <_sWindowName>
  [ 38] pushcons 101 ............................ <"sanfo_general_alert">
  [ 40] contains0str ............................ <_sWindowName starts "sanfo_general_alert">
  [ 41] jmpifz [ 50] ............................ if _sWindowName starts "sanfo_general_alert" then
  [ 44] getlocal 1 .............................. <_oWindow>
  [ 46] pusharglistnoret 1 ...................... <_oWindow>
  [ 48] objcall 3 ............................... _oWindow.bringtofront()
  [ 50] pushint8 -1
  [ 52] getlocal 0
  [ 54] add
  [ 55] setlocal 0
  [ 57] endrepeat [ 10]
  [ 59] ret
end

on closeAllWindows me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 31 ........................... <me.pOpenWindows>
  [  4] pusharglist 1 ........................... <me.pOpenWindows>
  [  6] extcall 29 .............................. <count(me.pOpenWindows)>
  [  8] setlocal 0
  [ 10] getlocal 0
  [ 12] pushint8 1 .............................. <1>
  [ 14] gteq
  [ 15] jmpifz [ 62] ............................ repeat with n = count(me.pOpenWindows) down to 1
  [ 18] getparam 0 .............................. <me>
  [ 20] pushsymb 31 ............................. <#pOpenWindows>
  [ 22] getlocal 0 .............................. <n>
  [ 24] pusharglist 3 ........................... <me, #pOpenWindows, n>
  [ 26] objcall 149 ............................. <me.pOpenWindows[n]>
  [ 28] setlocal 1 .............................. _oWindow = me.pOpenWindows[n]
  [ 30] getlocal 1 .............................. <_oWindow>
  [ 32] getobjprop 13 ........................... <_oWindow.pname>
  [ 34] setlocal 2 .............................. _sWindowName = _oWindow.pname
  [ 36] getlocal 2 .............................. <_sWindowName>
  [ 38] pushcons 101 ............................ <"sanfo_general_alert">
  [ 40] contains0str ............................ <_sWindowName starts "sanfo_general_alert">
  [ 41] jmpifz [ 47] ............................ if _sWindowName starts "sanfo_general_alert" then
  [ 44] jmp [ 53] ............................... next repeat
  [ 47] getlocal 1 .............................. <_oWindow>
  [ 49] pusharglistnoret 1 ...................... <_oWindow>
  [ 51] objcall 5 ............................... _oWindow.closeWindow()
  [ 53] pushint8 -1
  [ 55] getlocal 0
  [ 57] add
  [ 58] setlocal 0
  [ 60] endrepeat [ 10]
  [ 62] getglobal 419 ........................... <ochat>
  [ 65] pusharglist 1 ........................... <ochat>
  [ 67] extcall 12 .............................. <voidp(ochat)>
  [ 69] not ..................................... <not voidp(ochat)>
  [ 70] jmpifz [ 81] ............................ if not voidp(ochat) then
  [ 73] getglobal 419 ........................... <ochat>
  [ 76] pusharglistnoret 1 ...................... <ochat>
  [ 78] objcall 420 ............................. ochat.hideChat()
  [ 81] ret
end

on getDenizenBalance_Result me, iError, iBalance
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 90] ............................ (case) 0:
  [  9] getglobal 91 ............................ <TextMgr>
  [ 11] pushcons 102 ............................ <"BALANCE_DISPLAY">
  [ 13] pusharglist 2 ........................... <TextMgr, "BALANCE_DISPLAY">
  [ 15] objcall 93 .............................. <TextMgr.GetRefText("BALANCE_DISPLAY")>
  [ 17] setlocal 0 .............................. myString = TextMgr.GetRefText("BALANCE_DISPLAY")
  [ 19] pushcons 103 ............................ <"{balance}">
  [ 21] setlocal 1 .............................. myword = "{balance}"
  [ 23] getlocal 1 .............................. <myword>
  [ 25] getlocal 0 .............................. <myString>
  [ 27] pusharglist 2 ........................... <myword, myString>
  [ 29] extcall 164 ............................. <offset(myword, myString)>
  [ 31] setlocal 2 .............................. mypos = offset(myword, myString)
  [ 33] getlocal 0 .............................. <myString>
  [ 35] pushsymb 163 ............................ <#char>
  [ 37] pushint8 1 .............................. <1>
  [ 39] getlocal 2 .............................. <mypos>
  [ 41] pushint8 1 .............................. <1>
  [ 43] sub ..................................... <mypos - 1>
  [ 44] pusharglist 4 ........................... <myString, #char, 1, mypos - 1>
  [ 46] objcall 149 ............................. <myString.char[1..mypos - 1]>
  [ 48] getparam 2 .............................. <iBalance>
  [ 50] joinstr ................................. <myString.char[1..mypos - 1] & iBalance>
  [ 51] getlocal 0 .............................. <myString>
  [ 53] pushsymb 163 ............................ <#char>
  [ 55] getlocal 2 .............................. <mypos>
  [ 57] getlocal 1 .............................. <myword>
  [ 59] pusharglist 1 ........................... <myword>
  [ 61] extcall 96 .............................. <length(myword)>
  [ 63] add ..................................... <mypos + length(myword)>
  [ 64] getlocal 0 .............................. <myString>
  [ 66] pusharglist 1 ........................... <myString>
  [ 68] extcall 96 .............................. <length(myString)>
  [ 70] pusharglist 4 ........................... <myString, #char, mypos + length(myword), length(myString)>
  [ 72] objcall 149 ............................. <myString.char[mypos + length(myword)..length(myString)]>
  [ 74] joinstr ................................. <myString.char[1..mypos - 1] & iBalance & myString.char[mypos + length(myword)..length(myString)]>
  [ 75] setlocal 0 .............................. myString = myString.char[1..mypos - 1] & iBalance & myString.char[mypos + length(myword)..length(myString)]
  [ 77] pushcons 104 ............................ <"balance_decibels">
  [ 79] pusharglist 1 ........................... <"balance_decibels">
  [ 81] extcall 34 .............................. <member("balance_decibels")>
  [ 83] getlocal 0 .............................. <myString>
  [ 85] setobjprop 78 ........................... member("balance_decibels").text = myString
  [ 87] jmp [118]
  [ 90] peek 0
  [ 92] pushint8 1 .............................. <1>
  [ 94] eq
  [ 95] jmpifz [118] ............................ (case) 1:
  [ 98] getglobal 91 ............................ <TextMgr>
  [100] pushcons 105 ............................ <"BALANCE_DISPLAY_FAILED">
  [102] pusharglist 2 ........................... <TextMgr, "BALANCE_DISPLAY_FAILED">
  [104] objcall 93 .............................. <TextMgr.GetRefText("BALANCE_DISPLAY_FAILED")>
  [106] setlocal 0 .............................. myString = TextMgr.GetRefText("BALANCE_DISPLAY_FAILED")
  [108] pushcons 104 ............................ <"balance_decibels">
  [110] pusharglist 1 ........................... <"balance_decibels">
  [112] extcall 34 .............................. <member("balance_decibels")>
  [114] getlocal 0 .............................. <myString>
  [116] setobjprop 78 ........................... member("balance_decibels").text = myString
  [118] pop 1 ................................... end case
  [120] ret
end

on getPossessionsInBackpack_Result me, iError, aItems, iCurrentPage, iTotalPages, iTotalItems, iCds
  [  0] getglobal 91 ............................ <TextMgr>
  [  2] pushcons 106 ............................ <"USER_ITEMS_CDS">
  [  4] pusharglist 2 ........................... <TextMgr, "USER_ITEMS_CDS">
  [  6] objcall 93 .............................. <TextMgr.GetRefText("USER_ITEMS_CDS")>
  [  8] setlocal 0 .............................. cdsentence = TextMgr.GetRefText("USER_ITEMS_CDS")
  [ 10] pushcons 107 ............................ <"{CDs}">
  [ 12] getlocal 0 .............................. <cdsentence>
  [ 14] pusharglist 2 ........................... <"{CDs}", cdsentence>
  [ 16] extcall 164 ............................. <offset("{CDs}", cdsentence)>
  [ 18] setlocal 1 .............................. charpos = offset("{CDs}", cdsentence)
  [ 20] getlocal 1 .............................. <charpos>
  [ 22] getlocal 1 .............................. <charpos>
  [ 24] pushint8 4 .............................. <4>
  [ 26] add ..................................... <charpos + 4>
  [ 27] pushzero ................................ <0>
  [ 28] pushzero ................................ <0>
  [ 29] pushzero ................................ <0>
  [ 30] pushzero ................................ <0>
  [ 31] pushzero ................................ <0>
  [ 32] pushzero ................................ <0>
  [ 33] pushzero ................................ <0>
  [ 34] deletechunk 5 ........................... delete char charpos to charpos + 4 of cdsentence
  [ 36] getlocal 1 .............................. <charpos>
  [ 38] pushint8 1 .............................. <1>
  [ 40] eq ...................................... <charpos = 1>
  [ 41] jmpifz [ 58] ............................ if charpos = 1 then / else
  [ 44] getparam 6 .............................. <iCds>
  [ 46] pusharglist 1 ........................... <iCds>
  [ 48] extcall 161 ............................. <string(iCds)>
  [ 50] getlocal 0 .............................. <cdsentence>
  [ 52] joinstr ................................. <string(iCds) & cdsentence>
  [ 53] setlocal 0 .............................. cdsentence = string(iCds) & cdsentence
  [ 55] jmp [ 79]
  [ 58] getparam 6 .............................. <iCds>
  [ 60] pusharglist 1 ........................... <iCds>
  [ 62] extcall 161 ............................. <string(iCds)>
  [ 64] getlocal 1 .............................. <charpos>
  [ 66] pushint8 1 .............................. <1>
  [ 68] sub ..................................... <charpos - 1>
  [ 69] pushzero ................................ <0>
  [ 70] pushzero ................................ <0>
  [ 71] pushzero ................................ <0>
  [ 72] pushzero ................................ <0>
  [ 73] pushzero ................................ <0>
  [ 74] pushzero ................................ <0>
  [ 75] pushzero ................................ <0>
  [ 76] pushzero ................................ <0>
  [ 77] putchunk 37 ............................. put string(iCds) after char charpos - 1 of cdsentence
  [ 79] pushcons 108 ............................ <"cc.pack.empty.cds">
  [ 81] pusharglist 1 ........................... <"cc.pack.empty.cds">
  [ 83] extcall 34 .............................. <member("cc.pack.empty.cds")>
  [ 85] getlocal 0 .............................. <cdsentence>
  [ 87] setobjprop 78 ........................... member("cc.pack.empty.cds").text = cdsentence
  [ 89] pushint8 1 .............................. <1>
  [ 91] setlocal 2
  [ 93] getlocal 2
  [ 95] getprop 31 .............................. <pOpenWindows>
  [ 97] pusharglist 1 ........................... <pOpenWindows>
  [ 99] extcall 29 .............................. <count(pOpenWindows)>
  [101] lteq
  [102] jmpifz [281] ............................ repeat with n = 1 to count(pOpenWindows)
  [105] getprop 31 .............................. <pOpenWindows>
  [107] getlocal 2 .............................. <n>
  [109] pusharglist 2 ........................... <pOpenWindows, n>
  [111] extcall 32 .............................. <getPropAt(pOpenWindows, n)>
  [113] pushcons 109 ............................ <"cc_backpack">
  [115] eq ...................................... <getPropAt(pOpenWindows, n) = "cc_backpack">
  [116] jmpifz [272] ............................ if getPropAt(pOpenWindows, n) = "cc_backpack" then
  [119] getprop 31 .............................. <pOpenWindows>
  [121] getlocal 2 .............................. <n>
  [123] pusharglist 2 ........................... <pOpenWindows, n>
  [125] objcall 44 .............................. <pOpenWindows[n]>
  [127] pushsymb 11 ............................. <#pSpritelist>
  [129] pushint8 2 .............................. <2>
  [131] pusharglist 3 ........................... <pOpenWindows[n], #pSpritelist, 2>
  [133] objcall 149 ............................. <pOpenWindows[n].pSpritelist[2]>
  [135] pusharglist 1 ........................... <pOpenWindows[n].pSpritelist[2]>
  [137] extcall 36 .............................. <sprite(pOpenWindows[n].pSpritelist[2])>
  [139] getparam 2 .............................. <aItems>
  [141] setobjprop 423 .......................... sprite(pOpenWindows[n].pSpritelist[2]).pItems = aItems
  [144] getprop 31 .............................. <pOpenWindows>
  [146] getlocal 2 .............................. <n>
  [148] pusharglist 2 ........................... <pOpenWindows, n>
  [150] objcall 44 .............................. <pOpenWindows[n]>
  [152] pushsymb 11 ............................. <#pSpritelist>
  [154] pushint8 2 .............................. <2>
  [156] pusharglist 3 ........................... <pOpenWindows[n], #pSpritelist, 2>
  [158] objcall 149 ............................. <pOpenWindows[n].pSpritelist[2]>
  [160] pusharglist 1 ........................... <pOpenWindows[n].pSpritelist[2]>
  [162] extcall 36 .............................. <sprite(pOpenWindows[n].pSpritelist[2])>
  [164] getparam 3 .............................. <iCurrentPage>
  [166] setobjprop 424 .......................... sprite(pOpenWindows[n].pSpritelist[2]).pcurrentpage = iCurrentPage
  [169] getprop 31 .............................. <pOpenWindows>
  [171] getlocal 2 .............................. <n>
  [173] pusharglist 2 ........................... <pOpenWindows, n>
  [175] objcall 44 .............................. <pOpenWindows[n]>
  [177] pushsymb 11 ............................. <#pSpritelist>
  [179] pushint8 2 .............................. <2>
  [181] pusharglist 3 ........................... <pOpenWindows[n], #pSpritelist, 2>
  [183] objcall 149 ............................. <pOpenWindows[n].pSpritelist[2]>
  [185] pusharglist 1 ........................... <pOpenWindows[n].pSpritelist[2]>
  [187] extcall 36 .............................. <sprite(pOpenWindows[n].pSpritelist[2])>
  [189] getparam 3 .............................. <iCurrentPage>
  [191] setobjprop 425 .......................... sprite(pOpenWindows[n].pSpritelist[2]).pIndex = iCurrentPage
  [194] getprop 31 .............................. <pOpenWindows>
  [196] getlocal 2 .............................. <n>
  [198] pusharglist 2 ........................... <pOpenWindows, n>
  [200] objcall 44 .............................. <pOpenWindows[n]>
  [202] pushsymb 11 ............................. <#pSpritelist>
  [204] pushint8 2 .............................. <2>
  [206] pusharglist 3 ........................... <pOpenWindows[n], #pSpritelist, 2>
  [208] objcall 149 ............................. <pOpenWindows[n].pSpritelist[2]>
  [210] pusharglist 1 ........................... <pOpenWindows[n].pSpritelist[2]>
  [212] extcall 36 .............................. <sprite(pOpenWindows[n].pSpritelist[2])>
  [214] getparam 4 .............................. <iTotalPages>
  [216] setobjprop 426 .......................... sprite(pOpenWindows[n].pSpritelist[2]).pTotalPages = iTotalPages
  [219] getprop 31 .............................. <pOpenWindows>
  [221] getlocal 2 .............................. <n>
  [223] pusharglist 2 ........................... <pOpenWindows, n>
  [225] objcall 44 .............................. <pOpenWindows[n]>
  [227] pushsymb 11 ............................. <#pSpritelist>
  [229] pushint8 2 .............................. <2>
  [231] pusharglist 3 ........................... <pOpenWindows[n], #pSpritelist, 2>
  [233] objcall 149 ............................. <pOpenWindows[n].pSpritelist[2]>
  [235] pusharglist 1 ........................... <pOpenWindows[n].pSpritelist[2]>
  [237] extcall 36 .............................. <sprite(pOpenWindows[n].pSpritelist[2])>
  [239] getparam 5 .............................. <iTotalItems>
  [241] setobjprop 427 .......................... sprite(pOpenWindows[n].pSpritelist[2]).pTotalItems = iTotalItems
  [244] getprop 31 .............................. <pOpenWindows>
  [246] getlocal 2 .............................. <n>
  [248] pusharglist 2 ........................... <pOpenWindows, n>
  [250] objcall 44 .............................. <pOpenWindows[n]>
  [252] pushsymb 11 ............................. <#pSpritelist>
  [254] pushint8 2 .............................. <2>
  [256] pusharglist 3 ........................... <pOpenWindows[n], #pSpritelist, 2>
  [258] objcall 149 ............................. <pOpenWindows[n].pSpritelist[2]>
  [260] pusharglist 1 ........................... <pOpenWindows[n].pSpritelist[2]>
  [262] extcall 36 .............................. <sprite(pOpenWindows[n].pSpritelist[2])>
  [264] pusharglistnoret 1 ...................... <sprite(pOpenWindows[n].pSpritelist[2])>
  [266] objcall 428 ............................. sprite(pOpenWindows[n].pSpritelist[2]).updatedisplay()
  [269] jmp [281] ............................... exit repeat
  [272] pushint8 1
  [274] getlocal 2
  [276] add
  [277] setlocal 2
  [279] endrepeat [ 93]
  [281] ret
end

on cataloguepages me
  [  0] getglobal 436 ........................... <sCatalogText>
  [  3] setlocal 0 .............................. mytext = sCatalogText
  [  5] pushcons 110 ............................ <"=">
  [  7] setmovieprop 157 ........................ the itemDelimiter = "="
  [  9] pusharglist 0 ........................... <[]>
  [ 11] pushlist ................................ <[]>
  [ 12] setlocal 1 .............................. catpages = []
  [ 14] pushint8 1 .............................. <1>
  [ 16] setlocal 2
  [ 18] getlocal 2
  [ 20] getlocal 0 .............................. <mytext>
  [ 22] pushint8 4 .............................. <4>
  [ 24] get 1 ................................... <the number of lines in mytext>
  [ 26] lteq
  [ 27] jmpifz [ 92] ............................ repeat with n = 1 to the number of lines in mytext
  [ 30] getlocal 0 .............................. <mytext>
  [ 32] pushsymb 97 ............................. <#line>
  [ 34] getlocal 2 .............................. <n>
  [ 36] pusharglist 3 ........................... <mytext, #line, n>
  [ 38] objcall 98 .............................. <mytext.line[n]>
  [ 40] pushsymb 158 ............................ <#item>
  [ 42] pushint8 1 .............................. <1>
  [ 44] pusharglist 3 ........................... <mytext.line[n], #item, 1>
  [ 46] objcall 149 ............................. <mytext.line[n].item[1]>
  [ 48] pushcons 111 ............................ <"PAGE">
  [ 50] eq ...................................... <mytext.line[n].item[1] = "PAGE">
  [ 51] jmpifz [ 83] ............................ if mytext.line[n].item[1] = "PAGE" then
  [ 54] getlocal 1 .............................. <catpages>
  [ 56] getlocal 0 .............................. <mytext>
  [ 58] pushsymb 97 ............................. <#line>
  [ 60] getlocal 2 .............................. <n>
  [ 62] pusharglist 3 ........................... <mytext, #line, n>
  [ 64] objcall 98 .............................. <mytext.line[n]>
  [ 66] pushsymb 158 ............................ <#item>
  [ 68] pushint8 2 .............................. <2>
  [ 70] pusharglist 3 ........................... <mytext.line[n], #item, 2>
  [ 72] objcall 149 ............................. <mytext.line[n].item[2]>
  [ 74] pusharglist 1 ........................... <mytext.line[n].item[2]>
  [ 76] extcall 316 ............................. <value(mytext.line[n].item[2])>
  [ 79] pusharglistnoret 2 ...................... <catpages, value(mytext.line[n].item[2])>
  [ 81] extcall 42 .............................. append(catpages, value(mytext.line[n].item[2]))
  [ 83] pushint8 1
  [ 85] getlocal 2
  [ 87] add
  [ 88] setlocal 2
  [ 90] endrepeat [ 18]
  [ 92] getlocal 1 .............................. <catpages>
  [ 94] pusharglistnoret 1 ...................... <catpages>
  [ 96] extcall 23 .............................. return catpages
  [ 98] ret
end

on getcatalogueitems me, whatpageID
  [  0] getglobal 436 ........................... <sCatalogText>
  [  3] setlocal 0 .............................. mytext = sCatalogText
  [  5] pushcons 110 ............................ <"=">
  [  7] setmovieprop 157 ........................ the itemDelimiter = "="
  [  9] pusharglist 0 ........................... <[]>
  [ 11] pushlist ................................ <[]>
  [ 12] setlocal 1 .............................. catitems = []
  [ 14] pushint8 1 .............................. <1>
  [ 16] setlocal 2
  [ 18] getlocal 2
  [ 20] getlocal 0 .............................. <mytext>
  [ 22] pushint8 4 .............................. <4>
  [ 24] get 1 ................................... <the number of lines in mytext>
  [ 26] lteq
  [ 27] jmpifz [131] ............................ repeat with n = 1 to the number of lines in mytext
  [ 30] getlocal 0 .............................. <mytext>
  [ 32] pushsymb 97 ............................. <#line>
  [ 34] getlocal 2 .............................. <n>
  [ 36] pusharglist 3 ........................... <mytext, #line, n>
  [ 38] objcall 98 .............................. <mytext.line[n]>
  [ 40] pushsymb 158 ............................ <#item>
  [ 42] pushint8 1 .............................. <1>
  [ 44] pusharglist 3 ........................... <mytext.line[n], #item, 1>
  [ 46] objcall 149 ............................. <mytext.line[n].item[1]>
  [ 48] pushcons 112 ............................ <"ITEM">
  [ 50] eq ...................................... <mytext.line[n].item[1] = "ITEM">
  [ 51] jmpifz [122] ............................ if mytext.line[n].item[1] = "ITEM" then
  [ 54] getlocal 0 .............................. <mytext>
  [ 56] pushsymb 97 ............................. <#line>
  [ 58] getlocal 2 .............................. <n>
  [ 60] pusharglist 3 ........................... <mytext, #line, n>
  [ 62] objcall 98 .............................. <mytext.line[n]>
  [ 64] pushsymb 158 ............................ <#item>
  [ 66] pushint8 2 .............................. <2>
  [ 68] pusharglist 3 ........................... <mytext.line[n], #item, 2>
  [ 70] objcall 149 ............................. <mytext.line[n].item[2]>
  [ 72] pusharglist 1 ........................... <mytext.line[n].item[2]>
  [ 74] extcall 316 ............................. <value(mytext.line[n].item[2])>
  [ 77] setlocal 3 .............................. myitem = value(mytext.line[n].item[2])
  [ 79] getparam 1 .............................. <whatpageID>
  [ 81] pusharglist 1 ........................... <whatpageID>
  [ 83] extcall 12 .............................. <voidp(whatpageID)>
  [ 85] jmpifz [ 99] ............................ if voidp(whatpageID) then
  [ 88] getlocal 1 .............................. <catitems>
  [ 90] getlocal 3 .............................. <myitem>
  [ 92] pusharglistnoret 2 ...................... <catitems, myitem>
  [ 94] extcall 42 .............................. append(catitems, myitem)
  [ 96] jmp [122] ............................... next repeat
  [ 99] getlocal 3 .............................. <myitem>
  [101] pushsymb 439 ............................ <#catId>
  [104] pusharglist 2 ........................... <myitem, #catId>
  [106] objcall 44 .............................. <myitem[#catId]>
  [108] getparam 1 .............................. <whatpageID>
  [110] eq ...................................... <myitem[#catId] = whatpageID>
  [111] jmpifz [122] ............................ if myitem[#catId] = whatpageID then
  [114] getlocal 1 .............................. <catitems>
  [116] getlocal 3 .............................. <myitem>
  [118] pusharglistnoret 2 ...................... <catitems, myitem>
  [120] extcall 42 .............................. append(catitems, myitem)
  [122] pushint8 1
  [124] getlocal 2
  [126] add
  [127] setlocal 2
  [129] endrepeat [ 18]
  [131] getlocal 1 .............................. <catitems>
  [133] pusharglistnoret 1 ...................... <catitems>
  [135] extcall 23 .............................. return catitems
  [137] ret
end

on getProductList_Result me, iError, aProdList
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 60] ............................ (case) 0:
  [  9] getprop 31 .............................. <pOpenWindows>
  [ 11] pushsymb 442 ............................ <#catalogue_pagedynamic>
  [ 14] pusharglist 2 ........................... <pOpenWindows, #catalogue_pagedynamic>
  [ 16] extcall 312 ............................. <getaProp(pOpenWindows, #catalogue_pagedynamic)>
  [ 19] pusharglist 1 ........................... <getaProp(pOpenWindows, #catalogue_pagedynamic)>
  [ 21] extcall 12 .............................. <voidp(getaProp(pOpenWindows, #catalogue_pagedynamic))>
  [ 23] pushzero ................................ <0>
  [ 24] eq ...................................... <voidp(getaProp(pOpenWindows, #catalogue_pagedynamic)) = 0>
  [ 25] jmpifz [ 60] ............................ if voidp(getaProp(pOpenWindows, #catalogue_pagedynamic)) = 0 then
  [ 28] getparam 0 .............................. <me>
  [ 30] getchainedprop 31 ....................... <me.pOpenWindows>
  [ 32] getchainedprop 442 ...................... <me.pOpenWindows.catalogue_pagedynamic>
  [ 35] getchainedprop 10 ....................... <me.pOpenWindows.catalogue_pagedynamic.pScrollingLists>
  [ 37] getchainedprop 69 ....................... <me.pOpenWindows.catalogue_pagedynamic.pScrollingLists.itemslist>
  [ 39] getparam 2 .............................. <aProdList>
  [ 41] setobjprop 443 .......................... me.pOpenWindows.catalogue_pagedynamic.pScrollingLists.itemslist.pitemsData = aProdList
  [ 44] getparam 0 .............................. <me>
  [ 46] getchainedprop 31 ....................... <me.pOpenWindows>
  [ 48] getchainedprop 442 ...................... <me.pOpenWindows.catalogue_pagedynamic>
  [ 51] getchainedprop 10 ....................... <me.pOpenWindows.catalogue_pagedynamic.pScrollingLists>
  [ 53] getchainedprop 69 ....................... <me.pOpenWindows.catalogue_pagedynamic.pScrollingLists.itemslist>
  [ 55] pusharglistnoret 1 ...................... <me.pOpenWindows.catalogue_pagedynamic.pScrollingLists.itemslist>
  [ 57] objcall 319 ............................. me.pOpenWindows.catalogue_pagedynamic.pScrollingLists.itemslist.updatecontent()
  [ 60] pop 1
  [ 62] ret
end

on prePurchaseItem_Result me, iError, iBalance, iPrice, sProdID, aAttributes
  [  0] getparam 2 .............................. <iBalance>
  [  2] pusharglist 1 ........................... <iBalance>
  [  4] extcall 12 .............................. <voidp(iBalance)>
  [  6] not ..................................... <not voidp(iBalance)>
  [  7] getparam 3 .............................. <iPrice>
  [  9] pusharglist 1 ........................... <iPrice>
  [ 11] extcall 12 .............................. <voidp(iPrice)>
  [ 13] not ..................................... <not voidp(iPrice)>
  [ 14] and ..................................... <not voidp(iBalance) and not voidp(iPrice)>
  [ 15] jmpifz [ 56] ............................ if not voidp(iBalance) and not voidp(iPrice) then
  [ 18] getparam 2 .............................. <iBalance>
  [ 20] pusharglist 1 ........................... <iBalance>
  [ 22] extcall 445 ............................. <integerp(iBalance)>
  [ 25] getparam 3 .............................. <iPrice>
  [ 27] pusharglist 1 ........................... <iPrice>
  [ 29] extcall 445 ............................. <integerp(iPrice)>
  [ 32] and ..................................... <integerp(iBalance) and integerp(iPrice)>
  [ 33] jmpifz [ 56] ............................ if integerp(iBalance) and integerp(iPrice) then
  [ 36] getparam 2 .............................. <iBalance>
  [ 38] getparam 3 .............................. <iPrice>
  [ 40] lt ...................................... <iBalance < iPrice>
  [ 41] jmpifz [ 56] ............................ if iBalance < iPrice then
  [ 44] getparam 0 .............................. <me>
  [ 46] pushcons 113 ............................ <"ALERT_INSUFFICIENT_BALANCE">
  [ 48] pusharglistnoret 2 ...................... <me, "ALERT_INSUFFICIENT_BALANCE">
  [ 50] objcall 245 ............................. me.alert("ALERT_INSUFFICIENT_BALANCE")
  [ 52] pusharglistnoret 0 ...................... <>
  [ 54] extcall 23 .............................. return 
  [ 56] getparam 1 .............................. <iError>
  [ 58] peek 0 .................................. case iError of
  [ 60] pushzero ................................ <0>
  [ 61] eq
  [ 62] jmpifz [443] ............................ (case) 0:
  [ 65] getprop 31 .............................. <pOpenWindows>
  [ 67] peek 0
  [ 69] pusharglist 1
  [ 71] extcall 29
  [ 73] pushint8 1
  [ 75] peek 0
  [ 77] peek 2
  [ 79] lteq
  [ 80] jmpifz [229] ............................ repeat with n in pOpenWindows
  [ 83] peek 2
  [ 85] peek 1
  [ 87] pusharglist 2
  [ 89] extcall 44
  [ 91] setlocal 0
  [ 93] getlocal 0 .............................. <n>
  [ 95] getobjprop 10 ........................... <n.pScrollingLists>
  [ 97] pusharglist 1 ........................... <n.pScrollingLists>
  [ 99] extcall 29 .............................. <count(n.pScrollingLists)>
  [101] jmpifz [224] ............................ if count(n.pScrollingLists) then
  [104] getlocal 0 .............................. <n>
  [106] getobjprop 10 ........................... <n.pScrollingLists>
  [108] pushsymb 69 ............................. <#itemslist>
  [110] pusharglist 2 ........................... <n.pScrollingLists, #itemslist>
  [112] extcall 312 ............................. <getaProp(n.pScrollingLists, #itemslist)>
  [115] pusharglist 1 ........................... <getaProp(n.pScrollingLists, #itemslist)>
  [117] extcall 12 .............................. <voidp(getaProp(n.pScrollingLists, #itemslist))>
  [119] pushzero ................................ <0>
  [120] eq ...................................... <voidp(getaProp(n.pScrollingLists, #itemslist)) = 0>
  [121] jmpifz [224] ............................ if voidp(getaProp(n.pScrollingLists, #itemslist)) = 0 then
  [124] getparam 4 .............................. <sProdID>
  [126] pusharglist 1 ........................... <sProdID>
  [128] extcall 12 .............................. <voidp(sProdID)>
  [130] pushzero ................................ <0>
  [131] eq ...................................... <voidp(sProdID) = 0>
  [132] jmpifz [217] ............................ if voidp(sProdID) = 0 then / else
  [135] getparam 0 .............................. <me>
  [137] getchainedprop 31 ....................... <me.pOpenWindows>
  [139] getchainedprop 442 ...................... <me.pOpenWindows.catalogue_pagedynamic>
  [142] getchainedprop 10 ....................... <me.pOpenWindows.catalogue_pagedynamic.pScrollingLists>
  [144] getchainedprop 69 ....................... <me.pOpenWindows.catalogue_pagedynamic.pScrollingLists.itemslist>
  [146] getobjprop 446 .......................... <me.pOpenWindows.catalogue_pagedynamic.pScrollingLists.itemslist.pItemsList>
  [149] setlocal 1 .............................. itemslist = me.pOpenWindows.catalogue_pagedynamic.pScrollingLists.itemslist.pItemsList
  [151] getlocal 1 .............................. <itemslist>
  [153] peek 0
  [155] pusharglist 1
  [157] extcall 29
  [159] pushint8 1
  [161] peek 0
  [163] peek 2
  [165] lteq
  [166] jmpifz [212] ............................ repeat with myitem in itemslist
  [169] peek 2
  [171] peek 1
  [173] pusharglist 2
  [175] extcall 44
  [177] setlocal 2
  [179] getlocal 2 .............................. <myitem>
  [181] pushsymb 447 ............................ <#prodID>
  [184] pusharglist 2 ........................... <myitem, #prodID>
  [186] objcall 44 .............................. <myitem[#prodID]>
  [188] getparam 4 .............................. <sProdID>
  [190] eq ...................................... <myitem[#prodID] = sProdID>
  [191] jmpifz [207] ............................ if myitem[#prodID] = sProdID then
  [194] getlocal 2 .............................. <myitem>
  [196] pushsymb 21 ............................. <#name>
  [198] pusharglist 2 ........................... <myitem, #name>
  [200] objcall 44 .............................. <myitem[#name]>
  [202] setlocal 3 .............................. myName = myitem[#name]
  [204] jmp [212] ............................... exit repeat
  [207] pushint8 1
  [209] add
  [210] endrepeat [161]
  [212] pop 3
  [214] jmp [221]
  [217] pushcons 114 ............................ <"this item">
  [219] setlocal 3 .............................. myName = "this item"
  [221] jmp [229] ............................... exit repeat
  [224] pushint8 1
  [226] add
  [227] endrepeat [ 75]
  [229] pop 3
  [231] getparam 4 .............................. <sProdID>
  [233] pusharglist 1 ........................... <sProdID>
  [235] extcall 12 .............................. <voidp(sProdID)>
  [237] jmpifz [246] ............................ if voidp(sProdID) then
  [240] pop 1
  [242] pusharglistnoret 0 ...................... <>
  [244] extcall 23 .............................. return 
  [246] getparam 0 .............................. <me>
  [248] pushcons 115 ............................ <"purchase_info.window">
  [250] pusharglistnoret 2 ...................... <me, "purchase_info.window">
  [252] objcall 239 ............................. me.newwindow("purchase_info.window")
  [254] getglobal 91 ............................ <TextMgr>
  [256] pushcons 116 ............................ <"PURCHASE_PRICE">
  [258] pusharglist 2 ........................... <TextMgr, "PURCHASE_PRICE">
  [260] objcall 93 .............................. <TextMgr.GetRefText("PURCHASE_PRICE")>
  [262] setlocal 4 .............................. purchasetitle = TextMgr.GetRefText("PURCHASE_PRICE")
  [264] pushcons 117 ............................ <"{item}">
  [266] getlocal 4 .............................. <purchasetitle>
  [268] pusharglist 2 ........................... <"{item}", purchasetitle>
  [270] extcall 164 ............................. <offset("{item}", purchasetitle)>
  [272] setlocal 5 .............................. mychar = offset("{item}", purchasetitle)
  [274] getlocal 5 .............................. <mychar>
  [276] getlocal 5 .............................. <mychar>
  [278] pushint8 5 .............................. <5>
  [280] add ..................................... <mychar + 5>
  [281] pushzero ................................ <0>
  [282] pushzero ................................ <0>
  [283] pushzero ................................ <0>
  [284] pushzero ................................ <0>
  [285] pushzero ................................ <0>
  [286] pushzero ................................ <0>
  [287] pushint8 4 .............................. <4>
  [289] deletechunk 5 ........................... delete char mychar to mychar + 5 of purchasetitle
  [291] getlocal 3 .............................. <myName>
  [293] pushcons 31 ............................. <" ">
  [295] joinstr ................................. <myName & " ">
  [296] getlocal 5 .............................. <mychar>
  [298] pushzero ................................ <0>
  [299] pushzero ................................ <0>
  [300] pushzero ................................ <0>
  [301] pushzero ................................ <0>
  [302] pushzero ................................ <0>
  [303] pushzero ................................ <0>
  [304] pushzero ................................ <0>
  [305] pushint8 4 .............................. <4>
  [307] putchunk 21 ............................. put myName & " " into char mychar of purchasetitle
  [309] pushcons 118 ............................ <"{price}">
  [311] getlocal 4 .............................. <purchasetitle>
  [313] pusharglist 2 ........................... <"{price}", purchasetitle>
  [315] extcall 164 ............................. <offset("{price}", purchasetitle)>
  [317] setlocal 5 .............................. mychar = offset("{price}", purchasetitle)
  [319] getlocal 5 .............................. <mychar>
  [321] getlocal 5 .............................. <mychar>
  [323] pushint8 6 .............................. <6>
  [325] add ..................................... <mychar + 6>
  [326] pushzero ................................ <0>
  [327] pushzero ................................ <0>
  [328] pushzero ................................ <0>
  [329] pushzero ................................ <0>
  [330] pushzero ................................ <0>
  [331] pushzero ................................ <0>
  [332] pushint8 4 .............................. <4>
  [334] deletechunk 5 ........................... delete char mychar to mychar + 6 of purchasetitle
  [336] getparam 3 .............................. <iPrice>
  [338] pushcons 31 ............................. <" ">
  [340] joinstr ................................. <iPrice & " ">
  [341] getlocal 5 .............................. <mychar>
  [343] pushzero ................................ <0>
  [344] pushzero ................................ <0>
  [345] pushzero ................................ <0>
  [346] pushzero ................................ <0>
  [347] pushzero ................................ <0>
  [348] pushzero ................................ <0>
  [349] pushzero ................................ <0>
  [350] pushint8 4 .............................. <4>
  [352] putchunk 21 ............................. put iPrice & " " into char mychar of purchasetitle
  [354] pushcons 119 ............................ <"purchase_bold_alert_text">
  [356] pusharglist 1 ........................... <"purchase_bold_alert_text">
  [358] extcall 34 .............................. <member("purchase_bold_alert_text")>
  [360] getlocal 4 .............................. <purchasetitle>
  [362] setobjprop 78 ........................... member("purchase_bold_alert_text").text = purchasetitle
  [364] getglobal 91 ............................ <TextMgr>
  [366] pushcons 120 ............................ <"PURCHASE_BALANCE">
  [368] pusharglist 2 ........................... <TextMgr, "PURCHASE_BALANCE">
  [370] objcall 93 .............................. <TextMgr.GetRefText("PURCHASE_BALANCE")>
  [372] setlocal 6 .............................. secondline = TextMgr.GetRefText("PURCHASE_BALANCE")
  [374] pushcons 103 ............................ <"{balance}">
  [376] getlocal 6 .............................. <secondline>
  [378] pusharglist 2 ........................... <"{balance}", secondline>
  [380] extcall 164 ............................. <offset("{balance}", secondline)>
  [382] setlocal 5 .............................. mychar = offset("{balance}", secondline)
  [384] getlocal 5 .............................. <mychar>
  [386] getlocal 5 .............................. <mychar>
  [388] pushint8 8 .............................. <8>
  [390] add ..................................... <mychar + 8>
  [391] pushzero ................................ <0>
  [392] pushzero ................................ <0>
  [393] pushzero ................................ <0>
  [394] pushzero ................................ <0>
  [395] pushzero ................................ <0>
  [396] pushzero ................................ <0>
  [397] pushint8 6 .............................. <6>
  [399] deletechunk 5 ........................... delete char mychar to mychar + 8 of secondline
  [401] getparam 2 .............................. <iBalance>
  [403] pushcons 31 ............................. <" ">
  [405] joinstr ................................. <iBalance & " ">
  [406] getlocal 5 .............................. <mychar>
  [408] pushzero ................................ <0>
  [409] pushzero ................................ <0>
  [410] pushzero ................................ <0>
  [411] pushzero ................................ <0>
  [412] pushzero ................................ <0>
  [413] pushzero ................................ <0>
  [414] pushzero ................................ <0>
  [415] pushint8 6 .............................. <6>
  [417] putchunk 21 ............................. put iBalance & " " into char mychar of secondline
  [419] pushcons 121 ............................ <"purchase_bigalertext">
  [421] pusharglist 1 ........................... <"purchase_bigalertext">
  [423] extcall 34 .............................. <member("purchase_bigalertext")>
  [425] getlocal 6 .............................. <secondline>
  [427] setobjprop 78 ........................... member("purchase_bigalertext").text = secondline
  [429] getparam 0 .............................. <me>
  [431] getparam 4 .............................. <sProdID>
  [433] setobjprop 448 .......................... me.pSelectedCatId = sProdID
  [436] getparam 0 .............................. <me>
  [438] getparam 5 .............................. <aAttributes>
  [440] setobjprop 449 .......................... me.pSelectedAttributes = aAttributes
  [443] pop 1
  [445] ret
end

on purchaseItem_Result me, iError, aPossessions
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [188] ............................ (case) 0:
  [  9] getglobal 79 ............................ <oDenizenManager>
  [ 11] pusharglist 1 ........................... <oDenizenManager>
  [ 13] objcall 455 ............................. <oDenizenManager.getBackpack()>
  [ 16] setlocal 0 .............................. oBackPack = oDenizenManager.getBackpack()
  [ 18] getlocal 0 .............................. <oBackPack>
  [ 20] pusharglist 1 ........................... <oBackPack>
  [ 22] extcall 12 .............................. <voidp(oBackPack)>
  [ 24] not ..................................... <not voidp(oBackPack)>
  [ 25] jmpifz [ 39] ............................ if not voidp(oBackPack) then
  [ 28] getlocal 0 .............................. <oBackPack>
  [ 30] getparam 2 .............................. <aPossessions>
  [ 32] pushint8 1 .............................. <1>
  [ 34] pusharglistnoret 3 ...................... <oBackPack, aPossessions, 1>
  [ 36] objcall 456 ............................. oBackPack.addPossessions(aPossessions, 1)
  [ 39] pushint8 1 .............................. <1>
  [ 41] setlocal 1
  [ 43] getlocal 1
  [ 45] getprop 31 .............................. <pOpenWindows>
  [ 47] pusharglist 1 ........................... <pOpenWindows>
  [ 49] extcall 29 .............................. <count(pOpenWindows)>
  [ 51] lteq
  [ 52] jmpifz [185] ............................ repeat with n = 1 to count(pOpenWindows)
  [ 55] getprop 31 .............................. <pOpenWindows>
  [ 57] getlocal 1 .............................. <n>
  [ 59] pusharglist 2 ........................... <pOpenWindows, n>
  [ 61] extcall 32 .............................. <getPropAt(pOpenWindows, n)>
  [ 63] pushcons 109 ............................ <"cc_backpack">
  [ 65] eq ...................................... <getPropAt(pOpenWindows, n) = "cc_backpack">
  [ 66] jmpifz [153] ............................ if getPropAt(pOpenWindows, n) = "cc_backpack" then
  [ 69] getprop 31 .............................. <pOpenWindows>
  [ 71] getlocal 1 .............................. <n>
  [ 73] pusharglist 2 ........................... <pOpenWindows, n>
  [ 75] objcall 44 .............................. <pOpenWindows[n]>
  [ 77] pushsymb 11 ............................. <#pSpritelist>
  [ 79] pushint8 2 .............................. <2>
  [ 81] pusharglist 3 ........................... <pOpenWindows[n], #pSpritelist, 2>
  [ 83] objcall 149 ............................. <pOpenWindows[n].pSpritelist[2]>
  [ 85] pusharglist 1 ........................... <pOpenWindows[n].pSpritelist[2]>
  [ 87] extcall 36 .............................. <sprite(pOpenWindows[n].pSpritelist[2])>
  [ 89] pushint8 1 .............................. <1>
  [ 91] setobjprop 425 .......................... sprite(pOpenWindows[n].pSpritelist[2]).pIndex = 1
  [ 94] getglobal 79 ............................ <oDenizenManager>
  [ 96] pusharglist 1 ........................... <oDenizenManager>
  [ 98] objcall 80 .............................. <oDenizenManager.getScreenName()>
  [100] setlocal 2 .............................. myscreenname = oDenizenManager.getScreenName()
  [102] getglobal 79 ............................ <oDenizenManager>
  [104] pusharglist 1 ........................... <oDenizenManager>
  [106] objcall 455 ............................. <oDenizenManager.getBackpack()>
  [109] setlocal 0 .............................. oBackPack = oDenizenManager.getBackpack()
  [111] getlocal 0 .............................. <oBackPack>
  [113] pusharglist 1 ........................... <oBackPack>
  [115] extcall 12 .............................. <voidp(oBackPack)>
  [117] not ..................................... <not voidp(oBackPack)>
  [118] jmpifz [147] ............................ if not voidp(oBackPack) then
  [121] getglobal 457 ........................... <oPossessionManager>
  [124] getlocal 2 .............................. <myscreenname>
  [126] pushint8 1 .............................. <1>
  [128] pushint8 25 ............................. <25>
  [130] pusharglistnoret 4 ...................... <oPossessionManager, myscreenname, 1, 25>
  [132] objcall 458 ............................. oPossessionManager.getPossessionsInBackpack(myscreenname, 1, 25)
  [135] getprop 31 .............................. <pOpenWindows>
  [137] getlocal 1 .............................. <n>
  [139] pusharglist 2 ........................... <pOpenWindows, n>
  [141] objcall 44 .............................. <pOpenWindows[n]>
  [143] pusharglistnoret 1 ...................... <pOpenWindows[n]>
  [145] objcall 3 ............................... pOpenWindows[n].bringtofront()
  [147] jmp [185] ............................... exit repeat
  [150] jmp [176] ............................... next repeat
  [153] getlocal 1 .............................. <n>
  [155] getprop 31 .............................. <pOpenWindows>
  [157] pusharglist 1 ........................... <pOpenWindows>
  [159] extcall 29 .............................. <count(pOpenWindows)>
  [161] eq ...................................... <n = count(pOpenWindows)>
  [162] jmpifz [176] ............................ if n = count(pOpenWindows) then
  [165] getparam 0 .............................. <me>
  [167] pushcons 122 ............................ <"cc.backpack.window">
  [169] pusharglistnoret 2 ...................... <me, "cc.backpack.window">
  [171] objcall 239 ............................. me.newwindow("cc.backpack.window")
  [173] jmp [185] ............................... exit repeat
  [176] pushint8 1
  [178] getlocal 1
  [180] add
  [181] setlocal 1
  [183] endrepeat [ 43]
  [185] jmp [204]
  [188] peek 0
  [190] pushint8 1 .............................. <1>
  [192] eq
  [193] jmpifz [204] ............................ (case) 1:
  [196] getparam 0 .............................. <me>
  [198] pushcons 113 ............................ <"ALERT_INSUFFICIENT_BALANCE">
  [200] pusharglistnoret 2 ...................... <me, "ALERT_INSUFFICIENT_BALANCE">
  [202] objcall 245 ............................. me.alert("ALERT_INSUFFICIENT_BALANCE")
  [204] pop 1 ................................... end case
  [206] ret
end

on getSequencer me
  [  0] pushcons 123 ............................ <"Sequencer">
  [  2] pusharglist 1 ........................... <"Sequencer">
  [  4] extcall 34 .............................. <member("Sequencer")>
  [  6] setlocal 0 .............................. oMember = member("Sequencer")
  [  8] getlocal 0 .............................. <oMember>
  [ 10] getobjprop 61 ........................... <oMember.memberNum>
  [ 12] pushzero ................................ <0>
  [ 13] lt ...................................... <oMember.memberNum < 0>
  [ 14] jmpifz [ 26] ............................ if oMember.memberNum < 0 then
  [ 17] pusharglist 0 ........................... <>
  [ 19] extcall 390 ............................. <VOID>
  [ 22] pusharglistnoret 1 ...................... <VOID>
  [ 24] extcall 23 .............................. return VOID
  [ 26] getparam 0 .............................. <me>
  [ 28] getobjprop 461 .......................... <me.oSequencer>
  [ 31] pusharglist 1 ........................... <me.oSequencer>
  [ 33] extcall 12 .............................. <voidp(me.oSequencer)>
  [ 35] jmpifz [ 53] ............................ if voidp(me.oSequencer) then
  [ 38] getparam 0 .............................. <me>
  [ 40] pushcons 123 ............................ <"Sequencer">
  [ 42] pusharglist 1 ........................... <"Sequencer">
  [ 44] extcall 39 .............................. <script("Sequencer")>
  [ 46] pusharglist 1 ........................... <script("Sequencer")>
  [ 48] objcall 0 ............................... <script("Sequencer").new()>
  [ 50] setobjprop 461 .......................... me.oSequencer = script("Sequencer").new()
  [ 53] getparam 0 .............................. <me>
  [ 55] getobjprop 461 .......................... <me.oSequencer>
  [ 58] pusharglistnoret 1 ...................... <me.oSequencer>
  [ 60] extcall 23 .............................. return me.oSequencer
  [ 62] ret
end

on getMessengerObject me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 463 .......................... <me.oMessenger>
  [  5] pusharglist 1 ........................... <me.oMessenger>
  [  7] extcall 12 .............................. <voidp(me.oMessenger)>
  [  9] jmpifz [ 27] ............................ if voidp(me.oMessenger) then
  [ 12] getparam 0 .............................. <me>
  [ 14] pushcons 124 ............................ <"_MESSENGER_">
  [ 16] pusharglist 1 ........................... <"_MESSENGER_">
  [ 18] extcall 39 .............................. <script("_MESSENGER_")>
  [ 20] pusharglist 1 ........................... <script("_MESSENGER_")>
  [ 22] objcall 0 ............................... <script("_MESSENGER_").new()>
  [ 24] setobjprop 463 .......................... me.oMessenger = script("_MESSENGER_").new()
  [ 27] getparam 0 .............................. <me>
  [ 29] getobjprop 463 .......................... <me.oMessenger>
  [ 32] pusharglistnoret 1 ...................... <me.oMessenger>
  [ 34] extcall 23 .............................. return me.oMessenger
  [ 36] ret
end

on getMessenger_Result me, iError, iFriendCount, iEnemyCount, iInviteCount, iTotalMessageCount, aFriends, aEnemies, aInvites, aMessages
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 125 ............................ <"getMessenger_Result()">
  [  4] pushcons 81 ............................. <"iError:">
  [  6] joinpadstr .............................. <"getMessenger_Result()" && "iError:">
  [  7] getparam 1 .............................. <iError>
  [  9] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError>
  [ 10] pushcons 126 ............................ <"iFriendCount:">
  [ 12] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:">
  [ 13] getparam 2 .............................. <iFriendCount>
  [ 15] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount>
  [ 16] pushcons 127 ............................ <"iEnemyCount:">
  [ 18] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:">
  [ 19] getparam 3 .............................. <iEnemyCount>
  [ 21] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount>
  [ 22] pushcons 128 ............................ <"iInviteCount:">
  [ 24] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:">
  [ 25] getparam 4 .............................. <iInviteCount>
  [ 27] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount>
  [ 28] pushcons 129 ............................ <"iTotalMessageCount:">
  [ 30] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:">
  [ 31] getparam 5 .............................. <iTotalMessageCount>
  [ 33] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount>
  [ 34] pushcons 130 ............................ <"aFriends:">
  [ 36] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:">
  [ 37] getparam 6 .............................. <aFriends>
  [ 39] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:" && aFriends>
  [ 40] pushcons 131 ............................ <"aEnemies:">
  [ 42] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:" && aFriends && "aEnemies:">
  [ 43] getparam 7 .............................. <aEnemies>
  [ 45] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:" && aFriends && "aEnemies:" && aEnemies>
  [ 46] pushcons 132 ............................ <"aInvites:">
  [ 48] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:" && aFriends && "aEnemies:" && aEnemies && "aInvites:">
  [ 49] getparam 8 .............................. <aInvites>
  [ 51] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:" && aFriends && "aEnemies:" && aEnemies && "aInvites:" && aInvites>
  [ 52] pushcons 133 ............................ <"aMessages:">
  [ 54] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:" && aFriends && "aEnemies:" && aEnemies && "aInvites:" && aInvites && "aMessages:">
  [ 55] getparam 9 .............................. <aMessages>
  [ 57] joinpadstr .............................. <"getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:" && aFriends && "aEnemies:" && aEnemies && "aInvites:" && aInvites && "aMessages:" && aMessages>
  [ 58] pusharglistnoret 2 ...................... <me, "getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:" && aFriends && "aEnemies:" && aEnemies && "aInvites:" && aInvites && "aMessages:" && aMessages>
  [ 60] objcall 1 ............................... me.debug("getMessenger_Result()" && "iError:" && iError && "iFriendCount:" && iFriendCount && "iEnemyCount:" && iEnemyCount && "iInviteCount:" && iInviteCount && "iTotalMessageCount:" && iTotalMessageCount && "aFriends:" && aFriends && "aEnemies:" && aEnemies && "aInvites:" && aInvites && "aMessages:" && aMessages)
  [ 62] getparam 1 .............................. <iError>
  [ 64] peek 0 .................................. case iError of
  [ 66] pushzero ................................ <0>
  [ 67] eq
  [ 68] jmpifz [ 99] ............................ (case) 0:
  [ 71] getparam 0 .............................. <me>
  [ 73] pusharglist 1 ........................... <me>
  [ 75] objcall 269 ............................. <me.getMessengerObject()>
  [ 78] getparam 2 .............................. <iFriendCount>
  [ 80] getparam 3 .............................. <iEnemyCount>
  [ 82] getparam 4 .............................. <iInviteCount>
  [ 84] getparam 5 .............................. <iTotalMessageCount>
  [ 86] getparam 6 .............................. <aFriends>
  [ 88] getparam 7 .............................. <aEnemies>
  [ 90] getparam 8 .............................. <aInvites>
  [ 92] getparam 9 .............................. <aMessages>
  [ 94] pusharglistnoret 9 ...................... <me.getMessengerObject(), iFriendCount, iEnemyCount, iInviteCount, iTotalMessageCount, aFriends, aEnemies, aInvites, aMessages>
  [ 96] objcall 464 ............................. me.getMessengerObject().updateData(iFriendCount, iEnemyCount, iInviteCount, iTotalMessageCount, aFriends, aEnemies, aInvites, aMessages)
  [ 99] pop 1
  [101] ret
end

on sendMessage_Result me, iError
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushint8 18 ............................. <18>
  [  6] eq
  [  7] jmpifz [ 21] ............................ (case) 18:
  [ 10] getparam 0 .............................. <me>
  [ 12] pushcons 134 ............................ <"ALERT_MESSENGER_LANG">
  [ 14] pusharglistnoret 2 ...................... <me, "ALERT_MESSENGER_LANG">
  [ 16] objcall 245 ............................. me.alert("ALERT_MESSENGER_LANG")
  [ 18] jmp [ 32] ............................... (case) otherwise:
  [ 21] getparam 0 .............................. <me>
  [ 23] pushcons 135 ............................ <"** sendMessage_Result() ERROR: ">
  [ 25] getparam 1 .............................. <iError>
  [ 27] joinstr ................................. <"** sendMessage_Result() ERROR: " & iError>
  [ 28] pusharglistnoret 2 ...................... <me, "** sendMessage_Result() ERROR: " & iError>
  [ 30] objcall 1 ............................... me.debug("** sendMessage_Result() ERROR: " & iError)
  [ 32] pop 1 ................................... end case
  [ 34] ret
end

on removeMessage_Result me, iError
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 12] ............................ (case) 0:
  [  9] jmp [ 23] ............................... (case) otherwise:
  [ 12] getparam 0 .............................. <me>
  [ 14] pushcons 136 ............................ <"** removeMessage_Result() ERROR: ">
  [ 16] getparam 1 .............................. <iError>
  [ 18] joinstr ................................. <"** removeMessage_Result() ERROR: " & iError>
  [ 19] pusharglistnoret 2 ...................... <me, "** removeMessage_Result() ERROR: " & iError>
  [ 21] objcall 1 ............................... me.debug("** removeMessage_Result() ERROR: " & iError)
  [ 23] pop 1 ................................... end case
  [ 25] ret
end

on rejectInvitation_Result me, iError
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 137 ............................ <"** rejectInvitation_Result() ERROR: ">
  [  4] getparam 1 .............................. <iError>
  [  6] joinstr ................................. <"** rejectInvitation_Result() ERROR: " & iError>
  [  7] pusharglistnoret 2 ...................... <me, "** rejectInvitation_Result() ERROR: " & iError>
  [  9] objcall 1 ............................... me.debug("** rejectInvitation_Result() ERROR: " & iError)
  [ 11] getparam 1 .............................. <iError>
  [ 13] peek 0 .................................. case iError of
  [ 15] pushzero ................................ <0>
  [ 16] eq
  [ 17] jmpifz [ 23] ............................ (case) 0:
  [ 20] jmp [ 23]
  [ 23] pop 1 ................................... end case
  [ 25] ret
end

on acceptInvitation_Result me, iError
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 19] ............................ (case) 0:
  [  9] getglobal 79 ............................ <oDenizenManager>
  [ 11] pusharglistnoret 1 ...................... <oDenizenManager>
  [ 13] objcall 473 ............................. oDenizenManager.getMessenger()
  [ 16] jmp [ 19]
  [ 19] pop 1 ................................... end case
  [ 21] ret
end

on removeFriends_Result me, iError
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 12] ............................ (case) 0:
  [  9] jmp [ 12]
  [ 12] pop 1 ................................... end case
  [ 14] ret
end

on inviteFriend_Result me, iError
  [  0] pusharglistnoret 0 ...................... <>
  [  2] extcall 474 ............................. nothing()
  [  5] ret
end

on openmixer me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 475 .......................... <me.oMixer>
  [  5] pusharglist 1 ........................... <me.oMixer>
  [  7] extcall 12 .............................. <voidp(me.oMixer)>
  [  9] not ..................................... <not voidp(me.oMixer)>
  [ 10] jmpifz [ 22] ............................ if not voidp(me.oMixer) then
  [ 13] getparam 0 .............................. <me>
  [ 15] getchainedprop 475 ...................... <me.oMixer>
  [ 18] pusharglistnoret 1 ...................... <me.oMixer>
  [ 20] objcall 5 ............................... me.oMixer.closeWindow()
  [ 22] getparam 0 .............................. <me>
  [ 24] pushcons 138 ............................ <"_MIXER_">
  [ 26] pusharglist 1 ........................... <"_MIXER_">
  [ 28] extcall 39 .............................. <script("_MIXER_")>
  [ 30] pusharglist 1 ........................... <script("_MIXER_")>
  [ 32] objcall 0 ............................... <script("_MIXER_").new()>
  [ 34] setobjprop 475 .......................... me.oMixer = script("_MIXER_").new()
  [ 37] getglobal 207 ........................... <oStudioManager>
  [ 39] getglobal 79 ............................ <oDenizenManager>
  [ 41] pusharglist 1 ........................... <oDenizenManager>
  [ 43] objcall 80 .............................. <oDenizenManager.getScreenName()>
  [ 45] pusharglistnoret 2 ...................... <oStudioManager, oDenizenManager.getScreenName()>
  [ 47] objcall 476 ............................. oStudioManager.getMixerByScreenName(oDenizenManager.getScreenName())
  [ 50] getparam 0 .............................. <me>
  [ 52] getobjprop 475 .......................... <me.oMixer>
  [ 55] pusharglistnoret 1 ...................... <me.oMixer>
  [ 57] extcall 23 .............................. return me.oMixer
  [ 59] ret
end

on getMixer me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 475 .......................... <me.oMixer>
  [  5] pusharglistnoret 1 ...................... <me.oMixer>
  [  7] extcall 23 .............................. return me.oMixer
  [  9] ret
end

on getMixerByScreenName_Result me, iError, aRemoteMixer
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 29] ............................ (case) 0:
  [  9] getparam 0 .............................. <me>
  [ 11] getchainedprop 475 ...................... <me.oMixer>
  [ 14] getparam 2 .............................. <aRemoteMixer>
  [ 16] setobjprop 477 .......................... me.oMixer.pMixerData = aRemoteMixer
  [ 19] getparam 0 .............................. <me>
  [ 21] getchainedprop 475 ...................... <me.oMixer>
  [ 24] pusharglistnoret 1 ...................... <me.oMixer>
  [ 26] objcall 319 ............................. me.oMixer.updatecontent()
  [ 29] pop 1
  [ 31] ret
end

on burnMixToCD_Result me, iError, aPossessions
  [  0] getparam 1 .............................. <iError>
  [  2] peek 0 .................................. case iError of
  [  4] pushzero ................................ <0>
  [  5] eq
  [  6] jmpifz [ 84] ............................ (case) 0:
  [  9] getparam 0 .............................. <me>
  [ 11] pusharglistnoret 1 ...................... <me>
  [ 13] objcall 277 ............................. me.openmixer()
  [ 16] getparam 0 .............................. <me>
  [ 18] pushcons 139 ............................ <"BURN_CD_BURNT">
  [ 20] pusharglistnoret 2 ...................... <me, "BURN_CD_BURNT">
  [ 22] objcall 245 ............................. me.alert("BURN_CD_BURNT")
  [ 24] getglobal 79 ............................ <oDenizenManager>
  [ 26] pusharglist 1 ........................... <oDenizenManager>
  [ 28] objcall 455 ............................. <oDenizenManager.getBackpack()>
  [ 31] setlocal 0 .............................. oBackPack = oDenizenManager.getBackpack()
  [ 33] getlocal 0 .............................. <oBackPack>
  [ 35] pusharglist 1 ........................... <oBackPack>
  [ 37] extcall 12 .............................. <voidp(oBackPack)>
  [ 39] not ..................................... <not voidp(oBackPack)>
  [ 40] jmpifz [ 84] ............................ if not voidp(oBackPack) then
  [ 43] getlocal 0 .............................. <oBackPack>
  [ 45] getparam 2 .............................. <aPossessions>
  [ 47] pushint8 1 .............................. <1>
  [ 49] pusharglistnoret 3 ...................... <oBackPack, aPossessions, 1>
  [ 51] objcall 456 ............................. oBackPack.addPossessions(aPossessions, 1)
  [ 54] getlocal 0 .............................. <oBackPack>
  [ 56] getparam 2 .............................. <aPossessions>
  [ 58] getobjprop 96 ........................... <aPossessions.length>
  [ 60] inv ..................................... <-aPossessions.length>
  [ 61] pusharglistnoret 2 ...................... <oBackPack, -aPossessions.length>
  [ 63] objcall 479 ............................. oBackPack.incrementNumberOfBlankCds(-aPossessions.length)
  [ 66] getglobal 457 ........................... <oPossessionManager>
  [ 69] getglobal 79 ............................ <oDenizenManager>
  [ 71] pusharglist 1 ........................... <oDenizenManager>
  [ 73] objcall 80 .............................. <oDenizenManager.getScreenName()>
  [ 75] pushint8 1 .............................. <1>
  [ 77] pushint8 25 ............................. <25>
  [ 79] pusharglistnoret 4 ...................... <oPossessionManager, oDenizenManager.getScreenName(), 1, 25>
  [ 81] objcall 458 ............................. oPossessionManager.getPossessionsInBackpack(oDenizenManager.getScreenName(), 1, 25)
  [ 84] pop 1
  [ 86] ret
end

on opencdplayer me
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 140 ............................ <"openCdPlayer()">
  [  4] pusharglistnoret 2 ...................... <me, "openCdPlayer()">
  [  6] objcall 1 ............................... me.debug("openCdPlayer()")
  [  8] getparam 0 .............................. <me>
  [ 10] getobjprop 480 .......................... <me.oCdplayer>
  [ 13] pusharglist 1 ........................... <me.oCdplayer>
  [ 15] extcall 12 .............................. <voidp(me.oCdplayer)>
  [ 17] not ..................................... <not voidp(me.oCdplayer)>
  [ 18] jmpifz [ 30] ............................ if not voidp(me.oCdplayer) then
  [ 21] getparam 0 .............................. <me>
  [ 23] getchainedprop 480 ...................... <me.oCdplayer>
  [ 26] pusharglistnoret 1 ...................... <me.oCdplayer>
  [ 28] objcall 5 ............................... me.oCdplayer.closeWindow()
  [ 30] getparam 0 .............................. <me>
  [ 32] pushcons 141 ............................ <"_CDPLAYER_">
  [ 34] pusharglist 1 ........................... <"_CDPLAYER_">
  [ 36] extcall 39 .............................. <script("_CDPLAYER_")>
  [ 38] pusharglist 1 ........................... <script("_CDPLAYER_")>
  [ 40] objcall 0 ............................... <script("_CDPLAYER_").new()>
  [ 42] setobjprop 480 .......................... me.oCdplayer = script("_CDPLAYER_").new()
  [ 45] getglobal 457 ........................... <oPossessionManager>
  [ 48] getglobal 79 ............................ <oDenizenManager>
  [ 50] pusharglist 1 ........................... <oDenizenManager>
  [ 52] objcall 80 .............................. <oDenizenManager.getScreenName()>
  [ 54] pusharglistnoret 2 ...................... <oPossessionManager, oDenizenManager.getScreenName()>
  [ 56] objcall 481 ............................. oPossessionManager.getBurnedCDsInBackPack(oDenizenManager.getScreenName())
  [ 59] getparam 0 .............................. <me>
  [ 61] getobjprop 480 .......................... <me.oCdplayer>
  [ 64] pusharglistnoret 1 ...................... <me.oCdplayer>
  [ 66] extcall 23 .............................. return me.oCdplayer
  [ 68] ret
end

on closeCdPlayer me
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 142 ............................ <"closeCdPlayer()">
  [  4] pusharglistnoret 2 ...................... <me, "closeCdPlayer()">
  [  6] objcall 1 ............................... me.debug("closeCdPlayer()")
  [  8] getparam 0 .............................. <me>
  [ 10] getobjprop 480 .......................... <me.oCdplayer>
  [ 13] pusharglist 1 ........................... <me.oCdplayer>
  [ 15] extcall 12 .............................. <voidp(me.oCdplayer)>
  [ 17] jmpifz [ 24] ............................ if voidp(me.oCdplayer) then
  [ 20] pusharglistnoret 0 ...................... <>
  [ 22] extcall 23 .............................. return 
  [ 24] getparam 0 .............................. <me>
  [ 26] getchainedprop 480 ...................... <me.oCdplayer>
  [ 29] pusharglistnoret 1 ...................... <me.oCdplayer>
  [ 31] objcall 5 ............................... me.oCdplayer.closeWindow()
  [ 33] ret
end

on getcdplayer me
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 143 ............................ <"getCdPlayer()">
  [  4] pusharglistnoret 2 ...................... <me, "getCdPlayer()">
  [  6] objcall 1 ............................... me.debug("getCdPlayer()")
  [  8] getparam 0 .............................. <me>
  [ 10] getobjprop 480 .......................... <me.oCdplayer>
  [ 13] pusharglistnoret 1 ...................... <me.oCdplayer>
  [ 15] extcall 23 .............................. return me.oCdplayer
  [ 17] ret
end

on getBurnedCdsInBackpack_Result me, iError, aCds
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 144 ............................ <"getBurnedCdsInBackpack_Result()">
  [  4] pushcons 145 ............................ <"iError: ">
  [  6] joinstr ................................. <"getBurnedCdsInBackpack_Result()" & "iError: ">
  [  7] getparam 1 .............................. <iError>
  [  9] joinstr ................................. <"getBurnedCdsInBackpack_Result()" & "iError: " & iError>
  [ 10] pushcons 146 ............................ <"aCds: ">
  [ 12] joinstr ................................. <"getBurnedCdsInBackpack_Result()" & "iError: " & iError & "aCds: ">
  [ 13] getparam 2 .............................. <aCds>
  [ 15] joinstr ................................. <"getBurnedCdsInBackpack_Result()" & "iError: " & iError & "aCds: " & aCds>
  [ 16] pusharglistnoret 2 ...................... <me, "getBurnedCdsInBackpack_Result()" & "iError: " & iError & "aCds: " & aCds>
  [ 18] objcall 1 ............................... me.debug("getBurnedCdsInBackpack_Result()" & "iError: " & iError & "aCds: " & aCds)
  [ 20] getparam 1 .............................. <iError>
  [ 22] peek 0 .................................. case iError of
  [ 24] pushzero ................................ <0>
  [ 25] eq
  [ 26] jmpifz [ 97] ............................ (case) 0:
  [ 29] getparam 2 .............................. <aCds>
  [ 31] getobjprop 29 ........................... <aCds.count>
  [ 33] pushzero ................................ <0>
  [ 34] eq ...................................... <aCds.count = 0>
  [ 35] jmpifz [ 59] ............................ if aCds.count = 0 then / else
  [ 38] getglobal 482 ........................... <oStudio>
  [ 41] pusharglistnoret 1 ...................... <oStudio>
  [ 43] objcall 483 ............................. oStudio.sendCdStop()
  [ 46] getparam 0 .............................. <me>
  [ 48] pushcons 147 ............................ <"NOCD_TITLE">
  [ 50] pushcons 148 ............................ <"NOCD_DESC">
  [ 52] pusharglistnoret 3 ...................... <me, "NOCD_TITLE", "NOCD_DESC">
  [ 54] objcall 245 ............................. me.alert("NOCD_TITLE", "NOCD_DESC")
  [ 56] jmp [ 97]
  [ 59] getparam 0 .............................. <me>
  [ 61] getchainedprop 480 ...................... <me.oCdplayer>
  [ 64] pusharglist 1 ........................... <me.oCdplayer>
  [ 66] objcall 484 ............................. <me.oCdplayer.getOpenWindow()>
  [ 69] getchainedprop 10 ....................... <me.oCdplayer.getOpenWindow().pScrollingLists>
  [ 71] getchainedprop 66 ....................... <me.oCdplayer.getOpenWindow().pScrollingLists.songslist>
  [ 73] getparam 2 .............................. <aCds>
  [ 75] setobjprop 485 .......................... me.oCdplayer.getOpenWindow().pScrollingLists.songslist.pSongsData = aCds
  [ 78] getparam 0 .............................. <me>
  [ 80] getchainedprop 480 ...................... <me.oCdplayer>
  [ 83] pusharglist 1 ........................... <me.oCdplayer>
  [ 85] objcall 484 ............................. <me.oCdplayer.getOpenWindow()>
  [ 88] getchainedprop 10 ....................... <me.oCdplayer.getOpenWindow().pScrollingLists>
  [ 90] getchainedprop 66 ....................... <me.oCdplayer.getOpenWindow().pScrollingLists.songslist>
  [ 92] pusharglistnoret 1 ...................... <me.oCdplayer.getOpenWindow().pScrollingLists.songslist>
  [ 94] objcall 319 ............................. me.oCdplayer.getOpenWindow().pScrollingLists.songslist.updatecontent()
  [ 97] pop 1
  [ 99] ret
end

on openJukebox me
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 149 ............................ <"openjukebox()">
  [  4] pusharglistnoret 2 ...................... <me, "openjukebox()">
  [  6] objcall 1 ............................... me.debug("openjukebox()")
  [  8] getparam 0 .............................. <me>
  [ 10] getobjprop 487 .......................... <me.oJukebox>
  [ 13] pusharglist 1 ........................... <me.oJukebox>
  [ 15] extcall 12 .............................. <voidp(me.oJukebox)>
  [ 17] not ..................................... <not voidp(me.oJukebox)>
  [ 18] jmpifz [ 30] ............................ if not voidp(me.oJukebox) then
  [ 21] getparam 0 .............................. <me>
  [ 23] getchainedprop 487 ...................... <me.oJukebox>
  [ 26] pusharglistnoret 1 ...................... <me.oJukebox>
  [ 28] objcall 5 ............................... me.oJukebox.closeWindow()
  [ 30] getparam 0 .............................. <me>
  [ 32] pushcons 150 ............................ <"_JUKEBOX_">
  [ 34] pusharglist 1 ........................... <"_JUKEBOX_">
  [ 36] extcall 39 .............................. <script("_JUKEBOX_")>
  [ 38] pusharglist 1 ........................... <script("_JUKEBOX_")>
  [ 40] objcall 0 ............................... <script("_JUKEBOX_").new()>
  [ 42] setobjprop 487 .......................... me.oJukebox = script("_JUKEBOX_").new()
  [ 45] getparam 0 .............................. <me>
  [ 47] getobjprop 487 .......................... <me.oJukebox>
  [ 50] pusharglistnoret 1 ...................... <me.oJukebox>
  [ 52] extcall 23 .............................. return me.oJukebox
  [ 54] ret
end

on openjukeboxplayer me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 487 .......................... <me.oJukebox>
  [  5] pusharglist 1 ........................... <me.oJukebox>
  [  7] extcall 12 .............................. <voidp(me.oJukebox)>
  [  9] not ..................................... <not voidp(me.oJukebox)>
  [ 10] jmpifz [ 22] ............................ if not voidp(me.oJukebox) then
  [ 13] getparam 0 .............................. <me>
  [ 15] getchainedprop 487 ...................... <me.oJukebox>
  [ 18] pusharglistnoret 1 ...................... <me.oJukebox>
  [ 20] objcall 5 ............................... me.oJukebox.closeWindow()
  [ 22] getparam 0 .............................. <me>
  [ 24] pushcons 150 ............................ <"_JUKEBOX_">
  [ 26] pusharglist 1 ........................... <"_JUKEBOX_">
  [ 28] extcall 39 .............................. <script("_JUKEBOX_")>
  [ 30] pusharglist 1 ........................... <script("_JUKEBOX_")>
  [ 32] objcall 0 ............................... <script("_JUKEBOX_").new()>
  [ 34] setobjprop 487 .......................... me.oJukebox = script("_JUKEBOX_").new()
  [ 37] getparam 0 .............................. <me>
  [ 39] getchainedprop 487 ...................... <me.oJukebox>
  [ 42] pushcons 151 ............................ <"cc.infinite_jukebox.playback.window">
  [ 44] pusharglistnoret 2 ...................... <me.oJukebox, "cc.infinite_jukebox.playback.window">
  [ 46] objcall 488 ............................. me.oJukebox.openWindow("cc.infinite_jukebox.playback.window")
  [ 49] ret
end

on closeJukebox me
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 152 ............................ <"closeJukebox()">
  [  4] pusharglistnoret 2 ...................... <me, "closeJukebox()">
  [  6] objcall 1 ............................... me.debug("closeJukebox()")
  [  8] getparam 0 .............................. <me>
  [ 10] getobjprop 487 .......................... <me.oJukebox>
  [ 13] pusharglist 1 ........................... <me.oJukebox>
  [ 15] extcall 12 .............................. <voidp(me.oJukebox)>
  [ 17] jmpifz [ 24] ............................ if voidp(me.oJukebox) then
  [ 20] pusharglistnoret 0 ...................... <>
  [ 22] extcall 23 .............................. return 
  [ 24] getparam 0 .............................. <me>
  [ 26] getchainedprop 487 ...................... <me.oJukebox>
  [ 29] pusharglistnoret 1 ...................... <me.oJukebox>
  [ 31] objcall 5 ............................... me.oJukebox.closeWindow()
  [ 33] ret
end

on getJukebox me
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 153 ............................ <"getJukebox()">
  [  4] pusharglistnoret 2 ...................... <me, "getJukebox()">
  [  6] objcall 1 ............................... me.debug("getJukebox()")
  [  8] getparam 0 .............................. <me>
  [ 10] getobjprop 487 .......................... <me.oJukebox>
  [ 13] pusharglistnoret 1 ...................... <me.oJukebox>
  [ 15] extcall 23 .............................. return me.oJukebox
  [ 17] ret
end

on getLoader me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 489 .......................... <me.oLoader>
  [  5] pusharglist 1 ........................... <me.oLoader>
  [  7] extcall 12 .............................. <voidp(me.oLoader)>
  [  9] jmpifz [ 27] ............................ if voidp(me.oLoader) then
  [ 12] getparam 0 .............................. <me>
  [ 14] pushcons 154 ............................ <"_Loader_">
  [ 16] pusharglist 1 ........................... <"_Loader_">
  [ 18] extcall 39 .............................. <script("_Loader_")>
  [ 20] pusharglist 1 ........................... <script("_Loader_")>
  [ 22] objcall 0 ............................... <script("_Loader_").new()>
  [ 24] setobjprop 489 .......................... me.oLoader = script("_Loader_").new()
  [ 27] getparam 0 .............................. <me>
  [ 29] getobjprop 489 .......................... <me.oLoader>
  [ 32] pusharglistnoret 1 ...................... <me.oLoader>
  [ 34] extcall 23 .............................. return me.oLoader
  [ 36] ret
end

on opentrader me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 490 .......................... <me.oTrader>
  [  5] pusharglist 1 ........................... <me.oTrader>
  [  7] extcall 12 .............................. <voidp(me.oTrader)>
  [  9] not ..................................... <not voidp(me.oTrader)>
  [ 10] jmpifz [ 22] ............................ if not voidp(me.oTrader) then
  [ 13] getparam 0 .............................. <me>
  [ 15] getchainedprop 490 ...................... <me.oTrader>
  [ 18] pusharglistnoret 1 ...................... <me.oTrader>
  [ 20] objcall 5 ............................... me.oTrader.closeWindow()
  [ 22] getparam 0 .............................. <me>
  [ 24] pushcons 155 ............................ <"_TRADER_">
  [ 26] pusharglist 1 ........................... <"_TRADER_">
  [ 28] extcall 39 .............................. <script("_TRADER_")>
  [ 30] pusharglist 1 ........................... <script("_TRADER_")>
  [ 32] objcall 0 ............................... <script("_TRADER_").new()>
  [ 34] setobjprop 490 .......................... me.oTrader = script("_TRADER_").new()
  [ 37] getparam 0 .............................. <me>
  [ 39] getobjprop 490 .......................... <me.oTrader>
  [ 42] pusharglistnoret 1 ...................... <me.oTrader>
  [ 44] extcall 23 .............................. return me.oTrader
  [ 46] ret
end

on getTrader me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 490 .......................... <me.oTrader>
  [  5] pusharglistnoret 1 ...................... <me.oTrader>
  [  7] extcall 23 .............................. return me.oTrader
  [  9] ret
end

on cancelTrade me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 490 .......................... <me.oTrader>
  [  5] pusharglist 1 ........................... <me.oTrader>
  [  7] extcall 12 .............................. <voidp(me.oTrader)>
  [  9] not ..................................... <not voidp(me.oTrader)>
  [ 10] jmpifz [ 32] ............................ if not voidp(me.oTrader) then
  [ 13] getparam 0 .............................. <me>
  [ 15] getchainedprop 490 ...................... <me.oTrader>
  [ 18] pusharglistnoret 1 ...................... <me.oTrader>
  [ 20] objcall 5 ............................... me.oTrader.closeWindow()
  [ 22] getparam 0 .............................. <me>
  [ 24] pusharglist 0 ........................... <>
  [ 26] extcall 390 ............................. <VOID>
  [ 29] setobjprop 490 .......................... me.oTrader = VOID
  [ 32] ret
end

on displayTrade me, lContent
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 490 .......................... <me.oTrader>
  [  5] pusharglist 1 ........................... <me.oTrader>
  [  7] extcall 12 .............................. <voidp(me.oTrader)>
  [  9] jmpifz [ 29] ............................ if voidp(me.oTrader) then
  [ 12] getglobal 491 ........................... <oIsoScene>
  [ 15] pushint8 1 .............................. <1>
  [ 17] pusharglistnoret 2 ...................... <oIsoScene, 1>
  [ 19] objcall 492 ............................. oIsoScene.dropSelectedItem(1)
  [ 22] getparam 0 .............................. <me>
  [ 24] pusharglistnoret 1 ...................... <me>
  [ 26] objcall 290 ............................. me.opentrader()
  [ 29] getparam 0 .............................. <me>
  [ 31] getchainedprop 490 ...................... <me.oTrader>
  [ 34] pusharglist 0 ........................... <>
  [ 36] extcall 390 ............................. <VOID>
  [ 39] getparam 1 .............................. <lContent>
  [ 41] pusharglistnoret 3 ...................... <me.oTrader, VOID, lContent>
  [ 43] objcall 493 ............................. me.oTrader.displayWindow(VOID, lContent)
  [ 46] ret
end

on displayVoteResults me, sAuthorScreenName, iThumbsUp, iThumbsDown, iDecibelsAwarded
  [  0] getglobal 91 ............................ <TextMgr>
  [  2] pushcons 156 ............................ <"THUMBS_UP_VOTES">
  [  4] pusharglist 2 ........................... <TextMgr, "THUMBS_UP_VOTES">
  [  6] objcall 93 .............................. <TextMgr.GetRefText("THUMBS_UP_VOTES")>
  [  8] setlocal 0 .............................. myphrase = TextMgr.GetRefText("THUMBS_UP_VOTES")
  [ 10] pushcons 157 ............................ <"{voteupnum}">
  [ 12] getlocal 0 .............................. <myphrase>
  [ 14] pusharglist 2 ........................... <"{voteupnum}", myphrase>
  [ 16] extcall 164 ............................. <offset("{voteupnum}", myphrase)>
  [ 18] setlocal 1 .............................. mychar = offset("{voteupnum}", myphrase)
  [ 20] getlocal 1 .............................. <mychar>
  [ 22] getlocal 1 .............................. <mychar>
  [ 24] pushcons 157 ............................ <"{voteupnum}">
  [ 26] pusharglist 1 ........................... <"{voteupnum}">
  [ 28] extcall 96 .............................. <length("{voteupnum}")>
  [ 30] add ..................................... <mychar + length("{voteupnum}")>
  [ 31] pushint8 1 .............................. <1>
  [ 33] sub ..................................... <mychar + length("{voteupnum}") - 1>
  [ 34] pushzero ................................ <0>
  [ 35] pushzero ................................ <0>
  [ 36] pushzero ................................ <0>
  [ 37] pushzero ................................ <0>
  [ 38] pushzero ................................ <0>
  [ 39] pushzero ................................ <0>
  [ 40] pushzero ................................ <0>
  [ 41] deletechunk 5 ........................... delete char mychar to mychar + length("{voteupnum}") - 1 of myphrase
  [ 43] getparam 2 .............................. <iThumbsUp>
  [ 45] pushcons 31 ............................. <" ">
  [ 47] joinstr ................................. <iThumbsUp & " ">
  [ 48] getlocal 1 .............................. <mychar>
  [ 50] pushzero ................................ <0>
  [ 51] pushzero ................................ <0>
  [ 52] pushzero ................................ <0>
  [ 53] pushzero ................................ <0>
  [ 54] pushzero ................................ <0>
  [ 55] pushzero ................................ <0>
  [ 56] pushzero ................................ <0>
  [ 57] pushzero ................................ <0>
  [ 58] putchunk 21 ............................. put iThumbsUp & " " into char mychar of myphrase
  [ 60] getlocal 0 .............................. <myphrase>
  [ 62] pushcons 158 ............................ <RETURN>
  [ 64] joinstr ................................. <myphrase & RETURN>
  [ 65] setlocal 2 .............................. mytext = myphrase & RETURN
  [ 67] getglobal 91 ............................ <TextMgr>
  [ 69] pushcons 159 ............................ <"THUMBS_DOWN_VOTES">
  [ 71] pusharglist 2 ........................... <TextMgr, "THUMBS_DOWN_VOTES">
  [ 73] objcall 93 .............................. <TextMgr.GetRefText("THUMBS_DOWN_VOTES")>
  [ 75] setlocal 0 .............................. myphrase = TextMgr.GetRefText("THUMBS_DOWN_VOTES")
  [ 77] pushcons 160 ............................ <"{votedownnum}">
  [ 79] getlocal 0 .............................. <myphrase>
  [ 81] pusharglist 2 ........................... <"{votedownnum}", myphrase>
  [ 83] extcall 164 ............................. <offset("{votedownnum}", myphrase)>
  [ 85] setlocal 1 .............................. mychar = offset("{votedownnum}", myphrase)
  [ 87] getlocal 1 .............................. <mychar>
  [ 89] getlocal 1 .............................. <mychar>
  [ 91] pushcons 160 ............................ <"{votedownnum}">
  [ 93] pusharglist 1 ........................... <"{votedownnum}">
  [ 95] extcall 96 .............................. <length("{votedownnum}")>
  [ 97] add ..................................... <mychar + length("{votedownnum}")>
  [ 98] pushint8 1 .............................. <1>
  [100] sub ..................................... <mychar + length("{votedownnum}") - 1>
  [101] pushzero ................................ <0>
  [102] pushzero ................................ <0>
  [103] pushzero ................................ <0>
  [104] pushzero ................................ <0>
  [105] pushzero ................................ <0>
  [106] pushzero ................................ <0>
  [107] pushzero ................................ <0>
  [108] deletechunk 5 ........................... delete char mychar to mychar + length("{votedownnum}") - 1 of myphrase
  [110] getparam 3 .............................. <iThumbsDown>
  [112] pushcons 31 ............................. <" ">
  [114] joinstr ................................. <iThumbsDown & " ">
  [115] getlocal 1 .............................. <mychar>
  [117] pushzero ................................ <0>
  [118] pushzero ................................ <0>
  [119] pushzero ................................ <0>
  [120] pushzero ................................ <0>
  [121] pushzero ................................ <0>
  [122] pushzero ................................ <0>
  [123] pushzero ................................ <0>
  [124] pushzero ................................ <0>
  [125] putchunk 21 ............................. put iThumbsDown & " " into char mychar of myphrase
  [127] getlocal 2 .............................. <mytext>
  [129] getlocal 0 .............................. <myphrase>
  [131] joinstr ................................. <mytext & myphrase>
  [132] pushcons 158 ............................ <RETURN>
  [134] joinstr ................................. <mytext & myphrase & RETURN>
  [135] pushcons 158 ............................ <RETURN>
  [137] joinstr ................................. <mytext & myphrase & RETURN & RETURN>
  [138] setlocal 2 .............................. mytext = mytext & myphrase & RETURN & RETURN
  [140] getglobal 91 ............................ <TextMgr>
  [142] pushcons 161 ............................ <"DECIBEL_RESULT">
  [144] pusharglist 2 ........................... <TextMgr, "DECIBEL_RESULT">
  [146] objcall 93 .............................. <TextMgr.GetRefText("DECIBEL_RESULT")>
  [148] setlocal 0 .............................. myphrase = TextMgr.GetRefText("DECIBEL_RESULT")
  [150] pushcons 162 ............................ <"{numdecibel}">
  [152] getlocal 0 .............................. <myphrase>
  [154] pusharglist 2 ........................... <"{numdecibel}", myphrase>
  [156] extcall 164 ............................. <offset("{numdecibel}", myphrase)>
  [158] setlocal 1 .............................. mychar = offset("{numdecibel}", myphrase)
  [160] getlocal 1 .............................. <mychar>
  [162] getlocal 1 .............................. <mychar>
  [164] pushcons 162 ............................ <"{numdecibel}">
  [166] pusharglist 1 ........................... <"{numdecibel}">
  [168] extcall 96 .............................. <length("{numdecibel}")>
  [170] add ..................................... <mychar + length("{numdecibel}")>
  [171] pushint8 1 .............................. <1>
  [173] sub ..................................... <mychar + length("{numdecibel}") - 1>
  [174] pushzero ................................ <0>
  [175] pushzero ................................ <0>
  [176] pushzero ................................ <0>
  [177] pushzero ................................ <0>
  [178] pushzero ................................ <0>
  [179] pushzero ................................ <0>
  [180] pushzero ................................ <0>
  [181] deletechunk 5 ........................... delete char mychar to mychar + length("{numdecibel}") - 1 of myphrase
  [183] getparam 4 .............................. <iDecibelsAwarded>
  [185] pushcons 31 ............................. <" ">
  [187] joinstr ................................. <iDecibelsAwarded & " ">
  [188] getlocal 1 .............................. <mychar>
  [190] pushzero ................................ <0>
  [191] pushzero ................................ <0>
  [192] pushzero ................................ <0>
  [193] pushzero ................................ <0>
  [194] pushzero ................................ <0>
  [195] pushzero ................................ <0>
  [196] pushzero ................................ <0>
  [197] pushzero ................................ <0>
  [198] putchunk 21 ............................. put iDecibelsAwarded & " " into char mychar of myphrase
  [200] getlocal 2 .............................. <mytext>
  [202] getlocal 0 .............................. <myphrase>
  [204] joinstr ................................. <mytext & myphrase>
  [205] setlocal 2 .............................. mytext = mytext & myphrase
  [207] getparam 0 .............................. <me>
  [209] pushcons 163 ............................ <"RESULTS_TITLE">
  [211] getlocal 2 .............................. <mytext>
  [213] pusharglistnoret 3 ...................... <me, "RESULTS_TITLE", mytext>
  [215] objcall 245 ............................. me.alert("RESULTS_TITLE", mytext)
  [217] ret
end

on displayDrinkCoke me, iPoints
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 164 ............................ <"cc_capdecibels.window">
  [  4] pusharglist 2 ........................... <me, "cc_capdecibels.window">
  [  6] objcall 239 ............................. <me.newwindow("cc_capdecibels.window")>
  [  8] setlocal 0 .............................. capwindow = me.newwindow("cc_capdecibels.window")
  [ 10] pushcons 165 ............................ <"captimer">
  [ 12] pusharglist 1 ........................... <"captimer">
  [ 14] extcall 39 .............................. <script("captimer")>
  [ 16] getlocal 0 .............................. <capwindow>
  [ 18] pusharglist 2 ........................... <script("captimer"), capwindow>
  [ 20] extcall 0 ............................... <new(script("captimer"), capwindow)>
  [ 22] setlocal 1 .............................. captimer = new(script("captimer"), capwindow)
  [ 24] getglobal 91 ............................ <TextMgr>
  [ 26] pushcons 166 ............................ <"DRINK_COKE">
  [ 28] pusharglist 2 ........................... <TextMgr, "DRINK_COKE">
  [ 30] objcall 93 .............................. <TextMgr.GetRefText("DRINK_COKE")>
  [ 32] setlocal 2 .............................. mytext = TextMgr.GetRefText("DRINK_COKE")
  [ 34] pushcons 167 ............................ <"{points}">
  [ 36] getlocal 2 .............................. <mytext>
  [ 38] pusharglist 2 ........................... <"{points}", mytext>
  [ 40] extcall 164 ............................. <offset("{points}", mytext)>
  [ 42] setlocal 3 .............................. mychar = offset("{points}", mytext)
  [ 44] getlocal 3 .............................. <mychar>
  [ 46] getlocal 3 .............................. <mychar>
  [ 48] pushcons 167 ............................ <"{points}">
  [ 50] pusharglist 1 ........................... <"{points}">
  [ 52] extcall 96 .............................. <length("{points}")>
  [ 54] pushint8 1 .............................. <1>
  [ 56] sub ..................................... <length("{points}") - 1>
  [ 57] add ..................................... <mychar + (length("{points}") - 1)>
  [ 58] pushzero ................................ <0>
  [ 59] pushzero ................................ <0>
  [ 60] pushzero ................................ <0>
  [ 61] pushzero ................................ <0>
  [ 62] pushzero ................................ <0>
  [ 63] pushzero ................................ <0>
  [ 64] pushint8 2 .............................. <2>
  [ 66] deletechunk 5 ........................... delete char mychar to mychar + (length("{points}") - 1) of mytext
  [ 68] getparam 1 .............................. <iPoints>
  [ 70] pushcons 31 ............................. <" ">
  [ 72] joinstr ................................. <iPoints & " ">
  [ 73] getlocal 3 .............................. <mychar>
  [ 75] pushzero ................................ <0>
  [ 76] pushzero ................................ <0>
  [ 77] pushzero ................................ <0>
  [ 78] pushzero ................................ <0>
  [ 79] pushzero ................................ <0>
  [ 80] pushzero ................................ <0>
  [ 81] pushzero ................................ <0>
  [ 82] pushint8 2 .............................. <2>
  [ 84] putchunk 21 ............................. put iPoints & " " into char mychar of mytext
  [ 86] pushcons 168 ............................ <"cc.capdecibel.text">
  [ 88] pusharglist 1 ........................... <"cc.capdecibel.text">
  [ 90] extcall 34 .............................. <member("cc.capdecibel.text")>
  [ 92] getlocal 2 .............................. <mytext>
  [ 94] setobjprop 78 ........................... member("cc.capdecibel.text").text = mytext
  [ 96] getparam 0 .............................. <me>
  [ 98] pushcons 169 ............................ <"text member: ">
  [100] pushcons 168 ............................ <"cc.capdecibel.text">
  [102] pusharglist 1 ........................... <"cc.capdecibel.text">
  [104] extcall 34 .............................. <member("cc.capdecibel.text")>
  [106] joinstr ................................. <"text member: " & member("cc.capdecibel.text")>
  [107] pushint8 1 .............................. <1>
  [109] pusharglistnoret 3 ...................... <me, "text member: " & member("cc.capdecibel.text"), 1>
  [111] objcall 1 ............................... me.debug("text member: " & member("cc.capdecibel.text"), 1)
  [113] ret
end

on displayWallReplace me, iPosId, iWallTexture, iWallColor, iFloorTexture, iFloorColor
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 170 ............................ <"confirm_texture.window">
  [  4] pusharglistnoret 2 ...................... <me, "confirm_texture.window">
  [  6] objcall 239 ............................. me.newwindow("confirm_texture.window")
  [  8] pusharglistnoret 0 ...................... <>
  [ 10] extcall 374 ............................. updateStage()
  [ 13] pushsymb 503 ............................ <#setfloor>
  [ 16] getparam 4 .............................. <iFloorTexture>
  [ 18] getparam 5 .............................. <iFloorColor>
  [ 20] pusharglistnoret 3 ...................... <#setfloor, iFloorTexture, iFloorColor>
  [ 22] extcall 375 ............................. sendAllSprites(#setfloor, iFloorTexture, iFloorColor)
  [ 25] pushsymb 504 ............................ <#setwalls>
  [ 28] getparam 2 .............................. <iWallTexture>
  [ 30] getparam 3 .............................. <iWallColor>
  [ 32] pusharglistnoret 3 ...................... <#setwalls, iWallTexture, iWallColor>
  [ 34] extcall 375 ............................. sendAllSprites(#setwalls, iWallTexture, iWallColor)
  [ 37] pushsymb 505 ............................ <#displayPattern>
  [ 40] pusharglistnoret 1 ...................... <#displayPattern>
  [ 42] extcall 375 ............................. sendAllSprites(#displayPattern)
  [ 45] pushcons 171 ............................ <"cc.confirm.texture">
  [ 47] pusharglist 1 ........................... <"cc.confirm.texture">
  [ 49] extcall 34 .............................. <member("cc.confirm.texture")>
  [ 51] getglobal 91 ............................ <TextMgr>
  [ 53] pushcons 172 ............................ <"REPLACE_WALL">
  [ 55] pusharglist 2 ........................... <TextMgr, "REPLACE_WALL">
  [ 57] objcall 93 .............................. <TextMgr.GetRefText("REPLACE_WALL")>
  [ 59] setobjprop 78 ........................... member("cc.confirm.texture").text = TextMgr.GetRefText("REPLACE_WALL")
  [ 61] pushsymb 506 ............................ <#getokreplace>
  [ 64] pusharglist 1 ........................... <#getokreplace>
  [ 66] extcall 375 ............................. <sendAllSprites(#getokreplace)>
  [ 69] setlocal 0 .............................. okbutton = sendAllSprites(#getokreplace)
  [ 71] getlocal 0 .............................. <okbutton>
  [ 73] pusharglist 1 ........................... <okbutton>
  [ 75] extcall 36 .............................. <sprite(okbutton)>
  [ 77] pushsymb 507 ............................ <#wall>
  [ 80] setobjprop 508 .......................... sprite(okbutton).pType = #wall
  [ 83] getlocal 0 .............................. <okbutton>
  [ 85] pusharglist 1 ........................... <okbutton>
  [ 87] extcall 36 .............................. <sprite(okbutton)>
  [ 89] getparam 1 .............................. <iPosId>
  [ 91] setobjprop 509 .......................... sprite(okbutton).iPosId = iPosId
  [ 94] getlocal 0 .............................. <okbutton>
  [ 96] pusharglist 1 ........................... <okbutton>
  [ 98] extcall 36 .............................. <sprite(okbutton)>
  [100] getparam 2 .............................. <iWallTexture>
  [102] setobjprop 510 .......................... sprite(okbutton).iWallTexture = iWallTexture
  [105] getlocal 0 .............................. <okbutton>
  [107] pusharglist 1 ........................... <okbutton>
  [109] extcall 36 .............................. <sprite(okbutton)>
  [111] getparam 3 .............................. <iWallColor>
  [113] setobjprop 511 .......................... sprite(okbutton).iWallColor = iWallColor
  [116] ret
end

on displayFloorReplace me, iPosId, iWallTexture, iWallColor, iFloorTexture, iFloorColor
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 170 ............................ <"confirm_texture.window">
  [  4] pusharglistnoret 2 ...................... <me, "confirm_texture.window">
  [  6] objcall 239 ............................. me.newwindow("confirm_texture.window")
  [  8] pusharglistnoret 0 ...................... <>
  [ 10] extcall 374 ............................. updateStage()
  [ 13] pushsymb 503 ............................ <#setfloor>
  [ 16] getparam 4 .............................. <iFloorTexture>
  [ 18] getparam 5 .............................. <iFloorColor>
  [ 20] pusharglistnoret 3 ...................... <#setfloor, iFloorTexture, iFloorColor>
  [ 22] extcall 375 ............................. sendAllSprites(#setfloor, iFloorTexture, iFloorColor)
  [ 25] pushsymb 504 ............................ <#setwalls>
  [ 28] getparam 2 .............................. <iWallTexture>
  [ 30] getparam 3 .............................. <iWallColor>
  [ 32] pusharglistnoret 3 ...................... <#setwalls, iWallTexture, iWallColor>
  [ 34] extcall 375 ............................. sendAllSprites(#setwalls, iWallTexture, iWallColor)
  [ 37] pushsymb 505 ............................ <#displayPattern>
  [ 40] pusharglistnoret 1 ...................... <#displayPattern>
  [ 42] extcall 375 ............................. sendAllSprites(#displayPattern)
  [ 45] pushcons 171 ............................ <"cc.confirm.texture">
  [ 47] pusharglist 1 ........................... <"cc.confirm.texture">
  [ 49] extcall 34 .............................. <member("cc.confirm.texture")>
  [ 51] getglobal 91 ............................ <TextMgr>
  [ 53] pushcons 173 ............................ <"REPLACE_FLOOR">
  [ 55] pusharglist 2 ........................... <TextMgr, "REPLACE_FLOOR">
  [ 57] objcall 93 .............................. <TextMgr.GetRefText("REPLACE_FLOOR")>
  [ 59] setobjprop 78 ........................... member("cc.confirm.texture").text = TextMgr.GetRefText("REPLACE_FLOOR")
  [ 61] pushsymb 506 ............................ <#getokreplace>
  [ 64] pusharglist 1 ........................... <#getokreplace>
  [ 66] extcall 375 ............................. <sendAllSprites(#getokreplace)>
  [ 69] setlocal 0 .............................. okbutton = sendAllSprites(#getokreplace)
  [ 71] getlocal 0 .............................. <okbutton>
  [ 73] pusharglist 1 ........................... <okbutton>
  [ 75] extcall 36 .............................. <sprite(okbutton)>
  [ 77] pushsymb 514 ............................ <#floor>
  [ 80] setobjprop 508 .......................... sprite(okbutton).pType = #floor
  [ 83] getlocal 0 .............................. <okbutton>
  [ 85] pusharglist 1 ........................... <okbutton>
  [ 87] extcall 36 .............................. <sprite(okbutton)>
  [ 89] getparam 1 .............................. <iPosId>
  [ 91] setobjprop 509 .......................... sprite(okbutton).iPosId = iPosId
  [ 94] getlocal 0 .............................. <okbutton>
  [ 96] pusharglist 1 ........................... <okbutton>
  [ 98] extcall 36 .............................. <sprite(okbutton)>
  [100] getparam 4 .............................. <iFloorTexture>
  [102] setobjprop 512 .......................... sprite(okbutton).iFloorTexture = iFloorTexture
  [105] getlocal 0 .............................. <okbutton>
  [107] pusharglist 1 ........................... <okbutton>
  [109] extcall 36 .............................. <sprite(okbutton)>
  [111] getparam 5 .............................. <iFloorColor>
  [113] setobjprop 513 .......................... sprite(okbutton).iFloorColor = iFloorColor
  [116] ret
end

on updatefloor me, iFloorTexture, iFloorColor
  [  0] pusharglist 0 ........................... <[:]>
  [  2] pushproplist ............................ <[:]>
  [  3] setlocal 0 .............................. aPatterns = [:]
  [  5] pushcons 174 ............................ <"Catalogue">
  [  7] setlocal 1 .............................. sAssetCast = "Catalogue"
  [  9] pushcons 175 ............................ <"cat_floorpattern_patterns_index">
  [ 11] getlocal 1 .............................. <sAssetCast>
  [ 13] pusharglist 2 ........................... <"cat_floorpattern_patterns_index", sAssetCast>
  [ 15] extcall 34 .............................. <member("cat_floorpattern_patterns_index", sAssetCast)>
  [ 17] setlocal 2 .............................. oPatternMember = member("cat_floorpattern_patterns_index", sAssetCast)
  [ 19] getlocal 2 .............................. <oPatternMember>
  [ 21] getobjprop 78 ........................... <oPatternMember.text>
  [ 23] setlocal 3 .............................. sPatternText = oPatternMember.text
  [ 25] pushint8 1 .............................. <1>
  [ 27] setlocal 4
  [ 29] getlocal 4
  [ 31] getlocal 3 .............................. <sPatternText>
  [ 33] pushsymb 515 ............................ <#lines>
  [ 36] pusharglist 2 ........................... <sPatternText, #lines>
  [ 38] objcall 29 .............................. <sPatternText.lines.count>
  [ 40] lteq
  [ 41] jmpifz [174] ............................ repeat with i = 1 to sPatternText.lines.count
  [ 44] getlocal 3 .............................. <sPatternText>
  [ 46] pushsymb 97 ............................. <#line>
  [ 48] getlocal 4 .............................. <i>
  [ 50] pusharglist 3 ........................... <sPatternText, #line, i>
  [ 52] objcall 149 ............................. <sPatternText.line[i]>
  [ 54] setlocal 5 .............................. sPatternLine = sPatternText.line[i]
  [ 56] getlocal 5 .............................. <sPatternLine>
  [ 58] pusharglist 1 ........................... <sPatternLine>
  [ 60] extcall 316 ............................. <value(sPatternLine)>
  [ 63] setlocal 6 .............................. aPatternList = value(sPatternLine)
  [ 65] getlocal 6 .............................. <aPatternList>
  [ 67] getobjprop 21 ........................... <aPatternList.name>
  [ 69] setlocal 7 .............................. sPatternName = aPatternList.name
  [ 71] getlocal 6 .............................. <aPatternList>
  [ 73] getobjprop 102 .......................... <aPatternList.field>
  [ 75] setlocal 8 .............................. sColorField = aPatternList.field
  [ 77] pusharglist 0 ........................... <[]>
  [ 79] pushlist ................................ <[]>
  [ 80] setlocal 9 .............................. aColors = []
  [ 82] getlocal 8 .............................. <sColorField>
  [ 84] getlocal 1 .............................. <sAssetCast>
  [ 86] pusharglist 2 ........................... <sColorField, sAssetCast>
  [ 88] extcall 34 .............................. <member(sColorField, sAssetCast)>
  [ 90] setlocal 10 ............................. oColorsMember = member(sColorField, sAssetCast)
  [ 92] getlocal 10 ............................. <oColorsMember>
  [ 94] getobjprop 78 ........................... <oColorsMember.text>
  [ 96] setlocal 11 ............................. sColorsText = oColorsMember.text
  [ 98] pushint8 1 .............................. <1>
  [100] setlocal 12
  [102] getlocal 12
  [104] getlocal 11 ............................. <sColorsText>
  [106] pushsymb 515 ............................ <#lines>
  [109] pusharglist 2 ........................... <sColorsText, #lines>
  [111] objcall 29 .............................. <sColorsText.lines.count>
  [113] lteq
  [114] jmpifz [155] ............................ repeat with ii = 1 to sColorsText.lines.count
  [117] getlocal 11 ............................. <sColorsText>
  [119] pushsymb 97 ............................. <#line>
  [121] getlocal 12 ............................. <ii>
  [123] pusharglist 3 ........................... <sColorsText, #line, ii>
  [125] objcall 149 ............................. <sColorsText.line[ii]>
  [127] setlocal 13 ............................. sColorLine = sColorsText.line[ii]
  [129] getlocal 13 ............................. <sColorLine>
  [131] pusharglist 1 ........................... <sColorLine>
  [133] extcall 316 ............................. <value(sColorLine)>
  [136] setlocal 14 ............................. aColorsList = value(sColorLine)
  [138] getlocal 9 .............................. <aColors>
  [140] getlocal 14 ............................. <aColorsList>
  [142] pusharglistnoret 2 ...................... <aColors, aColorsList>
  [144] objcall 81 .............................. aColors.add(aColorsList)
  [146] pushint8 1
  [148] getlocal 12
  [150] add
  [151] setlocal 12
  [153] endrepeat [102]
  [155] getlocal 0 .............................. <aPatterns>
  [157] getlocal 7 .............................. <sPatternName>
  [159] getlocal 9 .............................. <aColors>
  [161] pusharglistnoret 3 ...................... <aPatterns, sPatternName, aColors>
  [163] objcall 58 .............................. aPatterns.addProp(sPatternName, aColors)
  [165] pushint8 1
  [167] getlocal 4
  [169] add
  [170] setlocal 4
  [172] endrepeat [ 29]
  [174] pushsymb 516 ............................ <#getFloorShapeSpritereplace>
  [177] pusharglist 1 ........................... <#getFloorShapeSpritereplace>
  [179] extcall 375 ............................. <sendAllSprites(#getFloorShapeSpritereplace)>
  [182] setlocal 15 ............................. iFloorShapeSprite = sendAllSprites(#getFloorShapeSpritereplace)
  [184] pushsymb 517 ............................ <#getFloorTextureSpriteReplace>
  [187] pusharglist 1 ........................... <#getFloorTextureSpriteReplace>
  [189] extcall 375 ............................. <sendAllSprites(#getFloorTextureSpriteReplace)>
  [192] setlocal 16 ............................. iFloorTextureSprite = sendAllSprites(#getFloorTextureSpriteReplace)
  [194] getlocal 0 .............................. <aPatterns>
  [196] getparam 1 .............................. <iFloorTexture>
  [198] pusharglist 2 ........................... <aPatterns, iFloorTexture>
  [200] objcall 44 .............................. <aPatterns[iFloorTexture]>
  [202] getparam 2 .............................. <iFloorColor>
  [204] pusharglist 2 ........................... <aPatterns[iFloorTexture], iFloorColor>
  [206] objcall 44 .............................. <aPatterns[iFloorTexture][iFloorColor]>
  [208] setlocal 17 ............................. aColorData = aPatterns[iFloorTexture][iFloorColor]
  [210] getlocal 15 ............................. <iFloorShapeSprite>
  [212] pusharglist 1 ........................... <iFloorShapeSprite>
  [214] extcall 36 .............................. <sprite(iFloorShapeSprite)>
  [216] getchainedprop 34 ....................... <sprite(iFloorShapeSprite).member>
  [218] getlocal 17 ............................. <aColorData>
  [220] getobjprop 518 .......................... <aColorData.startcolor>
  [223] setobjprop 519 .......................... sprite(iFloorShapeSprite).member.fillColor = aColorData.startcolor
  [226] getlocal 15 ............................. <iFloorShapeSprite>
  [228] pusharglist 1 ........................... <iFloorShapeSprite>
  [230] extcall 36 .............................. <sprite(iFloorShapeSprite)>
  [232] getchainedprop 34 ....................... <sprite(iFloorShapeSprite).member>
  [234] getlocal 17 ............................. <aColorData>
  [236] getobjprop 520 .......................... <aColorData.endColor>
  [239] setobjprop 520 .......................... sprite(iFloorShapeSprite).member.endColor = aColorData.endColor
  [242] getlocal 15 ............................. <iFloorShapeSprite>
  [244] pusharglist 1 ........................... <iFloorShapeSprite>
  [246] extcall 36 .............................. <sprite(iFloorShapeSprite)>
  [248] getlocal 17 ............................. <aColorData>
  [250] getobjprop 521 .......................... <aColorData.shapeBlend>
  [253] setobjprop 41 ........................... sprite(iFloorShapeSprite).blend = aColorData.shapeBlend
  [255] getlocal 16 ............................. <iFloorTextureSprite>
  [257] pusharglist 1 ........................... <iFloorTextureSprite>
  [259] extcall 36 .............................. <sprite(iFloorTextureSprite)>
  [261] getchainedprop 34 ....................... <sprite(iFloorTextureSprite).member>
  [263] pushcons 176 ............................ <"cat_floor_">
  [265] getlocal 17 ............................. <aColorData>
  [267] getobjprop 522 .......................... <aColorData.palette>
  [270] joinstr ................................. <"cat_floor_" & aColorData.palette>
  [271] getlocal 1 .............................. <sAssetCast>
  [273] pusharglist 2 ........................... <"cat_floor_" & aColorData.palette, sAssetCast>
  [275] extcall 34 .............................. <member("cat_floor_" & aColorData.palette, sAssetCast)>
  [277] setobjprop 522 .......................... sprite(iFloorTextureSprite).member.palette = member("cat_floor_" & aColorData.palette, sAssetCast)
  [280] getlocal 15 ............................. <iFloorShapeSprite>
  [282] pusharglist 1 ........................... <iFloorShapeSprite>
  [284] extcall 36 .............................. <sprite(iFloorShapeSprite)>
  [286] getlocal 17 ............................. <aColorData>
  [288] getobjprop 523 .......................... <aColorData.texturecolor>
  [291] setobjprop 48 ........................... sprite(iFloorShapeSprite).color = aColorData.texturecolor
  [293] getlocal 16 ............................. <iFloorTextureSprite>
  [295] pusharglist 1 ........................... <iFloorTextureSprite>
  [297] extcall 36 .............................. <sprite(iFloorTextureSprite)>
  [299] getlocal 17 ............................. <aColorData>
  [301] getobjprop 524 .......................... <aColorData.textureBlend>
  [304] setobjprop 41 ........................... sprite(iFloorTextureSprite).blend = aColorData.textureBlend
  [306] ret
end

on updatewalls me, iPatternIndex, iColorIndex
  [  0] pushcons 174 ............................ <"Catalogue">
  [  2] setlocal 0 .............................. sAssetCast = "Catalogue"
  [  4] pushsymb 542 ............................ <#getLeftWallSpriteReplace>
  [  7] pusharglist 1 ........................... <#getLeftWallSpriteReplace>
  [  9] extcall 375 ............................. <sendAllSprites(#getLeftWallSpriteReplace)>
  [ 12] setlocal 1 .............................. iLeftWallSprite = sendAllSprites(#getLeftWallSpriteReplace)
  [ 14] pushsymb 543 ............................ <#getRightWallSpriteReplace>
  [ 17] pusharglist 1 ........................... <#getRightWallSpriteReplace>
  [ 19] extcall 375 ............................. <sendAllSprites(#getRightWallSpriteReplace)>
  [ 22] setlocal 2 .............................. iRightWallSprite = sendAllSprites(#getRightWallSpriteReplace)
  [ 24] pushsymb 544 ............................ <#getLeftWallTextureSpriteReplace>
  [ 27] pusharglist 1 ........................... <#getLeftWallTextureSpriteReplace>
  [ 29] extcall 375 ............................. <sendAllSprites(#getLeftWallTextureSpriteReplace)>
  [ 32] setlocal 3 .............................. iLeftWallTextureSprite = sendAllSprites(#getLeftWallTextureSpriteReplace)
  [ 34] pushsymb 545 ............................ <#getRightWallTextureSpriteReplace>
  [ 37] pusharglist 1 ........................... <#getRightWallTextureSpriteReplace>
  [ 39] extcall 375 ............................. <sendAllSprites(#getRightWallTextureSpriteReplace)>
  [ 42] setlocal 4 .............................. iRightWallTextureSprite = sendAllSprites(#getRightWallTextureSpriteReplace)
  [ 44] pushsymb 546 ............................ <#getWallBackgroundSpritereplace>
  [ 47] pusharglist 1 ........................... <#getWallBackgroundSpritereplace>
  [ 49] extcall 375 ............................. <sendAllSprites(#getWallBackgroundSpritereplace)>
  [ 52] setlocal 5 .............................. iWallBackgroundsprite = sendAllSprites(#getWallBackgroundSpritereplace)
  [ 54] pusharglist 0 ........................... <[:]>
  [ 56] pushproplist ............................ <[:]>
  [ 57] setlocal 6 .............................. aPatterns = [:]
  [ 59] pushcons 177 ............................ <"cat_wallpattern_patterns_index">
  [ 61] getlocal 0 .............................. <sAssetCast>
  [ 63] pusharglist 2 ........................... <"cat_wallpattern_patterns_index", sAssetCast>
  [ 65] extcall 34 .............................. <member("cat_wallpattern_patterns_index", sAssetCast)>
  [ 67] setlocal 7 .............................. oPatternMember = member("cat_wallpattern_patterns_index", sAssetCast)
  [ 69] getlocal 7 .............................. <oPatternMember>
  [ 71] getobjprop 78 ........................... <oPatternMember.text>
  [ 73] setlocal 8 .............................. sPatternText = oPatternMember.text
  [ 75] pushint8 1 .............................. <1>
  [ 77] setlocal 9
  [ 79] getlocal 9
  [ 81] getlocal 8 .............................. <sPatternText>
  [ 83] pushsymb 515 ............................ <#lines>
  [ 86] pusharglist 2 ........................... <sPatternText, #lines>
  [ 88] objcall 29 .............................. <sPatternText.lines.count>
  [ 90] lteq
  [ 91] jmpifz [224] ............................ repeat with i = 1 to sPatternText.lines.count
  [ 94] getlocal 8 .............................. <sPatternText>
  [ 96] pushsymb 97 ............................. <#line>
  [ 98] getlocal 9 .............................. <i>
  [100] pusharglist 3 ........................... <sPatternText, #line, i>
  [102] objcall 149 ............................. <sPatternText.line[i]>
  [104] setlocal 10 ............................. sPatternLine = sPatternText.line[i]
  [106] getlocal 10 ............................. <sPatternLine>
  [108] pusharglist 1 ........................... <sPatternLine>
  [110] extcall 316 ............................. <value(sPatternLine)>
  [113] setlocal 11 ............................. aPatternList = value(sPatternLine)
  [115] getlocal 11 ............................. <aPatternList>
  [117] getobjprop 21 ........................... <aPatternList.name>
  [119] setlocal 12 ............................. sPatternName = aPatternList.name
  [121] getlocal 11 ............................. <aPatternList>
  [123] getobjprop 102 .......................... <aPatternList.field>
  [125] setlocal 13 ............................. sColorField = aPatternList.field
  [127] pusharglist 0 ........................... <[]>
  [129] pushlist ................................ <[]>
  [130] setlocal 14 ............................. aColors = []
  [132] getlocal 13 ............................. <sColorField>
  [134] getlocal 0 .............................. <sAssetCast>
  [136] pusharglist 2 ........................... <sColorField, sAssetCast>
  [138] extcall 34 .............................. <member(sColorField, sAssetCast)>
  [140] setlocal 15 ............................. oColorsMember = member(sColorField, sAssetCast)
  [142] getlocal 15 ............................. <oColorsMember>
  [144] getobjprop 78 ........................... <oColorsMember.text>
  [146] setlocal 16 ............................. sColorsText = oColorsMember.text
  [148] pushint8 1 .............................. <1>
  [150] setlocal 17
  [152] getlocal 17
  [154] getlocal 16 ............................. <sColorsText>
  [156] pushsymb 515 ............................ <#lines>
  [159] pusharglist 2 ........................... <sColorsText, #lines>
  [161] objcall 29 .............................. <sColorsText.lines.count>
  [163] lteq
  [164] jmpifz [205] ............................ repeat with ii = 1 to sColorsText.lines.count
  [167] getlocal 16 ............................. <sColorsText>
  [169] pushsymb 97 ............................. <#line>
  [171] getlocal 17 ............................. <ii>
  [173] pusharglist 3 ........................... <sColorsText, #line, ii>
  [175] objcall 149 ............................. <sColorsText.line[ii]>
  [177] setlocal 18 ............................. sColorLine = sColorsText.line[ii]
  [179] getlocal 18 ............................. <sColorLine>
  [181] pusharglist 1 ........................... <sColorLine>
  [183] extcall 316 ............................. <value(sColorLine)>
  [186] setlocal 19 ............................. aColorsList = value(sColorLine)
  [188] getlocal 14 ............................. <aColors>
  [190] getlocal 19 ............................. <aColorsList>
  [192] pusharglistnoret 2 ...................... <aColors, aColorsList>
  [194] objcall 81 .............................. aColors.add(aColorsList)
  [196] pushint8 1
  [198] getlocal 17
  [200] add
  [201] setlocal 17
  [203] endrepeat [152]
  [205] getlocal 6 .............................. <aPatterns>
  [207] getlocal 12 ............................. <sPatternName>
  [209] getlocal 14 ............................. <aColors>
  [211] pusharglistnoret 3 ...................... <aPatterns, sPatternName, aColors>
  [213] objcall 58 .............................. aPatterns.addProp(sPatternName, aColors)
  [215] pushint8 1
  [217] getlocal 9
  [219] add
  [220] setlocal 9
  [222] endrepeat [ 79]
  [224] getlocal 6 .............................. <aPatterns>
  [226] getparam 1 .............................. <iPatternIndex>
  [228] pusharglist 2 ........................... <aPatterns, iPatternIndex>
  [230] objcall 44 .............................. <aPatterns[iPatternIndex]>
  [232] getparam 2 .............................. <iColorIndex>
  [234] pusharglist 2 ........................... <aPatterns[iPatternIndex], iColorIndex>
  [236] objcall 44 .............................. <aPatterns[iPatternIndex][iColorIndex]>
  [238] setlocal 20 ............................. aColorData = aPatterns[iPatternIndex][iColorIndex]
  [240] getlocal 20 ............................. <aColorData>
  [242] getobjprop 547 .......................... <aColorData.dirtStyle>
  [245] pushint8 1 .............................. <1>
  [247] eq ...................................... <aColorData.dirtStyle = 1>
  [248] jmpifz [283] ............................ if aColorData.dirtStyle = 1 then
  [251] getlocal 1 .............................. <iLeftWallSprite>
  [253] pusharglist 1 ........................... <iLeftWallSprite>
  [255] extcall 36 .............................. <sprite(iLeftWallSprite)>
  [257] pushcons 178 ............................ <"cat_left_wall_1_b_0_0_0">
  [259] getlocal 0 .............................. <sAssetCast>
  [261] pusharglist 2 ........................... <"cat_left_wall_1_b_0_0_0", sAssetCast>
  [263] extcall 34 .............................. <member("cat_left_wall_1_b_0_0_0", sAssetCast)>
  [265] setobjprop 34 ........................... sprite(iLeftWallSprite).member = member("cat_left_wall_1_b_0_0_0", sAssetCast)
  [267] getlocal 2 .............................. <iRightWallSprite>
  [269] pusharglist 1 ........................... <iRightWallSprite>
  [271] extcall 36 .............................. <sprite(iRightWallSprite)>
  [273] pushcons 179 ............................ <"cat_right_wall_1_b_0_0_0">
  [275] getlocal 0 .............................. <sAssetCast>
  [277] pusharglist 2 ........................... <"cat_right_wall_1_b_0_0_0", sAssetCast>
  [279] extcall 34 .............................. <member("cat_right_wall_1_b_0_0_0", sAssetCast)>
  [281] setobjprop 34 ........................... sprite(iRightWallSprite).member = member("cat_right_wall_1_b_0_0_0", sAssetCast)
  [283] getlocal 20 ............................. <aColorData>
  [285] getobjprop 547 .......................... <aColorData.dirtStyle>
  [288] pushint8 2 .............................. <2>
  [290] eq ...................................... <aColorData.dirtStyle = 2>
  [291] jmpifz [326] ............................ if aColorData.dirtStyle = 2 then
  [294] getlocal 1 .............................. <iLeftWallSprite>
  [296] pusharglist 1 ........................... <iLeftWallSprite>
  [298] extcall 36 .............................. <sprite(iLeftWallSprite)>
  [300] pushcons 180 ............................ <"cat_left_wall_2_b_0_0_0">
  [302] getlocal 0 .............................. <sAssetCast>
  [304] pusharglist 2 ........................... <"cat_left_wall_2_b_0_0_0", sAssetCast>
  [306] extcall 34 .............................. <member("cat_left_wall_2_b_0_0_0", sAssetCast)>
  [308] setobjprop 34 ........................... sprite(iLeftWallSprite).member = member("cat_left_wall_2_b_0_0_0", sAssetCast)
  [310] getlocal 2 .............................. <iRightWallSprite>
  [312] pusharglist 1 ........................... <iRightWallSprite>
  [314] extcall 36 .............................. <sprite(iRightWallSprite)>
  [316] pushcons 181 ............................ <"cat_right_wall_2_b_0_0_0">
  [318] getlocal 0 .............................. <sAssetCast>
  [320] pusharglist 2 ........................... <"cat_right_wall_2_b_0_0_0", sAssetCast>
  [322] extcall 34 .............................. <member("cat_right_wall_2_b_0_0_0", sAssetCast)>
  [324] setobjprop 34 ........................... sprite(iRightWallSprite).member = member("cat_right_wall_2_b_0_0_0", sAssetCast)
  [326] getlocal 1 .............................. <iLeftWallSprite>
  [328] pusharglist 1 ........................... <iLeftWallSprite>
  [330] extcall 36 .............................. <sprite(iLeftWallSprite)>
  [332] getlocal 20 ............................. <aColorData>
  [334] getobjprop 48 ........................... <aColorData.color>
  [336] setobjprop 48 ........................... sprite(iLeftWallSprite).color = aColorData.color
  [338] getlocal 2 .............................. <iRightWallSprite>
  [340] pusharglist 1 ........................... <iRightWallSprite>
  [342] extcall 36 .............................. <sprite(iRightWallSprite)>
  [344] getlocal 20 ............................. <aColorData>
  [346] getobjprop 48 ........................... <aColorData.color>
  [348] setobjprop 48 ........................... sprite(iRightWallSprite).color = aColorData.color
  [350] getlocal 1 .............................. <iLeftWallSprite>
  [352] pusharglist 1 ........................... <iLeftWallSprite>
  [354] extcall 36 .............................. <sprite(iLeftWallSprite)>
  [356] getlocal 20 ............................. <aColorData>
  [358] getobjprop 49 ........................... <aColorData.bgColor>
  [360] setobjprop 49 ........................... sprite(iLeftWallSprite).bgColor = aColorData.bgColor
  [362] getlocal 2 .............................. <iRightWallSprite>
  [364] pusharglist 1 ........................... <iRightWallSprite>
  [366] extcall 36 .............................. <sprite(iRightWallSprite)>
  [368] getlocal 20 ............................. <aColorData>
  [370] getobjprop 49 ........................... <aColorData.bgColor>
  [372] setobjprop 49 ........................... sprite(iRightWallSprite).bgColor = aColorData.bgColor
  [374] getlocal 1 .............................. <iLeftWallSprite>
  [376] pusharglist 1 ........................... <iLeftWallSprite>
  [378] extcall 36 .............................. <sprite(iLeftWallSprite)>
  [380] getlocal 20 ............................. <aColorData>
  [382] getobjprop 548 .......................... <aColorData.dirtBlend>
  [385] setobjprop 41 ........................... sprite(iLeftWallSprite).blend = aColorData.dirtBlend
  [387] getlocal 2 .............................. <iRightWallSprite>
  [389] pusharglist 1 ........................... <iRightWallSprite>
  [391] extcall 36 .............................. <sprite(iRightWallSprite)>
  [393] getlocal 20 ............................. <aColorData>
  [395] getobjprop 548 .......................... <aColorData.dirtBlend>
  [398] setobjprop 41 ........................... sprite(iRightWallSprite).blend = aColorData.dirtBlend
  [400] getlocal 3 .............................. <iLeftWallTextureSprite>
  [402] pusharglist 1 ........................... <iLeftWallTextureSprite>
  [404] extcall 36 .............................. <sprite(iLeftWallTextureSprite)>
  [406] getchainedprop 34 ....................... <sprite(iLeftWallTextureSprite).member>
  [408] pushcons 182 ............................ <"cat_left_wall_">
  [410] getlocal 20 ............................. <aColorData>
  [412] getobjprop 522 .......................... <aColorData.palette>
  [415] joinstr ................................. <"cat_left_wall_" & aColorData.palette>
  [416] getlocal 0 .............................. <sAssetCast>
  [418] pusharglist 2 ........................... <"cat_left_wall_" & aColorData.palette, sAssetCast>
  [420] extcall 34 .............................. <member("cat_left_wall_" & aColorData.palette, sAssetCast)>
  [422] setobjprop 522 .......................... sprite(iLeftWallTextureSprite).member.palette = member("cat_left_wall_" & aColorData.palette, sAssetCast)
  [425] getlocal 4 .............................. <iRightWallTextureSprite>
  [427] pusharglist 1 ........................... <iRightWallTextureSprite>
  [429] extcall 36 .............................. <sprite(iRightWallTextureSprite)>
  [431] getchainedprop 34 ....................... <sprite(iRightWallTextureSprite).member>
  [433] pushcons 183 ............................ <"cat_right_wall_">
  [435] getlocal 20 ............................. <aColorData>
  [437] getobjprop 522 .......................... <aColorData.palette>
  [440] joinstr ................................. <"cat_right_wall_" & aColorData.palette>
  [441] getlocal 0 .............................. <sAssetCast>
  [443] pusharglist 2 ........................... <"cat_right_wall_" & aColorData.palette, sAssetCast>
  [445] extcall 34 .............................. <member("cat_right_wall_" & aColorData.palette, sAssetCast)>
  [447] setobjprop 522 .......................... sprite(iRightWallTextureSprite).member.palette = member("cat_right_wall_" & aColorData.palette, sAssetCast)
  [450] getlocal 3 .............................. <iLeftWallTextureSprite>
  [452] pusharglist 1 ........................... <iLeftWallTextureSprite>
  [454] extcall 36 .............................. <sprite(iLeftWallTextureSprite)>
  [456] getlocal 20 ............................. <aColorData>
  [458] getobjprop 524 .......................... <aColorData.textureBlend>
  [461] setobjprop 41 ........................... sprite(iLeftWallTextureSprite).blend = aColorData.textureBlend
  [463] getlocal 4 .............................. <iRightWallTextureSprite>
  [465] pusharglist 1 ........................... <iRightWallTextureSprite>
  [467] extcall 36 .............................. <sprite(iRightWallTextureSprite)>
  [469] getlocal 20 ............................. <aColorData>
  [471] getobjprop 524 .......................... <aColorData.textureBlend>
  [474] setobjprop 41 ........................... sprite(iRightWallTextureSprite).blend = aColorData.textureBlend
  [476] ret
end

on displayDeleteConfirm me, iPosId
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 184 ............................ <"delete_item.window">
  [  4] pusharglistnoret 2 ...................... <me, "delete_item.window">
  [  6] objcall 239 ............................. me.newwindow("delete_item.window")
  [  8] pusharglistnoret 0 ...................... <>
  [ 10] extcall 374 ............................. updateStage()
  [ 13] pushsymb 556 ............................ <#getdeleteok>
  [ 16] pusharglist 1 ........................... <#getdeleteok>
  [ 18] extcall 375 ............................. <sendAllSprites(#getdeleteok)>
  [ 21] setlocal 0 .............................. oksprite = sendAllSprites(#getdeleteok)
  [ 23] getlocal 0 .............................. <oksprite>
  [ 25] pusharglist 1 ........................... <oksprite>
  [ 27] extcall 12 .............................. <voidp(oksprite)>
  [ 29] jmpifz [ 41] ............................ if voidp(oksprite) then / else
  [ 32] pushcons 185 ............................ <"can't find delete ok sprite">
  [ 34] pusharglistnoret 1 ...................... <"can't find delete ok sprite">
  [ 36] localcall 10 ............................ alert("can't find delete ok sprite")
  [ 38] jmp [ 52]
  [ 41] getlocal 0 .............................. <oksprite>
  [ 43] pusharglist 1 ........................... <oksprite>
  [ 45] extcall 36 .............................. <sprite(oksprite)>
  [ 47] getparam 1 .............................. <iPosId>
  [ 49] setobjprop 509 .......................... sprite(oksprite).iPosId = iPosId
  [ 52] ret
end

on mouseIsOverBackpack me
  [  0] pushsymb 558 ............................ <#getBackpackBackgroundSprite>
  [  3] pusharglist 1 ........................... <#getBackpackBackgroundSprite>
  [  5] extcall 375 ............................. <sendAllSprites(#getBackpackBackgroundSprite)>
  [  8] setlocal 0 .............................. iBackpackSprite = sendAllSprites(#getBackpackBackgroundSprite)
  [ 10] getlocal 0 .............................. <iBackpackSprite>
  [ 12] pusharglist 1 ........................... <iBackpackSprite>
  [ 14] extcall 12 .............................. <voidp(iBackpackSprite)>
  [ 16] jmpifz [ 24] ............................ if voidp(iBackpackSprite) then
  [ 19] pushzero ................................ <0>
  [ 20] pusharglistnoret 1 ...................... <0>
  [ 22] extcall 23 .............................. return 0
  [ 24] getlocal 0 .............................. <iBackpackSprite>
  [ 26] pusharglist 1 ........................... <iBackpackSprite>
  [ 28] extcall 559 ............................. <rollover(iBackpackSprite)>
  [ 31] pusharglistnoret 1 ...................... <rollover(iBackpackSprite)>
  [ 33] extcall 23 .............................. return rollover(iBackpackSprite)
  [ 35] ret
end

on mouseIsOverWindow me
  [  0] pushint8 1 .............................. <1>
  [  2] setlocal 0
  [  4] getlocal 0
  [  6] getglobal 30 ............................ <ElementMgr>
  [  8] getobjprop 31 ........................... <ElementMgr.pOpenWindows>
  [ 10] pusharglist 1 ........................... <ElementMgr.pOpenWindows>
  [ 12] extcall 29 .............................. <count(ElementMgr.pOpenWindows)>
  [ 14] lteq
  [ 15] jmpifz [ 98] ............................ repeat with n = 1 to count(ElementMgr.pOpenWindows)
  [ 18] pushint8 1 .............................. <1>
  [ 20] setlocal 1
  [ 22] getlocal 1
  [ 24] getglobal 30 ............................ <ElementMgr>
  [ 26] pushsymb 31 ............................. <#pOpenWindows>
  [ 28] getlocal 0 .............................. <n>
  [ 30] pusharglist 3 ........................... <ElementMgr, #pOpenWindows, n>
  [ 32] objcall 98 .............................. <ElementMgr.pOpenWindows[n]>
  [ 34] getobjprop 11 ........................... <ElementMgr.pOpenWindows[n].pSpritelist>
  [ 36] pusharglist 1 ........................... <ElementMgr.pOpenWindows[n].pSpritelist>
  [ 38] extcall 29 .............................. <count(ElementMgr.pOpenWindows[n].pSpritelist)>
  [ 40] lteq
  [ 41] jmpifz [ 89] ............................ repeat with m = 1 to count(ElementMgr.pOpenWindows[n].pSpritelist)
  [ 44] getglobal 30 ............................ <ElementMgr>
  [ 46] pushsymb 31 ............................. <#pOpenWindows>
  [ 48] getlocal 0 .............................. <n>
  [ 50] pusharglist 3 ........................... <ElementMgr, #pOpenWindows, n>
  [ 52] objcall 98 .............................. <ElementMgr.pOpenWindows[n]>
  [ 54] pushsymb 11 ............................. <#pSpritelist>
  [ 56] getlocal 1 .............................. <m>
  [ 58] pusharglist 3 ........................... <ElementMgr.pOpenWindows[n], #pSpritelist, m>
  [ 60] objcall 149 ............................. <ElementMgr.pOpenWindows[n].pSpritelist[m]>
  [ 62] setlocal 2 .............................. iSprite = ElementMgr.pOpenWindows[n].pSpritelist[m]
  [ 64] getlocal 2 .............................. <iSprite>
  [ 66] pusharglist 1 ........................... <iSprite>
  [ 68] extcall 559 ............................. <rollover(iSprite)>
  [ 71] jmpifz [ 80] ............................ if rollover(iSprite) then
  [ 74] pushint8 1 .............................. <1>
  [ 76] pusharglistnoret 1 ...................... <1>
  [ 78] extcall 23 .............................. return 1
  [ 80] pushint8 1
  [ 82] getlocal 1
  [ 84] add
  [ 85] setlocal 1
  [ 87] endrepeat [ 22]
  [ 89] pushint8 1
  [ 91] getlocal 0
  [ 93] add
  [ 94] setlocal 0
  [ 96] endrepeat [  4]
  [ 98] pushzero ................................ <0>
  [ 99] pusharglistnoret 1 ...................... <0>
  [101] extcall 23 .............................. return 0
  [103] ret
end

on exception me, sMessage
  [  0] ret
end

on getByStudioId_Result iError, foStudio
  [  0] ret
end

on dispenseItem_Result me, iError, aPossessions
  [  0] getparam 0 .............................. <me>
  [  2] pushcons 186 ............................ <"dispensePoster_Result() iError: ">
  [  4] getparam 1 .............................. <iError>
  [  6] joinstr ................................. <"dispensePoster_Result() iError: " & iError>
  [  7] pushcons 187 ............................ <" aPossessions.toString(): ">
  [  9] joinstr ................................. <"dispensePoster_Result() iError: " & iError & " aPossessions.toString(): ">
  [ 10] getparam 2 .............................. <aPossessions>
  [ 12] pusharglist 1 ........................... <aPossessions>
  [ 14] objcall 563 ............................. <aPossessions.toString()>
  [ 17] joinstr ................................. <"dispensePoster_Result() iError: " & iError & " aPossessions.toString(): " & aPossessions.toString()>
  [ 18] pushint8 1 .............................. <1>
  [ 20] pusharglistnoret 3 ...................... <me, "dispensePoster_Result() iError: " & iError & " aPossessions.toString(): " & aPossessions.toString(), 1>
  [ 22] objcall 1 ............................... me.debug("dispensePoster_Result() iError: " & iError & " aPossessions.toString(): " & aPossessions.toString(), 1)
  [ 24] getparam 0 .............................. <me>
  [ 26] pushcons 188 ............................ <"cc_dispenseitem_success.window">
  [ 28] pusharglist 2 ........................... <me, "cc_dispenseitem_success.window">
  [ 30] objcall 239 ............................. <me.newwindow("cc_dispenseitem_success.window")>
  [ 32] setlocal 0 .............................. capwindow = me.newwindow("cc_dispenseitem_success.window")
  [ 34] getparam 1 .............................. <iError>
  [ 36] pushint8 1 .............................. <1>
  [ 38] eq ...................................... <iError = 1>
  [ 39] jmpifz [ 85] ............................ if iError = 1 then / else
  [ 42] getglobal 79 ............................ <oDenizenManager>
  [ 44] pusharglist 1 ........................... <oDenizenManager>
  [ 46] objcall 455 ............................. <oDenizenManager.getBackpack()>
  [ 49] setlocal 1 .............................. oBackPack = oDenizenManager.getBackpack()
  [ 51] getlocal 1 .............................. <oBackPack>
  [ 53] pusharglist 1 ........................... <oBackPack>
  [ 55] extcall 12 .............................. <voidp(oBackPack)>
  [ 57] not ..................................... <not voidp(oBackPack)>
  [ 58] jmpifz [ 72] ............................ if not voidp(oBackPack) then
  [ 61] getlocal 1 .............................. <oBackPack>
  [ 63] getparam 2 .............................. <aPossessions>
  [ 65] pushint8 1 .............................. <1>
  [ 67] pusharglistnoret 3 ...................... <oBackPack, aPossessions, 1>
  [ 69] objcall 456 ............................. oBackPack.addPossessions(aPossessions, 1)
  [ 72] getglobal 91 ............................ <TextMgr>
  [ 74] pushcons 189 ............................ <"DISPENSE_ITEM_SUCCESS">
  [ 76] pusharglist 2 ........................... <TextMgr, "DISPENSE_ITEM_SUCCESS">
  [ 78] objcall 93 .............................. <TextMgr.GetRefText("DISPENSE_ITEM_SUCCESS")>
  [ 80] setlocal 2 .............................. mytext = TextMgr.GetRefText("DISPENSE_ITEM_SUCCESS")
  [ 82] jmp [ 95]
  [ 85] getglobal 91 ............................ <TextMgr>
  [ 87] pushcons 190 ............................ <"DISPENSE_ITEM_FAIL">
  [ 89] pusharglist 2 ........................... <TextMgr, "DISPENSE_ITEM_FAIL">
  [ 91] objcall 93 .............................. <TextMgr.GetRefText("DISPENSE_ITEM_FAIL")>
  [ 93] setlocal 2 .............................. mytext = TextMgr.GetRefText("DISPENSE_ITEM_FAIL")
  [ 95] pushcons 191 ............................ <"cc.dispenseitem.text">
  [ 97] pusharglist 1 ........................... <"cc.dispenseitem.text">
  [ 99] extcall 34 .............................. <member("cc.dispenseitem.text")>
  [101] getlocal 2 .............................. <mytext>
  [103] setobjprop 78 ........................... member("cc.dispenseitem.text").text = mytext
  [105] ret
end

on isPublicStudioWindowOpen me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 31 ........................... <me.pOpenWindows>
  [  4] pusharglist 1 ........................... <me.pOpenWindows>
  [  6] extcall 29 .............................. <count(me.pOpenWindows)>
  [  8] setlocal 0
  [ 10] getlocal 0
  [ 12] pushint8 1 .............................. <1>
  [ 14] gteq
  [ 15] jmpifz [ 59] ............................ repeat with n = count(me.pOpenWindows) down to 1
  [ 18] getparam 0 .............................. <me>
  [ 20] pushsymb 31 ............................. <#pOpenWindows>
  [ 22] getlocal 0 .............................. <n>
  [ 24] pusharglist 3 ........................... <me, #pOpenWindows, n>
  [ 26] objcall 149 ............................. <me.pOpenWindows[n]>
  [ 28] setlocal 1 .............................. _oWindow = me.pOpenWindows[n]
  [ 30] getlocal 1 .............................. <_oWindow>
  [ 32] getobjprop 13 ........................... <_oWindow.pname>
  [ 34] setlocal 2 .............................. _sWindowName = _oWindow.pname
  [ 36] getlocal 2 .............................. <_sWindowName>
  [ 38] pushcons 7 .............................. <"nav_public">
  [ 40] contains0str ............................ <_sWindowName starts "nav_public">
  [ 41] jmpifz [ 50] ............................ if _sWindowName starts "nav_public" then
  [ 44] pushint8 1 .............................. <1>
  [ 46] pusharglistnoret 1 ...................... <1>
  [ 48] extcall 23 .............................. return 1
  [ 50] pushint8 -1
  [ 52] getlocal 0
  [ 54] add
  [ 55] setlocal 0
  [ 57] endrepeat [ 10]
  [ 59] pushzero ................................ <0>
  [ 60] pusharglistnoret 1 ...................... <0>
  [ 62] extcall 23 .............................. return 0
  [ 64] ret
end

on isPrivateStudioWindowOpen me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 31 ........................... <me.pOpenWindows>
  [  4] pusharglist 1 ........................... <me.pOpenWindows>
  [  6] extcall 29 .............................. <count(me.pOpenWindows)>
  [  8] setlocal 0
  [ 10] getlocal 0
  [ 12] pushint8 1 .............................. <1>
  [ 14] gteq
  [ 15] jmpifz [ 59] ............................ repeat with n = count(me.pOpenWindows) down to 1
  [ 18] getparam 0 .............................. <me>
  [ 20] pushsymb 31 ............................. <#pOpenWindows>
  [ 22] getlocal 0 .............................. <n>
  [ 24] pusharglist 3 ........................... <me, #pOpenWindows, n>
  [ 26] objcall 149 ............................. <me.pOpenWindows[n]>
  [ 28] setlocal 1 .............................. _oWindow = me.pOpenWindows[n]
  [ 30] getlocal 1 .............................. <_oWindow>
  [ 32] getobjprop 13 ........................... <_oWindow.pname>
  [ 34] setlocal 2 .............................. _sWindowName = _oWindow.pname
  [ 36] getlocal 2 .............................. <_sWindowName>
  [ 38] pushcons 4 .............................. <"nav_private">
  [ 40] contains0str ............................ <_sWindowName starts "nav_private">
  [ 41] jmpifz [ 50] ............................ if _sWindowName starts "nav_private" then
  [ 44] pushint8 1 .............................. <1>
  [ 46] pusharglistnoret 1 ...................... <1>
  [ 48] extcall 23 .............................. return 1
  [ 50] pushint8 -1
  [ 52] getlocal 0
  [ 54] add
  [ 55] setlocal 0
  [ 57] endrepeat [ 10]
  [ 59] pushzero ................................ <0>
  [ 60] pusharglistnoret 1 ...................... <0>
  [ 62] extcall 23 .............................. return 0
  [ 64] ret
end

on getOpenWindowNames me
  [  0] pusharglist 0 ........................... <[]>
  [  2] pushlist ................................ <[]>
  [  3] setlocal 0 .............................. aList = []
  [  5] getparam 0 .............................. <me>
  [  7] getobjprop 31 ........................... <me.pOpenWindows>
  [  9] pusharglist 1 ........................... <me.pOpenWindows>
  [ 11] extcall 12 .............................. <voidp(me.pOpenWindows)>
  [ 13] jmpifz [ 22] ............................ if voidp(me.pOpenWindows) then
  [ 16] getlocal 0 .............................. <aList>
  [ 18] pusharglistnoret 1 ...................... <aList>
  [ 20] extcall 23 .............................. return aList
  [ 22] getparam 0 .............................. <me>
  [ 24] getobjprop 31 ........................... <me.pOpenWindows>
  [ 26] pusharglist 1 ........................... <me.pOpenWindows>
  [ 28] extcall 29 .............................. <count(me.pOpenWindows)>
  [ 30] setlocal 1 .............................. iOpenWindowCount = count(me.pOpenWindows)
  [ 32] getlocal 1 .............................. <iOpenWindowCount>
  [ 34] pushzero ................................ <0>
  [ 35] eq ...................................... <iOpenWindowCount = 0>
  [ 36] jmpifz [ 45] ............................ if iOpenWindowCount = 0 then
  [ 39] getlocal 0 .............................. <aList>
  [ 41] pusharglistnoret 1 ...................... <aList>
  [ 43] extcall 23 .............................. return aList
  [ 45] getparam 0 .............................. <me>
  [ 47] getobjprop 31 ........................... <me.pOpenWindows>
  [ 49] pusharglist 1 ........................... <me.pOpenWindows>
  [ 51] extcall 29 .............................. <count(me.pOpenWindows)>
  [ 53] setlocal 2
  [ 55] getlocal 2
  [ 57] pushint8 1 .............................. <1>
  [ 59] gteq
  [ 60] jmpifz [ 98] ............................ repeat with n = count(me.pOpenWindows) down to 1
  [ 63] getparam 0 .............................. <me>
  [ 65] pushsymb 31 ............................. <#pOpenWindows>
  [ 67] getlocal 2 .............................. <n>
  [ 69] pusharglist 3 ........................... <me, #pOpenWindows, n>
  [ 71] objcall 149 ............................. <me.pOpenWindows[n]>
  [ 73] setlocal 3 .............................. _oWindow = me.pOpenWindows[n]
  [ 75] getlocal 3 .............................. <_oWindow>
  [ 77] getobjprop 13 ........................... <_oWindow.pname>
  [ 79] setlocal 4 .............................. _sWindowName = _oWindow.pname
  [ 81] getlocal 0 .............................. <aList>
  [ 83] getlocal 4 .............................. <_sWindowName>
  [ 85] pusharglistnoret 2 ...................... <aList, _sWindowName>
  [ 87] objcall 81 .............................. aList.add(_sWindowName)
  [ 89] pushint8 -1
  [ 91] getlocal 2
  [ 93] add
  [ 94] setlocal 2
  [ 96] endrepeat [ 55]
  [ 98] getlocal 0 .............................. <aList>
  [100] pusharglistnoret 1 ...................... <aList>
  [102] extcall 23 .............................. return aList
  [104] ret
end
