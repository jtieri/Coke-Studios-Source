property spriteNum, mySprite, myname, myContent, myAction, myCheckmark, myStandard, myListMember, myField, myItemsList, myRestoreString, myDisplayString, myItemHeight, myOpenRect, myClosedRect, myClosedLoc, myOpenHeight, myStageHeight, myStageWidth, mySelectedItem, myListIsOpen, myClickTicks, myLastHilite, myoriginaleditablestate, myoriginallocz

on getBehaviorDescription me
  [  0] pushcons 0 .............................. <"DROPDOWN LIST">
  [  2] pushcons 1 .............................. <RETURN>
  [  4] joinstr ................................. <"DROPDOWN LIST" & RETURN>
  [  5] pushcons 1 .............................. <RETURN>
  [  7] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN>
  [  8] pushcons 2 .............................. <"Drop this behavior on a field member to create a pop-up list. ">
  [ 10] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. ">
  [ 11] pushcons 3 .............................. <"Animations continue while the the list is kept open.">
  [ 13] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open.">
  [ 14] pushcons 1 .............................. <RETURN>
  [ 16] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN>
  [ 17] pushcons 1 .............................. <RETURN>
  [ 19] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN>
  [ 20] pushcons 4 .............................. <"When the user clicks on the sprite, the dropdown list opens to reveal all its items. ">
  [ 22] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. ">
  [ 23] pushcons 5 .............................. <"If the user immediately releases the mouse, the menu remains open until the next click. ">
  [ 25] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. ">
  [ 26] pushcons 6 .............................. <"When the user selects a menu item, the menu closes up to displays the selected item. ">
  [ 28] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. ">
  [ 29] pushcons 7 .............................. <"If the user clicks elsewhere, the menu closes to display the previously selected item.">
  [ 31] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item.">
  [ 32] pushcons 1 .............................. <RETURN>
  [ 34] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN>
  [ 35] pushcons 1 .............................. <RETURN>
  [ 37] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN>
  [ 38] pushcons 8 .............................. <"You can use one of two modes for the dropdown list:">
  [ 40] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:">
  [ 41] pushcons 1 .............................. <RETURN>
  [ 43] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN>
  [ 44] pushcons 9 .............................. <"1) To allow the user to make a selection.">
  [ 46] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection.">
  [ 47] pushcons 1 .............................. <RETURN>
  [ 49] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN>
  [ 50] pushcons 10 ............................. <"2) To execute a simple command.">
  [ 52] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command.">
  [ 53] pushcons 1 .............................. <RETURN>
  [ 55] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN>
  [ 56] pushcons 1 .............................. <RETURN>
  [ 58] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN>
  [ 59] pushcons 11 ............................. <"SELECTION">
  [ 61] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION">
  [ 62] pushcons 1 .............................. <RETURN>
  [ 64] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN>
  [ 65] pushcons 1 .............................. <RETURN>
  [ 67] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN>
  [ 68] pushcons 12 ............................. <"In the first case, you will need to determine what the user selected. ">
  [ 70] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. ">
  [ 71] pushcons 13 ............................. <"To interrogate the dropdown list, use syntax similar to the following:">
  [ 73] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:">
  [ 74] pushcons 1 .............................. <RETURN>
  [ 76] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN>
  [ 77] pushcons 1 .............................. <RETURN>
  [ 79] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN>
  [ 80] pushcons 14 ............................. <"   put sendAllSprites (#DropList_Selection, 'listName')">
  [ 82] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')">
  [ 83] pushcons 1 .............................. <RETURN>
  [ 85] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN>
  [ 86] pushcons 1 .............................. <RETURN>
  [ 88] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN>
  [ 89] pushcons 15 ............................. <"This returns a property list with all the necessary information:">
  [ 91] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:">
  [ 92] pushcons 1 .............................. <RETURN>
  [ 94] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN>
  [ 95] pushcons 1 .............................. <RETURN>
  [ 97] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN>
  [ 98] pushcons 16 ............................. <"-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]">
  [100] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]">
  [101] pushcons 1 .............................. <RETURN>
  [103] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN>
  [104] pushcons 1 .............................. <RETURN>
  [106] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN>
  [107] pushcons 17 ............................. <"See the Notes for developers in the script itself for more details.">
  [109] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details.">
  [110] pushcons 1 .............................. <RETURN>
  [112] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN>
  [113] pushcons 1 .............................. <RETURN>
  [115] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN>
  [116] pushcons 18 ............................. <"You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. ">
  [118] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. ">
  [119] pushcons 19 ............................. <"Depending on the font you use, you may wish to use a checkmark followed by a space. ">
  [121] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. ">
  [122] pushcons 20 ............................. <"Reopen the Behavior Parameters dialog to make such a change.">
  [124] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change.">
  [125] pushcons 1 .............................. <RETURN>
  [127] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN>
  [128] pushcons 1 .............................. <RETURN>
  [130] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN>
  [131] pushcons 21 ............................. <"EXECUTION">
  [133] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION">
  [134] pushcons 1 .............................. <RETURN>
  [136] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN>
  [137] pushcons 1 .............................. <RETURN>
  [139] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN>
  [140] pushcons 22 ............................. <"You can choose to execute three types of command:">
  [142] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:">
  [143] pushcons 1 .............................. <RETURN>
  [145] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN>
  [146] pushcons 23 ............................. <"a) go marker (<selected item>)">
  [148] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)">
  [149] pushcons 1 .............................. <RETURN>
  [151] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN>
  [152] pushcons 24 ............................. <"b) go movie '<selected item>'">
  [154] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'">
  [155] pushcons 1 .............................. <RETURN>
  [157] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN>
  [158] pushcons 25 ............................. <"c) do '<selected item>'">
  [160] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'">
  [161] pushcons 1 .............................. <RETURN>
  [163] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN>
  [164] pushcons 1 .............................. <RETURN>
  [166] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN>
  [167] pushcons 26 ............................. <"The type of command depends on the contents of the list. ">
  [169] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. ">
  [170] pushcons 27 ............................. <"The behavior can automatically create a list of markers in the current movie, or movies in the current folder... ">
  [172] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... ">
  [173] pushcons 28 ............................. <"or it can leave the contents of the field as they are. ">
  [175] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. ">
  [176] pushcons 29 ............................. <"In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. ">
  [178] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. ">
  [179] pushcons 30 ............................. <"You should include handlers in a movie script to deal with such commands.">
  [181] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands.">
  [182] pushcons 1 .............................. <RETURN>
  [184] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN>
  [185] pushcons 1 .............................. <RETURN>
  [187] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN>
  [188] pushcons 31 ............................. <"TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites.">
  [190] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites.">
  [191] pushcons 1 .............................. <RETURN>
  [193] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN>
  [194] pushcons 1 .............................. <RETURN>
  [196] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN>
  [197] pushcons 32 ............................. <"PERMITTED MEMBER TYPES:">
  [199] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:">
  [200] pushcons 1 .............................. <RETURN>
  [202] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN>
  [203] pushcons 33 ............................. <"field">
  [205] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field">
  [206] pushcons 1 .............................. <RETURN>
  [208] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN>
  [209] pushcons 1 .............................. <RETURN>
  [211] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN>
  [212] pushcons 34 ............................. <"PARAMETERS:">
  [214] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:">
  [215] pushcons 1 .............................. <RETURN>
  [217] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN>
  [218] pushcons 35 ............................. <"* Name of the list (used in sendAllSprite calls)">
  [220] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)">
  [221] pushcons 1 .............................. <RETURN>
  [223] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN>
  [224] pushcons 36 ............................. <"* Purpose - Choose between:">
  [226] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:">
  [227] pushcons 1 .............................. <RETURN>
  [229] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN>
  [230] pushcons 37 ............................. <"  - Marker: creates a list of markers in current movie">
  [232] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie">
  [233] pushcons 1 .............................. <RETURN>
  [235] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN>
  [236] pushcons 38 ............................. <"  - Movie: creates a list of movies with the same pathName">
  [238] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName">
  [239] pushcons 1 .............................. <RETURN>
  [241] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN>
  [242] pushcons 39 ............................. <"  - Field contents: uses the current contents of the field">
  [244] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field">
  [245] pushcons 1 .............................. <RETURN>
  [247] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN>
  [248] pushcons 40 ............................. <"* Action on selection - Choose between:">
  [250] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:">
  [251] pushcons 1 .............................. <RETURN>
  [253] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN>
  [254] pushcons 41 ............................. <"  - Execute: go movie | go marker | do selectedLine">
  [256] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine">
  [257] pushcons 1 .............................. <RETURN>
  [259] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN>
  [260] pushcons 42 ............................. <"  - Select:  return the selected item if called to do so">
  [262] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN & "  - Select:  return the selected item if called to do so">
  [263] pushcons 1 .............................. <RETURN>
  [265] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN & "  - Select:  return the selected item if called to do so" & RETURN>
  [266] pushcons 43 ............................. <"* Checkmark to indicate currently selected item">
  [268] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN & "  - Select:  return the selected item if called to do so" & RETURN & "* Checkmark to indicate currently selected item">
  [269] pushcons 1 .............................. <RETURN>
  [271] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN & "  - Select:  return the selected item if called to do so" & RETURN & "* Checkmark to indicate currently selected item" & RETURN>
  [272] pushcons 44 ............................. <"* Standard style: deselect this option if you want to give the field member a particular border, margin or shadow.">
  [274] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN & "  - Select:  return the selected item if called to do so" & RETURN & "* Checkmark to indicate currently selected item" & RETURN & "* Standard style: deselect this option if you want to give the field member a particular border, margin or shadow.">
  [275] pushcons 1 .............................. <RETURN>
  [277] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN & "  - Select:  return the selected item if called to do so" & RETURN & "* Checkmark to indicate currently selected item" & RETURN & "* Standard style: deselect this option if you want to give the field member a particular border, margin or shadow." & RETURN>
  [278] pushcons 1 .............................. <RETURN>
  [280] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN & "  - Select:  return the selected item if called to do so" & RETURN & "* Checkmark to indicate currently selected item" & RETURN & "* Standard style: deselect this option if you want to give the field member a particular border, margin or shadow." & RETURN & RETURN>
  [281] pushcons 45 ............................. <"PUBLIC METHODS:">
  [283] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN & "  - Select:  return the selected item if called to do so" & RETURN & "* Checkmark to indicate currently selected item" & RETURN & "* Standard style: deselect this option if you want to give the field member a particular border, margin or shadow." & RETURN & RETURN & "PUBLIC METHODS:">
  [284] pushcons 1 .............................. <RETURN>
  [286] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN & "  - Select:  return the selected item if called to do so" & RETURN & "* Checkmark to indicate currently selected item" & RETURN & "* Standard style: deselect this option if you want to give the field member a particular border, margin or shadow." & RETURN & RETURN & "PUBLIC METHODS:" & RETURN>
  [287] pushcons 46 ............................. <"* Get info on currently selected item">
  [289] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN & "  - Select:  return the selected item if called to do so" & RETURN & "* Checkmark to indicate currently selected item" & RETURN & "* Standard style: deselect this option if you want to give the field member a particular border, margin or shadow." & RETURN & RETURN & "PUBLIC METHODS:" & RETURN & "* Get info on currently selected item">
  [290] pushcons 1 .............................. <RETURN>
  [292] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN & "  - Select:  return the selected item if called to do so" & RETURN & "* Checkmark to indicate currently selected item" & RETURN & "* Standard style: deselect this option if you want to give the field member a particular border, margin or shadow." & RETURN & RETURN & "PUBLIC METHODS:" & RETURN & "* Get info on currently selected item" & RETURN>
  [293] pushcons 47 ............................. <"* Set the contents of the dropdown list">
  [295] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN & "  - Select:  return the selected item if called to do so" & RETURN & "* Checkmark to indicate currently selected item" & RETURN & "* Standard style: deselect this option if you want to give the field member a particular border, margin or shadow." & RETURN & RETURN & "PUBLIC METHODS:" & RETURN & "* Get info on currently selected item" & RETURN & "* Set the contents of the dropdown list">
  [296] pushcons 1 .............................. <RETURN>
  [298] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN & "  - Select:  return the selected item if called to do so" & RETURN & "* Checkmark to indicate currently selected item" & RETURN & "* Standard style: deselect this option if you want to give the field member a particular border, margin or shadow." & RETURN & RETURN & "PUBLIC METHODS:" & RETURN & "* Get info on currently selected item" & RETURN & "* Set the contents of the dropdown list" & RETURN>
  [299] pushcons 48 ............................. <"* Toggle between Execute and Select modes">
  [301] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN & "  - Select:  return the selected item if called to do so" & RETURN & "* Checkmark to indicate currently selected item" & RETURN & "* Standard style: deselect this option if you want to give the field member a particular border, margin or shadow." & RETURN & RETURN & "PUBLIC METHODS:" & RETURN & "* Get info on currently selected item" & RETURN & "* Set the contents of the dropdown list" & RETURN & "* Toggle between Execute and Select modes">
  [302] pushcons 1 .............................. <RETURN>
  [304] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN & "  - Select:  return the selected item if called to do so" & RETURN & "* Checkmark to indicate currently selected item" & RETURN & "* Standard style: deselect this option if you want to give the field member a particular border, margin or shadow." & RETURN & RETURN & "PUBLIC METHODS:" & RETURN & "* Get info on currently selected item" & RETURN & "* Set the contents of the dropdown list" & RETURN & "* Toggle between Execute and Select modes" & RETURN>
  [305] pushcons 49 ............................. <"* Get behavior reference">
  [307] joinstr ................................. <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN & "  - Select:  return the selected item if called to do so" & RETURN & "* Checkmark to indicate currently selected item" & RETURN & "* Standard style: deselect this option if you want to give the field member a particular border, margin or shadow." & RETURN & RETURN & "PUBLIC METHODS:" & RETURN & "* Get info on currently selected item" & RETURN & "* Set the contents of the dropdown list" & RETURN & "* Toggle between Execute and Select modes" & RETURN & "* Get behavior reference">
  [308] pusharglistnoret 1 ...................... <"DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN & "  - Select:  return the selected item if called to do so" & RETURN & "* Checkmark to indicate currently selected item" & RETURN & "* Standard style: deselect this option if you want to give the field member a particular border, margin or shadow." & RETURN & RETURN & "PUBLIC METHODS:" & RETURN & "* Get info on currently selected item" & RETURN & "* Set the contents of the dropdown list" & RETURN & "* Toggle between Execute and Select modes" & RETURN & "* Get behavior reference">
  [310] extcall 28 .............................. return "DROPDOWN LIST" & RETURN & RETURN & "Drop this behavior on a field member to create a pop-up list. " & "Animations continue while the the list is kept open." & RETURN & RETURN & "When the user clicks on the sprite, the dropdown list opens to reveal all its items. " & "If the user immediately releases the mouse, the menu remains open until the next click. " & "When the user selects a menu item, the menu closes up to displays the selected item. " & "If the user clicks elsewhere, the menu closes to display the previously selected item." & RETURN & RETURN & "You can use one of two modes for the dropdown list:" & RETURN & "1) To allow the user to make a selection." & RETURN & "2) To execute a simple command." & RETURN & RETURN & "SELECTION" & RETURN & RETURN & "In the first case, you will need to determine what the user selected. " & "To interrogate the dropdown list, use syntax similar to the following:" & RETURN & RETURN & "   put sendAllSprites (#DropList_Selection, 'listName')" & RETURN & RETURN & "This returns a property list with all the necessary information:" & RETURN & RETURN & "-- [#item: 1, #text: 'First choice', #type: #content, #sprite: 1]" & RETURN & RETURN & "See the Notes for developers in the script itself for more details." & RETURN & RETURN & "You can choose any character to act as a checkmark to indicate the previous selection when the dropdown list is open. " & "Depending on the font you use, you may wish to use a checkmark followed by a space. " & "Reopen the Behavior Parameters dialog to make such a change." & RETURN & RETURN & "EXECUTION" & RETURN & RETURN & "You can choose to execute three types of command:" & RETURN & "a) go marker (<selected item>)" & RETURN & "b) go movie '<selected item>'" & RETURN & "c) do '<selected item>'" & RETURN & RETURN & "The type of command depends on the contents of the list. " & "The behavior can automatically create a list of markers in the current movie, or movies in the current folder... " & "or it can leave the contents of the field as they are. " & "In this last case, choosing Execute makes the behavior treat the selected item as a Lingo command. " & "You should include handlers in a movie script to deal with such commands." & RETURN & RETURN & "TIP: Place the dropdown list sprite in a high channel where it will not be covered by any other sprites." & RETURN & RETURN & "PERMITTED MEMBER TYPES:" & RETURN & "field" & RETURN & RETURN & "PARAMETERS:" & RETURN & "* Name of the list (used in sendAllSprite calls)" & RETURN & "* Purpose - Choose between:" & RETURN & "  - Marker: creates a list of markers in current movie" & RETURN & "  - Movie: creates a list of movies with the same pathName" & RETURN & "  - Field contents: uses the current contents of the field" & RETURN & "* Action on selection - Choose between:" & RETURN & "  - Execute: go movie | go marker | do selectedLine" & RETURN & "  - Select:  return the selected item if called to do so" & RETURN & "* Checkmark to indicate currently selected item" & RETURN & "* Standard style: deselect this option if you want to give the field member a particular border, margin or shadow." & RETURN & RETURN & "PUBLIC METHODS:" & RETURN & "* Get info on currently selected item" & RETURN & "* Set the contents of the dropdown list" & RETURN & "* Toggle between Execute and Select modes" & RETURN & "* Get behavior reference"
  [312] ret
end

on getBehaviorTooltip me
  [  0] pushcons 50 ............................. <"Use with field members only.">
  [  2] pushcons 1 .............................. <RETURN>
  [  4] joinstr ................................. <"Use with field members only." & RETURN>
  [  5] pushcons 1 .............................. <RETURN>
  [  7] joinstr ................................. <"Use with field members only." & RETURN & RETURN>
  [  8] pushcons 51 ............................. <"Turn a field into a pop-up list to execute commands or store selected data. ">
  [ 10] joinstr ................................. <"Use with field members only." & RETURN & RETURN & "Turn a field into a pop-up list to execute commands or store selected data. ">
  [ 11] pushcons 52 ............................. <"See the Behavior Description for tips on executing items with the 'do' command or accessing the currently selected item using Lingo.">
  [ 13] joinstr ................................. <"Use with field members only." & RETURN & RETURN & "Turn a field into a pop-up list to execute commands or store selected data. " & "See the Behavior Description for tips on executing items with the 'do' command or accessing the currently selected item using Lingo.">
  [ 14] pushcons 1 .............................. <RETURN>
  [ 16] joinstr ................................. <"Use with field members only." & RETURN & RETURN & "Turn a field into a pop-up list to execute commands or store selected data. " & "See the Behavior Description for tips on executing items with the 'do' command or accessing the currently selected item using Lingo." & RETURN>
  [ 17] pushcons 1 .............................. <RETURN>
  [ 19] joinstr ................................. <"Use with field members only." & RETURN & RETURN & "Turn a field into a pop-up list to execute commands or store selected data. " & "See the Behavior Description for tips on executing items with the 'do' command or accessing the currently selected item using Lingo." & RETURN & RETURN>
  [ 20] pushcons 53 ............................. <"Options: Create a list of movies with the same path name, or a list of markers in the current movie.">
  [ 22] joinstr ................................. <"Use with field members only." & RETURN & RETURN & "Turn a field into a pop-up list to execute commands or store selected data. " & "See the Behavior Description for tips on executing items with the 'do' command or accessing the currently selected item using Lingo." & RETURN & RETURN & "Options: Create a list of movies with the same path name, or a list of markers in the current movie.">
  [ 23] pusharglistnoret 1 ...................... <"Use with field members only." & RETURN & RETURN & "Turn a field into a pop-up list to execute commands or store selected data. " & "See the Behavior Description for tips on executing items with the 'do' command or accessing the currently selected item using Lingo." & RETURN & RETURN & "Options: Create a list of movies with the same path name, or a list of markers in the current movie.">
  [ 25] extcall 28 .............................. return "Use with field members only." & RETURN & RETURN & "Turn a field into a pop-up list to execute commands or store selected data. " & "See the Behavior Description for tips on executing items with the 'do' command or accessing the currently selected item using Lingo." & RETURN & RETURN & "Options: Create a list of movies with the same path name, or a list of markers in the current movie."
  [ 27] ret
end

on beginSprite me
  [  0] getparam 0 .............................. <me>
  [  2] pusharglistnoret 1 ...................... <me>
  [  4] localcall 17 ............................ Initialize(me)
  [  6] ret
end

on endSprite me
  [  0] getprop 202 ............................. <myListMember>
  [  2] getprop 203 ............................. <myoriginaleditablestate>
  [  4] setobjprop 204 .......................... myListMember.editable = myoriginaleditablestate
  [  6] getprop 205 ............................. <mySprite>
  [  8] getprop 206 ............................. <myoriginallocz>
  [ 10] setobjprop 207 .......................... mySprite.locZ = myoriginallocz
  [ 12] ret
end

on mouseDown me
  [  0] getprop 208 ............................. <myListIsOpen>
  [  2] not ..................................... <not myListIsOpen>
  [  3] jmpifz [ 12] ............................ if not myListIsOpen then
  [  6] getparam 0 .............................. <me>
  [  8] pusharglistnoret 1 ...................... <me>
  [ 10] localcall 9 ............................. OpenList(me)
  [ 12] ret
end

on prepareFrame me
  [  0] getparam 0 .............................. <me>
  [  2] pusharglistnoret 1 ...................... <me>
  [  4] localcall 8 ............................. CheckListState(me)
  [  6] ret
end

on mouseUp me
  [  0] getparam 0 .............................. <me>
  [  2] pusharglistnoret 1 ...................... <me>
  [  4] localcall 12 ............................ CheckClick(me)
  [  6] ret
end

on mouseUpOutSide me
  [  0] getparam 0 .............................. <me>
  [  2] pusharglistnoret 1 ...................... <me>
  [  4] localcall 15 ............................ CloseList(me)
  [  6] ret
end

on CheckListState me
  [  0] getprop 208 ............................. <myListIsOpen>
  [  2] jmpifz [ 33] ............................ if myListIsOpen then / else
  [  5] pusharglist 0 ........................... <>
  [  7] thebuiltin 209 .......................... <the clickOn>
  [  9] getprop 210 ............................. <spriteNum>
  [ 11] nteq .................................... <the clickOn <> spriteNum>
  [ 12] jmpifz [ 24] ............................ if the clickOn <> spriteNum then / else
  [ 15] getparam 0 .............................. <me>
  [ 17] pusharglistnoret 1 ...................... <me>
  [ 19] localcall 15 ............................ CloseList(me)
  [ 21] jmp [ 30]
  [ 24] getparam 0 .............................. <me>
  [ 26] pusharglistnoret 1 ...................... <me>
  [ 28] localcall 10 ............................ HiliteSelection(me)
  [ 30] jmp [ 73]
  [ 33] getprop 211 ............................. <myContent>
  [ 35] pushsymb 212 ............................ <#marker>
  [ 37] eq ...................................... <myContent = #marker>
  [ 38] getprop 213 ............................. <myAction>
  [ 40] and ..................................... <(myContent = #marker) and myAction>
  [ 41] jmpifz [ 73] ............................ if (myContent = #marker) and myAction then
  [ 44] getparam 0 .............................. <me>
  [ 46] pusharglist 1 ........................... <me>
  [ 48] localcall 25 ............................ <GetCurrentMarker(me)>
  [ 50] setlocal 0 .............................. markerNumber = GetCurrentMarker(me)
  [ 52] getprop 214 ............................. <mySelectedItem>
  [ 54] getlocal 0 .............................. <markerNumber>
  [ 56] eq ...................................... <mySelectedItem = markerNumber>
  [ 57] jmpifz [ 61] ............................ if mySelectedItem = markerNumber then
  [ 60] ret ..................................... exit
  [ 61] getlocal 0 .............................. <markerNumber>
  [ 63] setprop 214 ............................. mySelectedItem = markerNumber
  [ 65] getparam 0 .............................. <me>
  [ 67] getprop 214 ............................. <mySelectedItem>
  [ 69] pusharglistnoret 2 ...................... <me, mySelectedItem>
  [ 71] localcall 13 ............................ ScrollTo(me, mySelectedItem)
  [ 73] ret
end

on OpenList me
  [  0] getprop 205 ............................. <mySprite>
  [  2] pusharglist 0 ........................... <>
  [  4] thebuiltin 216 .......................... <the maxinteger>
  [  6] setobjprop 207 .......................... mySprite.locZ = the maxinteger
  [  8] pusharglist 0 ........................... <>
  [ 10] thebuiltin 218 .......................... <the ticks>
  [ 12] setprop 217 ............................. myClickTicks = the ticks
  [ 14] pushint8 1 .............................. <1>
  [ 16] setprop 208 ............................. myListIsOpen = 1
  [ 18] getprop 220 ............................. <myRestoreString>
  [ 20] setprop 219 ............................. myDisplayString = myRestoreString
  [ 22] getprop 213 ............................. <myAction>
  [ 24] not ..................................... <not myAction>
  [ 25] jmpifz [ 57] ............................ if not myAction then
  [ 28] getprop 221 ............................. <myCheckmark>
  [ 30] pushvarref 219 .......................... <myDisplayString>
  [ 32] pushchunkvarref 3 ....................... <myDisplayString>
  [ 34] pushsymb 222 ............................ <#line>
  [ 36] getprop 214 ............................. <mySelectedItem>
  [ 38] pusharglist 3 ........................... <myDisplayString, #line, mySelectedItem>
  [ 40] objcall 142 ............................. <myDisplayString.line[mySelectedItem]>
  [ 42] pushsymb 223 ............................ <#char>
  [ 44] pushint8 1 .............................. <1>
  [ 46] pushint8 2 .............................. <2>
  [ 48] pusharglist 4 ........................... <myDisplayString.line[mySelectedItem], #char, 1, 2>
  [ 50] objcall 142 ............................. <myDisplayString.line[mySelectedItem].char[1..2]>
  [ 52] swap
  [ 53] pusharglistnoret 2 ...................... <myDisplayString.line[mySelectedItem].char[1..2], myCheckmark>
  [ 55] objcall 224 ............................. put myCheckmark into myDisplayString.line[mySelectedItem].char[1..2]
  [ 57] getprop 202 ............................. <myListMember>
  [ 59] getprop 219 ............................. <myDisplayString>
  [ 61] setobjprop 95 ........................... myListMember.text = myDisplayString
  [ 63] getprop 202 ............................. <myListMember>
  [ 65] getobjprop 225 .......................... <myListMember.scrollTop>
  [ 67] setlocal 0 .............................. currentScroll = myListMember.scrollTop
  [ 69] getprop 226 ............................. <myOpenHeight>
  [ 71] getprop 227 ............................. <myStageHeight>
  [ 73] lteq .................................... <myOpenHeight <= myStageHeight>
  [ 74] jmpifz [221] ............................ if myOpenHeight <= myStageHeight then / else
  [ 77] getlocal 0 .............................. <currentScroll>
  [ 79] getprop 228 ............................. <myClosedLoc>
  [ 81] pushint8 2 .............................. <2>
  [ 83] pusharglist 2 ........................... <myClosedLoc, 2>
  [ 85] objcall 39 .............................. <myClosedLoc[2]>
  [ 87] sub ..................................... <currentScroll - myClosedLoc[2]>
  [ 88] setlocal 1 .............................. overShoot = currentScroll - myClosedLoc[2]
  [ 90] getlocal 1 .............................. <overShoot>
  [ 92] pushzero ................................ <0>
  [ 93] lt ...................................... <overShoot < 0>
  [ 94] jmpifz [174] ............................ if overShoot < 0 then / else
  [ 97] getprop 226 ............................. <myOpenHeight>
  [ 99] getlocal 1 .............................. <overShoot>
  [101] sub ..................................... <myOpenHeight - overShoot>
  [102] getprop 227 ............................. <myStageHeight>
  [104] sub ..................................... <myOpenHeight - overShoot - myStageHeight>
  [105] setlocal 1 .............................. overShoot = myOpenHeight - overShoot - myStageHeight
  [107] getlocal 1 .............................. <overShoot>
  [109] pushzero ................................ <0>
  [110] lt ...................................... <overShoot < 0>
  [111] jmpifz [132] ............................ if overShoot < 0 then / else
  [114] getprop 205 ............................. <mySprite>
  [116] getprop 228 ............................. <myClosedLoc>
  [118] pushint8 2 .............................. <2>
  [120] pusharglist 2 ........................... <myClosedLoc, 2>
  [122] objcall 39 .............................. <myClosedLoc[2]>
  [124] getlocal 0 .............................. <currentScroll>
  [126] sub ..................................... <myClosedLoc[2] - currentScroll>
  [127] setobjprop 103 .......................... mySprite.locV = myClosedLoc[2] - currentScroll
  [129] jmp [171]
  [132] getlocal 1 .............................. <overShoot>
  [134] pushint8 1 .............................. <1>
  [136] sub ..................................... <overShoot - 1>
  [137] getprop 229 ............................. <myItemHeight>
  [139] div ..................................... <(overShoot - 1) / myItemHeight>
  [140] pushint8 1 .............................. <1>
  [142] add ..................................... <((overShoot - 1) / myItemHeight) + 1>
  [143] setlocal 2 .............................. lineAdjust = ((overShoot - 1) / myItemHeight) + 1
  [145] getlocal 2 .............................. <lineAdjust>
  [147] getprop 229 ............................. <myItemHeight>
  [149] mul ..................................... <lineAdjust * myItemHeight>
  [150] getlocal 1 .............................. <overShoot>
  [152] sub ..................................... <(lineAdjust * myItemHeight) - overShoot>
  [153] setlocal 3 .............................. pixelAdjust = (lineAdjust * myItemHeight) - overShoot
  [155] getprop 227 ............................. <myStageHeight>
  [157] getprop 226 ............................. <myOpenHeight>
  [159] sub ..................................... <myStageHeight - myOpenHeight>
  [160] getlocal 3 .............................. <pixelAdjust>
  [162] sub ..................................... <myStageHeight - myOpenHeight - pixelAdjust>
  [163] setlocal 4 .............................. openTop = myStageHeight - myOpenHeight - pixelAdjust
  [165] getprop 205 ............................. <mySprite>
  [167] getlocal 4 .............................. <openTop>
  [169] setobjprop 103 .......................... mySprite.locV = openTop
  [171] jmp [207]
  [174] getlocal 1 .............................. <overShoot>
  [176] pushint8 1 .............................. <1>
  [178] sub ..................................... <overShoot - 1>
  [179] getprop 229 ............................. <myItemHeight>
  [181] div ..................................... <(overShoot - 1) / myItemHeight>
  [182] pushint8 1 .............................. <1>
  [184] add ..................................... <((overShoot - 1) / myItemHeight) + 1>
  [185] setlocal 2 .............................. lineAdjust = ((overShoot - 1) / myItemHeight) + 1
  [187] getlocal 2 .............................. <lineAdjust>
  [189] getprop 229 ............................. <myItemHeight>
  [191] mul ..................................... <lineAdjust * myItemHeight>
  [192] setlocal 3 .............................. pixelAdjust = lineAdjust * myItemHeight
  [194] getlocal 3 .............................. <pixelAdjust>
  [196] getlocal 1 .............................. <overShoot>
  [198] sub ..................................... <pixelAdjust - overShoot>
  [199] setlocal 4 .............................. openTop = pixelAdjust - overShoot
  [201] getprop 205 ............................. <mySprite>
  [203] getlocal 4 .............................. <openTop>
  [205] setobjprop 103 .......................... mySprite.locV = openTop
  [207] getprop 202 ............................. <myListMember>
  [209] pushzero ................................ <0>
  [210] setobjprop 225 .......................... myListMember.scrollTop = 0
  [212] getprop 202 ............................. <myListMember>
  [214] getprop 230 ............................. <myOpenRect>
  [216] setobjprop 101 .......................... myListMember.rect = myOpenRect
  [218] jmp [312]
  [221] getprop 205 ............................. <mySprite>
  [223] pushint8 2 .............................. <2>
  [225] inv ..................................... <-2>
  [226] setobjprop 103 .......................... mySprite.locV = -2
  [228] getprop 230 ............................. <myOpenRect>
  [230] pusharglist 1 ........................... <myOpenRect>
  [232] objcall 137 ............................. <myOpenRect.duplicate()>
  [234] setlocal 5 .............................. clippedRect = myOpenRect.duplicate()
  [236] getlocal 5 .............................. <clippedRect>
  [238] pushint8 4 .............................. <4>
  [240] getprop 227 ............................. <myStageHeight>
  [242] pusharglistnoret 3 ...................... <clippedRect, 4, myStageHeight>
  [244] objcall 41 .............................. clippedRect[4] = myStageHeight
  [246] getprop 202 ............................. <myListMember>
  [248] getlocal 5 .............................. <clippedRect>
  [250] setobjprop 101 .......................... myListMember.rect = clippedRect
  [252] getprop 202 ............................. <myListMember>
  [254] pushsymb 231 ............................ <#scroll>
  [256] setobjprop 232 .......................... myListMember.boxType = #scroll
  [258] getprop 205 ............................. <mySprite>
  [260] getobjprop 233 .......................... <mySprite.right>
  [262] getprop 234 ............................. <myStageWidth>
  [264] gt ...................................... <mySprite.right > myStageWidth>
  [265] jmpifz [288] ............................ if mySprite.right > myStageWidth then
  [268] getprop 205 ............................. <mySprite>
  [270] getobjprop 233 .......................... <mySprite.right>
  [272] getprop 205 ............................. <mySprite>
  [274] getobjprop 105 .......................... <mySprite.left>
  [276] sub ..................................... <mySprite.right - mySprite.left>
  [277] setlocal 6 .............................. spriteWIdth = mySprite.right - mySprite.left
  [279] getprop 205 ............................. <mySprite>
  [281] getprop 234 ............................. <myStageWidth>
  [283] getlocal 6 .............................. <spriteWIdth>
  [285] sub ..................................... <myStageWidth - spriteWIdth>
  [286] setobjprop 102 .......................... mySprite.locH = myStageWidth - spriteWIdth
  [288] getprop 228 ............................. <myClosedLoc>
  [290] pushint8 2 .............................. <2>
  [292] pusharglist 2 ........................... <myClosedLoc, 2>
  [294] objcall 39 .............................. <myClosedLoc[2]>
  [296] getprop 205 ............................. <mySprite>
  [298] getobjprop 103 .......................... <mySprite.locV>
  [300] sub ..................................... <myClosedLoc[2] - mySprite.locV>
  [301] setlocal 7 .............................. scrollAdjust = myClosedLoc[2] - mySprite.locV
  [303] getprop 202 ............................. <myListMember>
  [305] getlocal 0 .............................. <currentScroll>
  [307] getlocal 7 .............................. <scrollAdjust>
  [309] sub ..................................... <currentScroll - scrollAdjust>
  [310] setobjprop 225 .......................... myListMember.scrollTop = currentScroll - scrollAdjust
  [312] pusharglistnoret 0 ...................... <>
  [314] extcall 151 ............................. updateStage()
  [316] ret
end

on HiliteSelection me
  [  0] pusharglist 0 ........................... <>
  [  2] thebuiltin 243 .......................... <the mouseMember>
  [  4] getprop 202 ............................. <myListMember>
  [  6] nteq .................................... <the mouseMember <> myListMember>
  [  7] jmpifz [ 37] ............................ if the mouseMember <> myListMember then / else
  [ 10] getprop 244 ............................. <myLastHilite>
  [ 12] jmpifz [ 33] ............................ if myLastHilite then
  [ 15] pushzero ................................ <0>
  [ 16] setprop 244 ............................. myLastHilite = 0
  [ 18] pusharglist 0 ........................... <>
  [ 20] thebuiltin 216 .......................... <the maxinteger>
  [ 22] pushzero ................................ <0>
  [ 23] pushzero ................................ <0>
  [ 24] pushzero ................................ <0>
  [ 25] pushzero ................................ <0>
  [ 26] pushzero ................................ <0>
  [ 27] pushzero ................................ <0>
  [ 28] pushzero ................................ <0>
  [ 29] getprop 245 ............................. <myField>
  [ 31] pushzero ................................ <0>
  [ 32] hilitechunk ............................. hilite char the maxinteger of field myField
  [ 33] ret ..................................... exit
  [ 34] jmp [ 79]
  [ 37] getprop 202 ............................. <myListMember>
  [ 39] getobjprop 232 .......................... <myListMember.boxType>
  [ 41] pushsymb 231 ............................ <#scroll>
  [ 43] eq ...................................... <myListMember.boxType = #scroll>
  [ 44] jmpifz [ 53] ............................ if myListMember.boxType = #scroll then
  [ 47] getparam 0 .............................. <me>
  [ 49] pusharglistnoret 1 ...................... <me>
  [ 51] localcall 11 ............................ AutoScroll(me)
  [ 53] pusharglist 0 ........................... <>
  [ 55] extcall 246 ............................. <mouseV()>
  [ 57] getprop 205 ............................. <mySprite>
  [ 59] getobjprop 103 .......................... <mySprite.locV>
  [ 61] sub ..................................... <mouseV() - mySprite.locV>
  [ 62] getprop 202 ............................. <myListMember>
  [ 64] getobjprop 225 .......................... <myListMember.scrollTop>
  [ 66] add ..................................... <mouseV() - mySprite.locV + myListMember.scrollTop>
  [ 67] setlocal 0 .............................. listLocV = mouseV() - mySprite.locV + myListMember.scrollTop
  [ 69] getlocal 0 .............................. <listLocV>
  [ 71] getprop 229 ............................. <myItemHeight>
  [ 73] div ..................................... <listLocV / myItemHeight>
  [ 74] pushint8 1 .............................. <1>
  [ 76] add ..................................... <(listLocV / myItemHeight) + 1>
  [ 77] setlocal 1 .............................. mouseItem = (listLocV / myItemHeight) + 1
  [ 79] getlocal 1 .............................. <mouseItem>
  [ 81] getprop 244 ............................. <myLastHilite>
  [ 83] eq ...................................... <mouseItem = myLastHilite>
  [ 84] jmpifz [ 88] ............................ if mouseItem = myLastHilite then
  [ 87] ret ..................................... exit
  [ 88] getlocal 1 .............................. <mouseItem>
  [ 90] getprop 247 ............................. <myItemsList>
  [ 92] getobjprop 38 ........................... <myItemsList.count>
  [ 94] gt ...................................... <mouseItem > myItemsList.count>
  [ 95] jmpifz [117] ............................ if mouseItem > myItemsList.count then
  [ 98] pushzero ................................ <0>
  [ 99] setprop 244 ............................. myLastHilite = 0
  [101] pusharglist 0 ........................... <>
  [103] thebuiltin 216 .......................... <the maxinteger>
  [105] pushzero ................................ <0>
  [106] pushzero ................................ <0>
  [107] pushzero ................................ <0>
  [108] pushzero ................................ <0>
  [109] pushzero ................................ <0>
  [110] pushzero ................................ <0>
  [111] pushzero ................................ <0>
  [112] getprop 245 ............................. <myField>
  [114] pushzero ................................ <0>
  [115] hilitechunk ............................. hilite char the maxinteger of field myField
  [116] ret ..................................... exit
  [117] getlocal 1 .............................. <mouseItem>
  [119] setprop 244 ............................. myLastHilite = mouseItem
  [121] getlocal 1 .............................. <mouseItem>
  [123] pushint8 1 .............................. <1>
  [125] eq ...................................... <mouseItem = 1>
  [126] jmpifz [136] ............................ if mouseItem = 1 then / else
  [129] pushint8 1 .............................. <1>
  [131] setlocal 2 .............................. firstCharToHilite = 1
  [133] jmp [165]
  [136] pushzero ................................ <0>
  [137] pushzero ................................ <0>
  [138] pushzero ................................ <0>
  [139] pushzero ................................ <0>
  [140] pushzero ................................ <0>
  [141] pushzero ................................ <0>
  [142] pushint8 1 .............................. <1>
  [144] getlocal 1 .............................. <mouseItem>
  [146] pushint8 1 .............................. <1>
  [148] sub ..................................... <mouseItem - 1>
  [149] getprop 219 ............................. <myDisplayString>
  [151] getchunk ................................ <line 1 to mouseItem - 1 of myDisplayString>
  [152] setlocal 3 .............................. textBeforeMouseItem = line 1 to mouseItem - 1 of myDisplayString
  [154] getlocal 3 .............................. <textBeforeMouseItem>
  [156] pushint8 1 .............................. <1>
  [158] get 1 ................................... <the number of chars in textBeforeMouseItem>
  [160] pushint8 2 .............................. <2>
  [162] add ..................................... <the number of chars in textBeforeMouseItem + 2>
  [163] setlocal 2 .............................. firstCharToHilite = the number of chars in textBeforeMouseItem + 2
  [165] pushzero ................................ <0>
  [166] pushzero ................................ <0>
  [167] pushzero ................................ <0>
  [168] pushzero ................................ <0>
  [169] pushzero ................................ <0>
  [170] pushzero ................................ <0>
  [171] getlocal 1 .............................. <mouseItem>
  [173] pushzero ................................ <0>
  [174] getprop 219 ............................. <myDisplayString>
  [176] getchunk ................................ <line mouseItem of myDisplayString>
  [177] pushint8 1 .............................. <1>
  [179] get 1 ................................... <the number of chars in line mouseItem of myDisplayString>
  [181] setlocal 4 .............................. mouseItemLength = the number of chars in line mouseItem of myDisplayString
  [183] getlocal 2 .............................. <firstCharToHilite>
  [185] getlocal 4 .............................. <mouseItemLength>
  [187] add ..................................... <firstCharToHilite + mouseItemLength>
  [188] setlocal 5 .............................. lastCharToHilite = firstCharToHilite + mouseItemLength
  [190] getlocal 2 .............................. <firstCharToHilite>
  [192] getlocal 5 .............................. <lastCharToHilite>
  [194] pushzero ................................ <0>
  [195] pushzero ................................ <0>
  [196] pushzero ................................ <0>
  [197] pushzero ................................ <0>
  [198] pushzero ................................ <0>
  [199] pushzero ................................ <0>
  [200] getprop 245 ............................. <myField>
  [202] pushzero ................................ <0>
  [203] hilitechunk ............................. hilite char firstCharToHilite to lastCharToHilite of field myField
  [204] ret
end

on AutoScroll me
  [  0] getprop 229 ............................. <myItemHeight>
  [  2] pushint8 2 .............................. <2>
  [  4] div ..................................... <myItemHeight / 2>
  [  5] setlocal 0 .............................. scrollDownHeight = myItemHeight / 2
  [  7] getprop 227 ............................. <myStageHeight>
  [  9] getprop 229 ............................. <myItemHeight>
  [ 11] pushint8 2 .............................. <2>
  [ 13] div ..................................... <myItemHeight / 2>
  [ 14] sub ..................................... <myStageHeight - (myItemHeight / 2)>
  [ 15] setlocal 1 .............................. scrollUpHeight = myStageHeight - (myItemHeight / 2)
  [ 17] getprop 202 ............................. <myListMember>
  [ 19] getobjprop 225 .......................... <myListMember.scrollTop>
  [ 21] setlocal 2 .............................. currentScroll = myListMember.scrollTop
  [ 23] pusharglist 0 ........................... <>
  [ 25] extcall 246 ............................. <mouseV()>
  [ 27] getlocal 0 .............................. <scrollDownHeight>
  [ 29] lt ...................................... <mouseV() < scrollDownHeight>
  [ 30] jmpifz [ 61] ............................ if mouseV() < scrollDownHeight then / else
  [ 33] getlocal 2 .............................. <currentScroll>
  [ 35] pushzero ................................ <0>
  [ 36] nteq .................................... <currentScroll <> 0>
  [ 37] jmpifz [ 58] ............................ if currentScroll <> 0 then
  [ 40] getlocal 2 .............................. <currentScroll>
  [ 42] getlocal 0 .............................. <scrollDownHeight>
  [ 44] sub ..................................... <currentScroll - scrollDownHeight>
  [ 45] setlocal 3 .............................. newScroll = currentScroll - scrollDownHeight
  [ 47] getprop 202 ............................. <myListMember>
  [ 49] pushzero ................................ <0>
  [ 50] getlocal 3 .............................. <newScroll>
  [ 52] pusharglist 2 ........................... <0, newScroll>
  [ 54] extcall 254 ............................. <max(0, newScroll)>
  [ 56] setobjprop 225 .......................... myListMember.scrollTop = max(0, newScroll)
  [ 58] jmp [105]
  [ 61] pusharglist 0 ........................... <>
  [ 63] extcall 246 ............................. <mouseV()>
  [ 65] getlocal 1 .............................. <scrollUpHeight>
  [ 67] gt ...................................... <mouseV() > scrollUpHeight>
  [ 68] jmpifz [105] ............................ if mouseV() > scrollUpHeight then
  [ 71] getprop 226 ............................. <myOpenHeight>
  [ 73] getprop 227 ............................. <myStageHeight>
  [ 75] sub ..................................... <myOpenHeight - myStageHeight>
  [ 76] setlocal 4 .............................. maxScroll = myOpenHeight - myStageHeight
  [ 78] getlocal 2 .............................. <currentScroll>
  [ 80] getlocal 4 .............................. <maxScroll>
  [ 82] nteq .................................... <currentScroll <> maxScroll>
  [ 83] jmpifz [105] ............................ if currentScroll <> maxScroll then
  [ 86] getlocal 2 .............................. <currentScroll>
  [ 88] getlocal 0 .............................. <scrollDownHeight>
  [ 90] add ..................................... <currentScroll + scrollDownHeight>
  [ 91] setlocal 3 .............................. newScroll = currentScroll + scrollDownHeight
  [ 93] getprop 202 ............................. <myListMember>
  [ 95] getlocal 4 .............................. <maxScroll>
  [ 97] getlocal 3 .............................. <newScroll>
  [ 99] pusharglist 2 ........................... <maxScroll, newScroll>
  [101] extcall 255 ............................. <min(maxScroll, newScroll)>
  [103] setobjprop 225 .......................... myListMember.scrollTop = min(maxScroll, newScroll)
  [105] ret
end

on CheckClick me
  [  0] pusharglist 0 ........................... <>
  [  2] thebuiltin 218 .......................... <the ticks>
  [  4] getprop 217 ............................. <myClickTicks>
  [  6] sub ..................................... <the ticks - myClickTicks>
  [  7] pushint8 30 ............................. <30>
  [  9] lt ...................................... <(the ticks - myClickTicks) < 30>
  [ 10] jmpifz [ 19] ............................ if (the ticks - myClickTicks) < 30 then / else
  [ 13] pushzero ................................ <0>
  [ 14] setprop 217 ............................. myClickTicks = 0
  [ 16] jmp [ 65]
  [ 19] getprop 244 ............................. <myLastHilite>
  [ 21] jmpifz [ 45] ............................ if myLastHilite then
  [ 24] getprop 244 ............................. <myLastHilite>
  [ 26] setprop 214 ............................. mySelectedItem = myLastHilite
  [ 28] getparam 0 .............................. <me>
  [ 30] getobjprop 210 .......................... <me.spriteNum>
  [ 32] pusharglist 1 ........................... <me.spriteNum>
  [ 34] extcall 261 ............................. <sprite(me.spriteNum)>
  [ 37] pushsymb 262 ............................ <#doAction>
  [ 40] pusharglistnoret 2 ...................... <sprite(me.spriteNum), #doAction>
  [ 42] extcall 260 ............................. sendSprite(sprite(me.spriteNum), #doAction)
  [ 45] getparam 0 .............................. <me>
  [ 47] pusharglistnoret 1 ...................... <me>
  [ 49] localcall 15 ............................ CloseList(me)
  [ 51] getprop 213 ............................. <myAction>
  [ 53] getprop 244 ............................. <myLastHilite>
  [ 55] and ..................................... <myAction and myLastHilite>
  [ 56] jmpifz [ 65] ............................ if myAction and myLastHilite then
  [ 59] getparam 0 .............................. <me>
  [ 61] pusharglistnoret 1 ...................... <me>
  [ 63] localcall 16 ............................ Execute(me)
  [ 65] pushzero ................................ <0>
  [ 66] setprop 244 ............................. myLastHilite = 0
  [ 68] ret
end

on ScrollTo me, theLine
  [  0] getprop 202 ............................. <myListMember>
  [  2] pushint8 10 ............................. <10>
  [  4] inv ..................................... <-10>
  [  5] setobjprop 225 .......................... myListMember.scrollTop = -10
  [  7] getprop 202 ............................. <myListMember>
  [  9] getprop 229 ............................. <myItemHeight>
  [ 11] getparam 1 .............................. <theLine>
  [ 13] pushint8 1 .............................. <1>
  [ 15] sub ..................................... <theLine - 1>
  [ 16] mul ..................................... <myItemHeight * (theLine - 1)>
  [ 17] setobjprop 225 .......................... myListMember.scrollTop = myItemHeight * (theLine - 1)
  [ 19] ret
end

on ScrollToText me, sName, sText
  [  0] getparam 1 .............................. <sName>
  [  2] getprop 264 ............................. <myname>
  [  5] nteq .................................... <sName <> myname>
  [  6] jmpifz [ 10] ............................ if sName <> myname then
  [  9] ret ..................................... exit
  [ 10] pushint8 1 .............................. <1>
  [ 12] setlocal 0
  [ 14] getlocal 0
  [ 16] getprop 247 ............................. <myItemsList>
  [ 18] getobjprop 38 ........................... <myItemsList.count>
  [ 20] lteq
  [ 21] jmpifz [ 73] ............................ repeat with i = 1 to myItemsList.count
  [ 24] getprop 247 ............................. <myItemsList>
  [ 26] getlocal 0 .............................. <i>
  [ 28] pusharglist 2 ........................... <myItemsList, i>
  [ 30] objcall 94 .............................. <myItemsList.getPropAt(i)>
  [ 32] setlocal 1 .............................. iLine = myItemsList.getPropAt(i)
  [ 34] getprop 247 ............................. <myItemsList>
  [ 36] getlocal 0 .............................. <i>
  [ 38] pusharglist 2 ........................... <myItemsList, i>
  [ 40] objcall 39 .............................. <myItemsList[i]>
  [ 42] setlocal 2 .............................. sLineText = myItemsList[i]
  [ 44] getlocal 2 .............................. <sLineText>
  [ 46] getparam 2 .............................. <sText>
  [ 48] eq ...................................... <sLineText = sText>
  [ 49] jmpifz [ 64] ............................ if sLineText = sText then
  [ 52] getparam 0 .............................. <me>
  [ 54] getlocal 1 .............................. <iLine>
  [ 56] pusharglistnoret 2 ...................... <me, iLine>
  [ 58] objcall 183 ............................. me.ScrollTo(iLine)
  [ 60] getlocal 1 .............................. <iLine>
  [ 62] setprop 214 ............................. mySelectedItem = iLine
  [ 64] pushint8 1
  [ 66] getlocal 0
  [ 68] add
  [ 69] setlocal 0
  [ 71] endrepeat [ 14]
  [ 73] ret
end

on CloseList me
  [  0] pusharglist 0 ........................... <>
  [  2] thebuiltin 216 .......................... <the maxinteger>
  [  4] pushzero ................................ <0>
  [  5] pushzero ................................ <0>
  [  6] pushzero ................................ <0>
  [  7] pushzero ................................ <0>
  [  8] pushzero ................................ <0>
  [  9] pushzero ................................ <0>
  [ 10] pushzero ................................ <0>
  [ 11] getprop 245 ............................. <myField>
  [ 13] pushzero ................................ <0>
  [ 14] hilitechunk ............................. hilite char the maxinteger of field myField
  [ 15] getprop 213 ............................. <myAction>
  [ 17] not ..................................... <not myAction>
  [ 18] jmpifz [ 27] ............................ if not myAction then
  [ 21] getprop 202 ............................. <myListMember>
  [ 23] getprop 220 ............................. <myRestoreString>
  [ 25] setobjprop 95 ........................... myListMember.text = myRestoreString
  [ 27] getprop 205 ............................. <mySprite>
  [ 29] getprop 228 ............................. <myClosedLoc>
  [ 31] setobjprop 269 .......................... mySprite.loc = myClosedLoc
  [ 34] getprop 205 ............................. <mySprite>
  [ 36] getprop 206 ............................. <myoriginallocz>
  [ 38] setobjprop 207 .......................... mySprite.locZ = myoriginallocz
  [ 40] getprop 202 ............................. <myListMember>
  [ 42] pushsymb 270 ............................ <#fixed>
  [ 45] setobjprop 232 .......................... myListMember.boxType = #fixed
  [ 47] getprop 202 ............................. <myListMember>
  [ 49] getprop 271 ............................. <myClosedRect>
  [ 52] setobjprop 101 .......................... myListMember.rect = myClosedRect
  [ 54] getparam 0 .............................. <me>
  [ 56] getprop 214 ............................. <mySelectedItem>
  [ 58] pusharglistnoret 2 ...................... <me, mySelectedItem>
  [ 60] localcall 13 ............................ ScrollTo(me, mySelectedItem)
  [ 62] pushzero ................................ <0>
  [ 63] setprop 208 ............................. myListIsOpen = 0
  [ 65] getprop 211 ............................. <myContent>
  [ 67] pushsymb 212 ............................ <#marker>
  [ 69] nteq .................................... <myContent <> #marker>
  [ 70] jmpifz [ 77] ............................ if myContent <> #marker then
  [ 73] pusharglistnoret 0 ...................... <>
  [ 75] extcall 151 ............................. updateStage()
  [ 77] ret
end

on Execute me
  [  0] getprop 247 ............................. <myItemsList>
  [  2] getprop 214 ............................. <mySelectedItem>
  [  4] pusharglist 2 ........................... <myItemsList, mySelectedItem>
  [  6] objcall 39 .............................. <myItemsList[mySelectedItem]>
  [  8] setlocal 0 .............................. theItem = myItemsList[mySelectedItem]
  [ 10] getprop 211 ............................. <myContent>
  [ 12] peek 0 .................................. case myContent of
  [ 14] pushsymb 272 ............................ <#movie>
  [ 17] eq
  [ 18] jmpifz [ 46] ............................ (case) #movie:
  [ 21] getmovieprop 273 ........................ <the movieName>
  [ 24] getlocal 0 .............................. <theItem>
  [ 26] pushcons 54 ............................. <".">
  [ 28] joinstr ................................. <theItem & ".">
  [ 29] contains0str ............................ <the movieName starts theItem & ".">
  [ 30] not ..................................... <not (the movieName starts theItem & ".")>
  [ 31] jmpifz [ 43] ............................ if not (the movieName starts theItem & ".") then
  [ 34] pushint8 1 .............................. <1>
  [ 36] getlocal 0 .............................. <theItem>
  [ 38] pusharglistnoret 2 ...................... <1, theItem>
  [ 40] extcall 274 ............................. go(1, theItem)
  [ 43] jmp [ 86]
  [ 46] peek 0
  [ 48] pushsymb 212 ............................ <#marker>
  [ 50] eq
  [ 51] jmpifz [ 70] ............................ (case) #marker:
  [ 54] getprop 247 ............................. <myItemsList>
  [ 56] getprop 214 ............................. <mySelectedItem>
  [ 58] pusharglist 2 ........................... <myItemsList, mySelectedItem>
  [ 60] objcall 94 .............................. <myItemsList.getPropAt(mySelectedItem)>
  [ 62] pusharglistnoret 1 ...................... <myItemsList.getPropAt(mySelectedItem)>
  [ 64] extcall 274 ............................. go(myItemsList.getPropAt(mySelectedItem))
  [ 67] jmp [ 86]
  [ 70] peek 0
  [ 72] pushsymb 275 ............................ <#content>
  [ 75] eq
  [ 76] jmpifz [ 86] ............................ (case) #content:
  [ 79] getlocal 0 .............................. <theItem>
  [ 81] pusharglistnoret 1 ...................... <theItem>
  [ 83] extcall 276 ............................. do(theItem)
  [ 86] pop 1 ................................... end case
  [ 88] ret
end

on Initialize me
  [  0] getparam 0 .............................. <me>
  [  2] getobjprop 210 .......................... <me.spriteNum>
  [  4] pusharglist 1 ........................... <me.spriteNum>
  [  6] extcall 261 ............................. <sprite(me.spriteNum)>
  [  9] setprop 205 ............................. mySprite = sprite(me.spriteNum)
  [ 11] getprop 205 ............................. <mySprite>
  [ 13] getobjprop 32 ........................... <mySprite.member>
  [ 15] setprop 202 ............................. myListMember = mySprite.member
  [ 17] getprop 205 ............................. <mySprite>
  [ 19] getobjprop 207 .......................... <mySprite.locZ>
  [ 21] setprop 206 ............................. myoriginallocz = mySprite.locZ
  [ 23] getprop 202 ............................. <myListMember>
  [ 25] getobjprop 204 .......................... <myListMember.editable>
  [ 27] setprop 203 ............................. myoriginaleditablestate = myListMember.editable
  [ 29] getprop 202 ............................. <myListMember>
  [ 31] pushzero ................................ <0>
  [ 32] setobjprop 204 .......................... myListMember.editable = 0
  [ 34] getprop 202 ............................. <myListMember>
  [ 36] getobjprop 278 .......................... <myListMember.number>
  [ 39] setprop 245 ............................. myField = myListMember.number
  [ 41] getprop 211 ............................. <myContent>
  [ 43] peek 0 .................................. case myContent of
  [ 45] pushcons 55 ............................. <"Current contents of the field">
  [ 47] eq
  [ 48] jmpifz [ 59] ............................ (case) "Current contents of the field":
  [ 51] pushsymb 275 ............................ <#content>
  [ 54] setprop 211 ............................. myContent = #content
  [ 56] jmp [ 87]
  [ 59] peek 0
  [ 61] pushcons 56 ............................. <"Markers in this movie">
  [ 63] eq
  [ 64] jmpifz [ 74] ............................ (case) "Markers in this movie":
  [ 67] pushsymb 212 ............................ <#marker>
  [ 69] setprop 211 ............................. myContent = #marker
  [ 71] jmp [ 87]
  [ 74] peek 0
  [ 76] pushcons 57 ............................. <"Movies with the same path name">
  [ 78] eq
  [ 79] jmpifz [ 87] ............................ (case) "Movies with the same path name":
  [ 82] pushsymb 272 ............................ <#movie>
  [ 85] setprop 211 ............................. myContent = #movie
  [ 87] pop 1 ................................... end case
  [ 89] getprop 213 ............................. <myAction>
  [ 91] peek 0 .................................. case myAction of
  [ 93] pushcons 58 ............................. <"Select:  return the selected item when called">
  [ 95] eq
  [ 96] jmpifz [105] ............................ (case) "Select:  return the selected item when called":
  [ 99] pushzero ................................ <0>
  [100] setprop 213 ............................. myAction = 0
  [102] jmp [117]
  [105] peek 0
  [107] pushcons 59 ............................. <"Execute: go movie | go marker | do selectedLine">
  [109] eq
  [110] jmpifz [117] ............................ (case) "Execute: go movie | go marker | do selectedLine":
  [113] pushint8 1 .............................. <1>
  [115] setprop 213 ............................. myAction = 1
  [117] pop 1 ................................... end case
  [119] getprop 202 ............................. <myListMember>
  [121] pushzero ................................ <0>
  [122] setobjprop 279 .......................... myListMember.wordWrap = 0
  [125] getprop 202 ............................. <myListMember>
  [127] pushcons 60 ............................. <"left">
  [129] setobjprop 280 .......................... myListMember.alignment = "left"
  [132] getprop 202 ............................. <myListMember>
  [134] pushsymb 270 ............................ <#fixed>
  [137] setobjprop 232 .......................... myListMember.boxType = #fixed
  [139] getprop 281 ............................. <myStandard>
  [142] jmpifz [166] ............................ if myStandard then
  [145] getprop 202 ............................. <myListMember>
  [147] pushint8 1 .............................. <1>
  [149] setobjprop 282 .......................... myListMember.border = 1
  [152] getprop 202 ............................. <myListMember>
  [154] pushint8 2 .............................. <2>
  [156] setobjprop 283 .......................... myListMember.margin = 2
  [159] getprop 202 ............................. <myListMember>
  [161] pushint8 2 .............................. <2>
  [163] setobjprop 284 .......................... myListMember.boxDropShadow = 2
  [166] getparam 0 .............................. <me>
  [168] pusharglistnoret 1 ...................... <me>
  [170] localcall 18 ............................ CreateItems(me)
  [172] getparam 0 .............................. <me>
  [174] pusharglist 1 ........................... <me>
  [176] localcall 23 ............................ <DefaultItem(me)>
  [178] setprop 214 ............................. mySelectedItem = DefaultItem(me)
  [180] getparam 0 .............................. <me>
  [182] pusharglistnoret 1 ...................... <me>
  [184] localcall 24 ............................ SetDimensions(me)
  [186] getprop 202 ............................. <myListMember>
  [188] getprop 271 ............................. <myClosedRect>
  [191] setobjprop 101 .......................... myListMember.rect = myClosedRect
  [193] getparam 0 .............................. <me>
  [195] getprop 214 ............................. <mySelectedItem>
  [197] pusharglistnoret 2 ...................... <me, mySelectedItem>
  [199] localcall 13 ............................ ScrollTo(me, mySelectedItem)
  [201] ret
end

on CreateItems me
  [  0] getprop 211 ............................. <myContent>
  [  2] peek 0 .................................. case myContent of
  [  4] pushsymb 275 ............................ <#content>
  [  7] eq
  [  8] jmpifz [ 20] ............................ (case) #content:
  [ 11] getparam 0 .............................. <me>
  [ 13] pusharglistnoret 1 ...................... <me>
  [ 15] localcall 20 ............................ CreateContentsLists(me)
  [ 17] jmp [ 91]
  [ 20] peek 0
  [ 22] pushsymb 212 ............................ <#marker>
  [ 24] eq
  [ 25] jmpifz [ 52] ............................ (case) #marker:
  [ 28] getparam 0 .............................. <me>
  [ 30] pusharglist 0 ........................... <>
  [ 32] thebuiltin 285 .......................... <the labelList>
  [ 35] pusharglist 2 ........................... <me, the labelList>
  [ 37] localcall 19 ............................ <AddSpaces(me, the labelList)>
  [ 39] setprop 220 ............................. myRestoreString = AddSpaces(me, the labelList)
  [ 41] getparam 0 .............................. <me>
  [ 43] pusharglist 1 ........................... <me>
  [ 45] localcall 21 ............................ <GetMarkedFrames(me)>
  [ 47] setprop 247 ............................. myItemsList = GetMarkedFrames(me)
  [ 49] jmp [ 91]
  [ 52] peek 0
  [ 54] pushsymb 272 ............................ <#movie>
  [ 57] eq
  [ 58] jmpifz [ 91] ............................ (case) #movie:
  [ 61] pushcons 61 ............................. <EMPTY>
  [ 63] setprop 220 ............................. myRestoreString = EMPTY
  [ 65] pusharglist 0 ........................... <[:]>
  [ 67] pushproplist ............................ <[:]>
  [ 68] setprop 247 ............................. myItemsList = [:]
  [ 70] getmovieprop 37 ......................... <the itemDelimiter>
  [ 72] setlocal 0 .............................. saveDelimiter = the itemDelimiter
  [ 74] pushcons 54 ............................. <".">
  [ 76] setmovieprop 37 ......................... the itemDelimiter = "."
  [ 78] getparam 0 .............................. <me>
  [ 80] getmovieprop 286 ........................ <the moviePath>
  [ 83] pusharglistnoret 2 ...................... <me, the moviePath>
  [ 85] localcall 22 ............................ CreateMovieLists(me, the moviePath)
  [ 87] getlocal 0 .............................. <saveDelimiter>
  [ 89] setmovieprop 37 ......................... the itemDelimiter = saveDelimiter
  [ 91] pop 1 ................................... end case
  [ 93] ret
end

on AddSpaces me, theText
  [  0] getparam 1 .............................. <theText>
  [  2] pushint8 12 ............................. <12>
  [  4] get 0 ................................... <the last char in theText>
  [  6] pushcons 1 .............................. <RETURN>
  [  8] eq ...................................... <the last char in theText = RETURN>
  [  9] jmpifz [ 28] ............................ repeat while the last char in theText = RETURN
  [ 12] pushint16 -30000 ........................ <-30000>
  [ 15] pushzero ................................ <0>
  [ 16] pushzero ................................ <0>
  [ 17] pushzero ................................ <0>
  [ 18] pushzero ................................ <0>
  [ 19] pushzero ................................ <0>
  [ 20] pushzero ................................ <0>
  [ 21] pushzero ................................ <0>
  [ 22] pushint8 1 .............................. <1>
  [ 24] deletechunk 4 ........................... delete char -30000 of theText
  [ 26] endrepeat [  0]
  [ 28] pushcons 61 ............................. <EMPTY>
  [ 30] setlocal 0 .............................. newString = EMPTY
  [ 32] getparam 1 .............................. <theText>
  [ 34] pushsymb 222 ............................ <#line>
  [ 36] pusharglist 2 ........................... <theText, #line>
  [ 38] objcall 38 .............................. <theText.line.count>
  [ 40] setlocal 1 .............................. lineCount = theText.line.count
  [ 42] getlocal 1 .............................. <lineCount>
  [ 44] jmpifz [ 79] ............................ repeat while lineCount
  [ 47] getparam 1 .............................. <theText>
  [ 49] pushsymb 222 ............................ <#line>
  [ 51] getlocal 1 .............................. <lineCount>
  [ 53] pusharglist 3 ........................... <theText, #line, lineCount>
  [ 55] objcall 44 .............................. <theText.line[lineCount]>
  [ 57] setlocal 2 .............................. theItem = theText.line[lineCount]
  [ 59] pushcons 62 ............................. <"   ">
  [ 61] getlocal 2 .............................. <theItem>
  [ 63] joinstr ................................. <"   " & theItem>
  [ 64] pushcons 1 .............................. <RETURN>
  [ 66] joinstr ................................. <"   " & theItem & RETURN>
  [ 67] pushzero ................................ <0>
  [ 68] put 53 .................................. put "   " & theItem & RETURN before newString
  [ 70] getlocal 1 .............................. <lineCount>
  [ 72] pushint8 1 .............................. <1>
  [ 74] sub ..................................... <lineCount - 1>
  [ 75] setlocal 1 .............................. lineCount = lineCount - 1
  [ 77] endrepeat [ 42]
  [ 79] getlocal 0 .............................. <newString>
  [ 81] pusharglistnoret 1 ...................... <newString>
  [ 83] extcall 28 .............................. return newString
  [ 85] ret
end

on CreateContentsLists me
  [  0] getprop 202 ............................. <myListMember>
  [  2] getobjprop 95 ........................... <myListMember.text>
  [  4] setlocal 0 .............................. theText = myListMember.text
  [  6] getlocal 0 .............................. <theText>
  [  8] pushint8 12 ............................. <12>
  [ 10] get 0 ................................... <the last char in theText>
  [ 12] pushcons 1 .............................. <RETURN>
  [ 14] eq ...................................... <the last char in theText = RETURN>
  [ 15] jmpifz [ 33] ............................ repeat while the last char in theText = RETURN
  [ 18] pushint16 -30000 ........................ <-30000>
  [ 21] pushzero ................................ <0>
  [ 22] pushzero ................................ <0>
  [ 23] pushzero ................................ <0>
  [ 24] pushzero ................................ <0>
  [ 25] pushzero ................................ <0>
  [ 26] pushzero ................................ <0>
  [ 27] pushzero ................................ <0>
  [ 28] pushzero ................................ <0>
  [ 29] deletechunk 5 ........................... delete char -30000 of theText
  [ 31] endrepeat [  6]
  [ 33] pushcons 61 ............................. <EMPTY>
  [ 35] setprop 220 ............................. myRestoreString = EMPTY
  [ 37] pusharglist 0 ........................... <[:]>
  [ 39] pushproplist ............................ <[:]>
  [ 40] setprop 247 ............................. myItemsList = [:]
  [ 42] getlocal 0 .............................. <theText>
  [ 44] pushsymb 222 ............................ <#line>
  [ 46] pusharglist 2 ........................... <theText, #line>
  [ 48] objcall 38 .............................. <theText.line.count>
  [ 50] setlocal 1 .............................. lineCount = theText.line.count
  [ 52] pushint8 1 .............................. <1>
  [ 54] setlocal 2
  [ 56] getlocal 2
  [ 58] getlocal 1 .............................. <lineCount>
  [ 60] lteq
  [ 61] jmpifz [183] ............................ repeat with i = 1 to lineCount
  [ 64] getlocal 0 .............................. <theText>
  [ 66] pushsymb 222 ............................ <#line>
  [ 68] getlocal 2 .............................. <i>
  [ 70] pusharglist 3 ........................... <theText, #line, i>
  [ 72] objcall 44 .............................. <theText.line[i]>
  [ 74] setlocal 3 .............................. theItem = theText.line[i]
  [ 76] pusharglist 0 ........................... <>
  [ 78] extcall 291 ............................. <SPACE>
  [ 81] getprop 221 ............................. <myCheckmark>
  [ 83] joinstr ................................. <SPACE & myCheckmark>
  [ 84] getlocal 3 .............................. <theItem>
  [ 86] pushsymb 223 ............................ <#char>
  [ 88] pushint8 1 .............................. <1>
  [ 90] pusharglist 3 ........................... <theItem, #char, 1>
  [ 92] objcall 44 .............................. <theItem.char[1]>
  [ 94] containsstr ............................. <SPACE & myCheckmark contains theItem.char[1]>
  [ 95] jmpifz [150] ............................ if SPACE & myCheckmark contains theItem.char[1] then
  [ 98] pushint8 3 .............................. <3>
  [100] pushchunkvarref 5 ....................... <theItem>
  [102] pushsymb 223 ............................ <#char>
  [104] pushint8 1 .............................. <1>
  [106] pusharglist 3 ........................... <theItem, #char, 1>
  [108] objcall 142 ............................. <theItem.char[1]>
  [110] pusharglistnoret 1 ...................... <theItem.char[1]>
  [112] objcall 292 ............................. delete theItem.char[1]
  [115] getlocal 3 .............................. <theItem>
  [117] pushsymb 223 ............................ <#char>
  [119] pushint8 1 .............................. <1>
  [121] pusharglist 3 ........................... <theItem, #char, 1>
  [123] objcall 44 .............................. <theItem.char[1]>
  [125] pushcons 63 ............................. <" ">
  [127] eq ...................................... <theItem.char[1] = " ">
  [128] jmpifz [150] ............................ repeat while theItem.char[1] = " "
  [131] pushint8 3 .............................. <3>
  [133] pushchunkvarref 5 ....................... <theItem>
  [135] pushsymb 223 ............................ <#char>
  [137] pushint8 1 .............................. <1>
  [139] pusharglist 3 ........................... <theItem, #char, 1>
  [141] objcall 142 ............................. <theItem.char[1]>
  [143] pusharglistnoret 1 ...................... <theItem.char[1]>
  [145] objcall 292 ............................. delete theItem.char[1]
  [148] endrepeat [115]
  [150] getprop 220 ............................. <myRestoreString>
  [152] pushcons 62 ............................. <"   ">
  [154] joinstr ................................. <myRestoreString & "   ">
  [155] getlocal 3 .............................. <theItem>
  [157] joinstr ................................. <myRestoreString & "   " & theItem>
  [158] pushcons 1 .............................. <RETURN>
  [160] joinstr ................................. <myRestoreString & "   " & theItem & RETURN>
  [161] setprop 220 ............................. myRestoreString = myRestoreString & "   " & theItem & RETURN
  [163] getprop 247 ............................. <myItemsList>
  [165] getlocal 2 .............................. <i>
  [167] getlocal 3 .............................. <theItem>
  [169] pusharglistnoret 3 ...................... <myItemsList, i, theItem>
  [171] objcall 293 ............................. myItemsList.addProp(i, theItem)
  [174] pushint8 1
  [176] getlocal 2
  [178] add
  [179] setlocal 2
  [181] endrepeat [ 56]
  [183] ret
end

on GetMarkedFrames me
  [  0] pusharglist 0 ........................... <[:]>
  [  2] pushproplist ............................ <[:]>
  [  3] setlocal 0 .............................. markerlist = [:]
  [  5] getlocal 0 .............................. <markerlist>
  [  7] pusharglistnoret 1 ...................... <markerlist>
  [  9] extcall 58 .............................. sort(markerlist)
  [ 11] pushzero ................................ <0>
  [ 12] setlocal 1 .............................. lastCheckedMarker = 0
  [ 14] pushint8 1 .............................. <1>
  [ 16] pusharglist 1 ........................... <1>
  [ 18] extcall 212 ............................. <marker(1)>
  [ 20] pusharglist 0 ........................... <>
  [ 22] thebuiltin 216 .......................... <the maxinteger>
  [ 24] inv ..................................... <-(the maxinteger)>
  [ 25] pushint8 2 .............................. <2>
  [ 27] div ..................................... <-(the maxinteger) / 2>
  [ 28] pusharglist 1 ........................... <-(the maxinteger) / 2>
  [ 30] extcall 212 ............................. <marker(-(the maxinteger) / 2)>
  [ 32] nteq .................................... <marker(1) <> marker(-(the maxinteger) / 2)>
  [ 33] jmpifz [ 92] ............................ if marker(1) <> marker(-(the maxinteger) / 2) then
  [ 36] pushzero ................................ <0>
  [ 37] setlocal 2
  [ 39] getlocal 2
  [ 41] pusharglist 0 ........................... <>
  [ 43] thebuiltin 216 .......................... <the maxinteger>
  [ 45] inv ..................................... <-(the maxinteger)>
  [ 46] gteq
  [ 47] jmpifz [ 92] ............................ repeat with i = 0 down to -(the maxinteger)
  [ 50] getlocal 2 .............................. <i>
  [ 52] pusharglist 1 ........................... <i>
  [ 54] extcall 212 ............................. <marker(i)>
  [ 56] setlocal 3 .............................. checkMarker = marker(i)
  [ 58] getlocal 3 .............................. <checkMarker>
  [ 60] getlocal 1 .............................. <lastCheckedMarker>
  [ 62] eq ...................................... <checkMarker = lastCheckedMarker>
  [ 63] jmpifz [ 69] ............................ if checkMarker = lastCheckedMarker then
  [ 66] jmp [ 92] ............................... exit repeat
  [ 69] getlocal 3 .............................. <checkMarker>
  [ 71] setlocal 1 .............................. lastCheckedMarker = checkMarker
  [ 73] getlocal 0 .............................. <markerlist>
  [ 75] getlocal 3 .............................. <checkMarker>
  [ 77] pushzero ................................ <0>
  [ 78] pusharglistnoret 3 ...................... <markerlist, checkMarker, 0>
  [ 80] objcall 293 ............................. markerlist.addProp(checkMarker, 0)
  [ 83] pushint8 -1
  [ 85] getlocal 2
  [ 87] add
  [ 88] setlocal 2
  [ 90] endrepeat [ 39]
  [ 92] pushzero ................................ <0>
  [ 93] pusharglist 1 ........................... <0>
  [ 95] extcall 212 ............................. <marker(0)>
  [ 97] pusharglist 0 ........................... <>
  [ 99] thebuiltin 216 .......................... <the maxinteger>
  [101] pushint8 2 .............................. <2>
  [103] div ..................................... <the maxinteger / 2>
  [104] pusharglist 1 ........................... <the maxinteger / 2>
  [106] extcall 212 ............................. <marker(the maxinteger / 2)>
  [108] nteq .................................... <marker(0) <> marker(the maxinteger / 2)>
  [109] jmpifz [168] ............................ if marker(0) <> marker(the maxinteger / 2) then
  [112] pushint8 1 .............................. <1>
  [114] setlocal 2
  [116] getlocal 2
  [118] pusharglist 0 ........................... <>
  [120] thebuiltin 216 .......................... <the maxinteger>
  [122] lteq
  [123] jmpifz [168] ............................ repeat with i = 1 to the maxinteger
  [126] getlocal 2 .............................. <i>
  [128] pusharglist 1 ........................... <i>
  [130] extcall 212 ............................. <marker(i)>
  [132] setlocal 3 .............................. checkMarker = marker(i)
  [134] getlocal 3 .............................. <checkMarker>
  [136] getlocal 1 .............................. <lastCheckedMarker>
  [138] eq ...................................... <checkMarker = lastCheckedMarker>
  [139] jmpifz [145] ............................ if checkMarker = lastCheckedMarker then
  [142] jmp [168] ............................... exit repeat
  [145] getlocal 3 .............................. <checkMarker>
  [147] setlocal 1 .............................. lastCheckedMarker = checkMarker
  [149] getlocal 0 .............................. <markerlist>
  [151] getlocal 3 .............................. <checkMarker>
  [153] pushzero ................................ <0>
  [154] pusharglistnoret 3 ...................... <markerlist, checkMarker, 0>
  [156] objcall 293 ............................. markerlist.addProp(checkMarker, 0)
  [159] pushint8 1
  [161] getlocal 2
  [163] add
  [164] setlocal 2
  [166] endrepeat [116]
  [168] getlocal 0 .............................. <markerlist>
  [170] pusharglist 1 ........................... <markerlist>
  [172] objcall 38 .............................. <markerlist.count()>
  [174] setlocal 2 .............................. i = markerlist.count()
  [176] pusharglist 0 ........................... <>
  [178] thebuiltin 285 .......................... <the labelList>
  [181] setlocal 4 .............................. theLabels = the labelList
  [183] getlocal 2 .............................. <i>
  [185] jmpifz [215] ............................ repeat while i
  [188] getlocal 0 .............................. <markerlist>
  [190] getlocal 2 .............................. <i>
  [192] getlocal 4 .............................. <theLabels>
  [194] pushsymb 222 ............................ <#line>
  [196] getlocal 2 .............................. <i>
  [198] pusharglist 3 ........................... <theLabels, #line, i>
  [200] objcall 44 .............................. <theLabels.line[i]>
  [202] pusharglistnoret 3 ...................... <markerlist, i, theLabels.line[i]>
  [204] objcall 41 .............................. markerlist[i] = theLabels.line[i]
  [206] getlocal 2 .............................. <i>
  [208] pushint8 1 .............................. <1>
  [210] sub ..................................... <i - 1>
  [211] setlocal 2 .............................. i = i - 1
  [213] endrepeat [183]
  [215] getlocal 0 .............................. <markerlist>
  [217] pusharglistnoret 1 ...................... <markerlist>
  [219] extcall 28 .............................. return markerlist
  [221] ret
end

on CreateMovieLists me, folderName
  [  0] pusharglist 0 ........................... <>
  [  2] thebuiltin 298 .......................... <the machineType>
  [  5] pushint16 256 ........................... <256>
  [  8] eq ...................................... <the machineType = 256>
  [  9] jmpifz [ 19] ............................ if the machineType = 256 then / else
  [ 12] pushcons 64 ............................. <"\\">
  [ 14] setlocal 0 .............................. fileDelimiter = "\\"
  [ 16] jmp [ 23]
  [ 19] pushcons 65 ............................. <":">
  [ 21] setlocal 0 .............................. fileDelimiter = ":"
  [ 23] pushzero ................................ <0>
  [ 24] setlocal 1 .............................. fileCount = 0
  [ 26] pushint8 1 .............................. <1>
  [ 28] jmpifz [170] ............................ repeat while 1
  [ 31] getlocal 1 .............................. <fileCount>
  [ 33] pushint8 1 .............................. <1>
  [ 35] add ..................................... <fileCount + 1>
  [ 36] setlocal 1 .............................. fileCount = fileCount + 1
  [ 38] getparam 1 .............................. <folderName>
  [ 40] getlocal 1 .............................. <fileCount>
  [ 42] pusharglist 2 ........................... <folderName, fileCount>
  [ 44] extcall 299 ............................. <getNthFileNameInFolder(folderName, fileCount)>
  [ 47] setlocal 2 .............................. theFileName = getNthFileNameInFolder(folderName, fileCount)
  [ 49] getlocal 2 .............................. <theFileName>
  [ 51] pushcons 61 ............................. <EMPTY>
  [ 53] eq ...................................... <theFileName = EMPTY>
  [ 54] jmpifz [ 64] ............................ if theFileName = EMPTY then
  [ 57] pusharglistnoret 0 ...................... <>
  [ 59] extcall 28 .............................. return 
  [ 61] jmp [168] ............................... next repeat
  [ 64] pushzero ................................ <0>
  [ 65] pushzero ................................ <0>
  [ 66] pushzero ................................ <0>
  [ 67] pushzero ................................ <0>
  [ 68] pushint8 2 .............................. <2>
  [ 70] pushzero ................................ <0>
  [ 71] pushzero ................................ <0>
  [ 72] pushzero ................................ <0>
  [ 73] getlocal 2 .............................. <theFileName>
  [ 75] getchunk ................................ <item 2 of theFileName>
  [ 76] peek 0 .................................. case item 2 of theFileName of
  [ 78] pushcons 66 ............................. <"dir">
  [ 80] nteq
  [ 81] jmpifz [100] ............................ (case) "dir", ...
  [ 84] peek 0
  [ 86] pushcons 67 ............................. <"dxr">
  [ 88] nteq
  [ 89] jmpifz [100] ............................ (case) ..., "dxr", ...
  [ 92] peek 0
  [ 94] pushcons 68 ............................. <"dcr">
  [ 96] eq
  [ 97] jmpifz [152] ............................ (case) ..., "dcr":
  [100] pushzero ................................ <0>
  [101] pushzero ................................ <0>
  [102] pushzero ................................ <0>
  [103] pushzero ................................ <0>
  [104] pushint8 1 .............................. <1>
  [106] pushzero ................................ <0>
  [107] pushzero ................................ <0>
  [108] pushzero ................................ <0>
  [109] getlocal 2 .............................. <theFileName>
  [111] getchunk ................................ <item 1 of theFileName>
  [112] setlocal 3 .............................. theMovie = item 1 of theFileName
  [114] getprop 220 ............................. <myRestoreString>
  [116] pushcons 62 ............................. <"   ">
  [118] joinstr ................................. <myRestoreString & "   ">
  [119] getlocal 3 .............................. <theMovie>
  [121] joinstr ................................. <myRestoreString & "   " & theMovie>
  [122] pushcons 1 .............................. <RETURN>
  [124] joinstr ................................. <myRestoreString & "   " & theMovie & RETURN>
  [125] setprop 220 ............................. myRestoreString = myRestoreString & "   " & theMovie & RETURN
  [127] getprop 247 ............................. <myItemsList>
  [129] pusharglist 1 ........................... <myItemsList>
  [131] objcall 38 .............................. <myItemsList.count()>
  [133] pushint8 1 .............................. <1>
  [135] add ..................................... <myItemsList.count() + 1>
  [136] setlocal 4 .............................. movieCount = myItemsList.count() + 1
  [138] getprop 247 ............................. <myItemsList>
  [140] getlocal 4 .............................. <movieCount>
  [142] getlocal 3 .............................. <theMovie>
  [144] pusharglistnoret 3 ...................... <myItemsList, movieCount, theMovie>
  [146] objcall 293 ............................. myItemsList.addProp(movieCount, theMovie)
  [149] jmp [166] ............................... (case) otherwise:
  [152] getparam 0 .............................. <me>
  [154] getparam 1 .............................. <folderName>
  [156] getlocal 2 .............................. <theFileName>
  [158] joinstr ................................. <folderName & theFileName>
  [159] getlocal 0 .............................. <fileDelimiter>
  [161] joinstr ................................. <folderName & theFileName & fileDelimiter>
  [162] pusharglistnoret 2 ...................... <me, folderName & theFileName & fileDelimiter>
  [164] localcall 22 ............................ CreateMovieLists(me, folderName & theFileName & fileDelimiter)
  [166] pop 1 ................................... end case
  [168] endrepeat [ 26]
  [170] ret
end

on DefaultItem me
  [  0] getprop 211 ............................. <myContent>
  [  2] peek 0 .................................. case myContent of
  [  4] pushsymb 275 ............................ <#content>
  [  7] eq
  [  8] jmpifz [ 22] ............................ (case) #content:
  [ 11] pop 1
  [ 13] pushint8 1 .............................. <1>
  [ 15] pusharglistnoret 1 ...................... <1>
  [ 17] extcall 28 .............................. return 1
  [ 19] jmp [ 95]
  [ 22] peek 0
  [ 24] pushsymb 212 ............................ <#marker>
  [ 26] eq
  [ 27] jmpifz [ 45] ............................ (case) #marker:
  [ 30] pop 1
  [ 32] getparam 0 .............................. <me>
  [ 34] pusharglist 1 ........................... <me>
  [ 36] localcall 25 ............................ <GetCurrentMarker(me)>
  [ 38] pusharglistnoret 1 ...................... <GetCurrentMarker(me)>
  [ 40] extcall 28 .............................. return GetCurrentMarker(me)
  [ 42] jmp [ 95]
  [ 45] peek 0
  [ 47] pushsymb 272 ............................ <#movie>
  [ 50] eq
  [ 51] jmpifz [ 95] ............................ (case) #movie:
  [ 54] getmovieprop 37 ......................... <the itemDelimiter>
  [ 56] setlocal 0 .............................. saveDelimiter = the itemDelimiter
  [ 58] pushcons 54 ............................. <".">
  [ 60] setmovieprop 37 ......................... the itemDelimiter = "."
  [ 62] pushzero ................................ <0>
  [ 63] pushzero ................................ <0>
  [ 64] pushzero ................................ <0>
  [ 65] pushzero ................................ <0>
  [ 66] pushint8 1 .............................. <1>
  [ 68] pushzero ................................ <0>
  [ 69] pushzero ................................ <0>
  [ 70] pushzero ................................ <0>
  [ 71] getmovieprop 273 ........................ <the movieName>
  [ 74] getchunk ................................ <item 1 of the movieName>
  [ 75] setlocal 1 .............................. shortName = item 1 of the movieName
  [ 77] getlocal 0 .............................. <saveDelimiter>
  [ 79] setmovieprop 37 ......................... the itemDelimiter = saveDelimiter
  [ 81] pop 1
  [ 83] getprop 247 ............................. <myItemsList>
  [ 85] getlocal 1 .............................. <shortName>
  [ 87] pusharglist 2 ........................... <myItemsList, shortName>
  [ 89] objcall 57 .............................. <myItemsList.getPos(shortName)>
  [ 91] pusharglistnoret 1 ...................... <myItemsList.getPos(shortName)>
  [ 93] extcall 28 .............................. return myItemsList.getPos(shortName)
  [ 95] pop 1 ................................... end case
  [ 97] ret
end

on SetDimensions me
  [  0] getprop 220 ............................. <myRestoreString>
  [  2] pushint8 12 ............................. <12>
  [  4] get 0 ................................... <the last char in myRestoreString>
  [  6] setlocal 0 .............................. saveLastChar = the last char in myRestoreString
  [  8] pushint16 -30000 ........................ <-30000>
  [ 11] pushzero ................................ <0>
  [ 12] pushzero ................................ <0>
  [ 13] pushzero ................................ <0>
  [ 14] pushzero ................................ <0>
  [ 15] pushzero ................................ <0>
  [ 16] pushzero ................................ <0>
  [ 17] pushzero ................................ <0>
  [ 18] pushvarref 220 .......................... <myRestoreString>
  [ 20] deletechunk 3 ........................... delete char -30000 of myRestoreString
  [ 22] getprop 202 ............................. <myListMember>
  [ 24] getprop 220 ............................. <myRestoreString>
  [ 26] setobjprop 95 ........................... myListMember.text = myRestoreString
  [ 28] getprop 202 ............................. <myListMember>
  [ 30] getobjprop 307 .......................... <myListMember.lineHeight>
  [ 33] setprop 229 ............................. myItemHeight = myListMember.lineHeight
  [ 35] getprop 202 ............................. <myListMember>
  [ 37] getobjprop 101 .......................... <myListMember.rect>
  [ 39] setprop 230 ............................. myOpenRect = myListMember.rect
  [ 41] getprop 230 ............................. <myOpenRect>
  [ 43] pusharglist 1 ........................... <myOpenRect>
  [ 45] objcall 137 ............................. <myOpenRect.duplicate()>
  [ 47] setprop 271 ............................. myClosedRect = myOpenRect.duplicate()
  [ 50] getprop 271 ............................. <myClosedRect>
  [ 53] pushint8 4 .............................. <4>
  [ 55] getprop 229 ............................. <myItemHeight>
  [ 57] getprop 202 ............................. <myListMember>
  [ 59] getobjprop 283 .......................... <myListMember.margin>
  [ 62] pushint8 2 .............................. <2>
  [ 64] div ..................................... <myListMember.margin / 2>
  [ 65] add ..................................... <myItemHeight + (myListMember.margin / 2)>
  [ 66] pusharglistnoret 3 ...................... <myClosedRect, 4, myItemHeight + (myListMember.margin / 2)>
  [ 68] objcall 41 .............................. myClosedRect[4] = myItemHeight + (myListMember.margin / 2)
  [ 70] getprop 205 ............................. <mySprite>
  [ 72] getobjprop 269 .......................... <mySprite.loc>
  [ 75] setprop 228 ............................. myClosedLoc = mySprite.loc
  [ 77] getprop 202 ............................. <myListMember>
  [ 79] getobjprop 283 .......................... <myListMember.margin>
  [ 82] pushint8 2 .............................. <2>
  [ 84] mul ..................................... <myListMember.margin * 2>
  [ 85] getprop 202 ............................. <myListMember>
  [ 87] getobjprop 284 .......................... <myListMember.boxDropShadow>
  [ 90] add ..................................... <(myListMember.margin * 2) + myListMember.boxDropShadow>
  [ 91] setlocal 1 .............................. addedHeight = (myListMember.margin * 2) + myListMember.boxDropShadow
  [ 93] getprop 230 ............................. <myOpenRect>
  [ 95] getobjprop 308 .......................... <myOpenRect.bottom>
  [ 98] getlocal 1 .............................. <addedHeight>
  [100] add ..................................... <myOpenRect.bottom + addedHeight>
  [101] setprop 226 ............................. myOpenHeight = myOpenRect.bottom + addedHeight
  [103] getmovieprop 309 ........................ <the activeWindow>
  [106] getobjprop 101 .......................... <(the activeWindow).rect>
  [108] setlocal 2 .............................. windowRect = (the activeWindow).rect
  [110] getlocal 2 .............................. <windowRect>
  [112] getobjprop 308 .......................... <windowRect.bottom>
  [115] getlocal 2 .............................. <windowRect>
  [117] getobjprop 310 .......................... <windowRect.top>
  [120] sub ..................................... <windowRect.bottom - windowRect.top>
  [121] setprop 227 ............................. myStageHeight = windowRect.bottom - windowRect.top
  [123] getlocal 2 .............................. <windowRect>
  [125] getobjprop 233 .......................... <windowRect.right>
  [127] getlocal 2 .............................. <windowRect>
  [129] getobjprop 105 .......................... <windowRect.left>
  [131] sub ..................................... <windowRect.right - windowRect.left>
  [132] setprop 234 ............................. myStageWidth = windowRect.right - windowRect.left
  [134] getprop 220 ............................. <myRestoreString>
  [136] getlocal 0 .............................. <saveLastChar>
  [138] joinstr ................................. <myRestoreString & saveLastChar>
  [139] setprop 220 ............................. myRestoreString = myRestoreString & saveLastChar
  [141] getprop 202 ............................. <myListMember>
  [143] getprop 220 ............................. <myRestoreString>
  [145] setobjprop 95 ........................... myListMember.text = myRestoreString
  [147] ret
end

on GetCurrentMarker me
  [  0] getprop 247 ............................. <myItemsList>
  [  2] pusharglist 0 ........................... <>
  [  4] thebuiltin 314 .......................... <the frame>
  [  7] pusharglist 2 ........................... <myItemsList, the frame>
  [  9] objcall 315 ............................. <myItemsList.findPos(the frame)>
  [ 12] setlocal 0 .............................. markerPosition = myItemsList.findPos(the frame)
  [ 14] getlocal 0 .............................. <markerPosition>
  [ 16] not ..................................... <not markerPosition>
  [ 17] jmpifz [ 37] ............................ if not markerPosition then
  [ 20] getprop 247 ............................. <myItemsList>
  [ 22] pusharglist 0 ........................... <>
  [ 24] thebuiltin 314 .......................... <the frame>
  [ 27] pusharglist 2 ........................... <myItemsList, the frame>
  [ 29] objcall 316 ............................. <myItemsList.findPosNear(the frame)>
  [ 32] pushint8 1 .............................. <1>
  [ 34] sub ..................................... <myItemsList.findPosNear(the frame) - 1>
  [ 35] setlocal 0 .............................. markerPosition = myItemsList.findPosNear(the frame) - 1
  [ 37] pushint8 1 .............................. <1>
  [ 39] getlocal 0 .............................. <markerPosition>
  [ 41] pusharglist 2 ........................... <1, markerPosition>
  [ 43] extcall 254 ............................. <max(1, markerPosition)>
  [ 45] pusharglistnoret 1 ...................... <max(1, markerPosition)>
  [ 47] extcall 28 .............................. return max(1, markerPosition)
  [ 49] ret
end

on DropList_Selection me, propListOrString
  [  0] getparam 1 .............................. <propListOrString>
  [  2] pusharglist 1 ........................... <propListOrString>
  [  4] extcall 318 ............................. <stringp(propListOrString)>
  [  7] jmpifz [ 20] ............................ if stringp(propListOrString) then
  [ 10] getparam 1 .............................. <propListOrString>
  [ 12] getprop 264 ............................. <myname>
  [ 15] nteq .................................... <propListOrString <> myname>
  [ 16] jmpifz [ 20] ............................ if propListOrString <> myname then
  [ 19] ret ..................................... exit
  [ 20] pushsymb 43 ............................. <#item>
  [ 22] getprop 214 ............................. <mySelectedItem>
  [ 24] pushsymb 95 ............................. <#text>
  [ 26] getprop 247 ............................. <myItemsList>
  [ 28] getprop 214 ............................. <mySelectedItem>
  [ 30] pusharglist 2 ........................... <myItemsList, mySelectedItem>
  [ 32] objcall 39 .............................. <myItemsList[mySelectedItem]>
  [ 34] pushsymb 319 ............................ <#type>
  [ 37] getprop 211 ............................. <myContent>
  [ 39] pushsymb 261 ............................ <#sprite>
  [ 42] getprop 210 ............................. <spriteNum>
  [ 44] pusharglist 8 ........................... <[#item: mySelectedItem, #text: myItemsList[mySelectedItem], #type: myContent, #sprite: spriteNum]>
  [ 46] pushproplist ............................ <[#item: mySelectedItem, #text: myItemsList[mySelectedItem], #type: myContent, #sprite: spriteNum]>
  [ 47] setlocal 0 .............................. data = [#item: mySelectedItem, #text: myItemsList[mySelectedItem], #type: myContent, #sprite: spriteNum]
  [ 49] getparam 1 .............................. <propListOrString>
  [ 51] pusharglist 1 ........................... <propListOrString>
  [ 53] extcall 320 ............................. <ilk(propListOrString)>
  [ 56] pushsymb 321 ............................ <#propList>
  [ 59] nteq .................................... <ilk(propListOrString) <> #propList>
  [ 60] jmpifz [ 72] ............................ if ilk(propListOrString) <> #propList then / else
  [ 63] getlocal 0 .............................. <data>
  [ 65] pusharglistnoret 1 ...................... <data>
  [ 67] extcall 28 .............................. return data
  [ 69] jmp [ 90]
  [ 72] getparam 1 .............................. <propListOrString>
  [ 74] getprop 264 ............................. <myname>
  [ 77] getlocal 0 .............................. <data>
  [ 79] pusharglistnoret 3 ...................... <propListOrString, myname, data>
  [ 81] objcall 293 ............................. propListOrString.addProp(myname, data)
  [ 84] getparam 1 .............................. <propListOrString>
  [ 86] pusharglistnoret 1 ...................... <propListOrString>
  [ 88] extcall 28 .............................. return propListOrString
  [ 90] ret
end

on DropList_SetContents me, theContents, theListName
  [  0] getparam 2 .............................. <theListName>
  [  2] pusharglist 1 ........................... <theListName>
  [  4] extcall 324 ............................. <voidp(theListName)>
  [  7] not ..................................... <not voidp(theListName)>
  [  8] jmpifz [ 21] ............................ if not voidp(theListName) then
  [ 11] getparam 2 .............................. <theListName>
  [ 13] getprop 264 ............................. <myname>
  [ 16] nteq .................................... <theListName <> myname>
  [ 17] jmpifz [ 21] ............................ if theListName <> myname then
  [ 20] ret ..................................... exit
  [ 21] getparam 1 .............................. <theContents>
  [ 23] pusharglist 1 ........................... <theContents>
  [ 25] extcall 320 ............................. <ilk(theContents)>
  [ 28] peek 0 .................................. case ilk(theContents) of
  [ 30] pushsymb 96 ............................. <#string>
  [ 32] eq
  [ 33] jmpifz [ 56] ............................ (case) #string:
  [ 36] getprop 202 ............................. <myListMember>
  [ 38] getparam 1 .............................. <theContents>
  [ 40] setobjprop 95 ........................... myListMember.text = theContents
  [ 42] pushsymb 275 ............................ <#content>
  [ 45] setprop 211 ............................. myContent = #content
  [ 47] getparam 0 .............................. <me>
  [ 49] pusharglistnoret 1 ...................... <me>
  [ 51] localcall 17 ............................ Initialize(me)
  [ 53] jmp [216]
  [ 56] peek 0
  [ 58] pushsymb 325 ............................ <#list>
  [ 61] eq
  [ 62] jmpifz [138] ............................ (case) #list:
  [ 65] pushcons 61 ............................. <EMPTY>
  [ 67] setlocal 0 .............................. listItems = EMPTY
  [ 69] getparam 1 .............................. <theContents>
  [ 71] getobjprop 38 ........................... <theContents.count>
  [ 73] setlocal 1 .............................. lineCount = theContents.count
  [ 75] pushint8 1 .............................. <1>
  [ 77] setlocal 2
  [ 79] getlocal 2
  [ 81] getlocal 1 .............................. <lineCount>
  [ 83] lteq
  [ 84] jmpifz [118] ............................ repeat with i = 1 to lineCount
  [ 87] getparam 1 .............................. <theContents>
  [ 89] getlocal 2 .............................. <i>
  [ 91] pusharglist 2 ........................... <theContents, i>
  [ 93] objcall 39 .............................. <theContents[i]>
  [ 95] pusharglist 1 ........................... <theContents[i]>
  [ 97] extcall 96 .............................. <string(theContents[i])>
  [ 99] setlocal 3 .............................. theLine = string(theContents[i])
  [101] getlocal 3 .............................. <theLine>
  [103] pushcons 1 .............................. <RETURN>
  [105] joinstr ................................. <theLine & RETURN>
  [106] pushzero ................................ <0>
  [107] put 37 .................................. put theLine & RETURN after listItems
  [109] pushint8 1
  [111] getlocal 2
  [113] add
  [114] setlocal 2
  [116] endrepeat [ 79]
  [118] getprop 202 ............................. <myListMember>
  [120] getlocal 0 .............................. <listItems>
  [122] setobjprop 95 ........................... myListMember.text = listItems
  [124] pushsymb 275 ............................ <#content>
  [127] setprop 211 ............................. myContent = #content
  [129] getparam 0 .............................. <me>
  [131] pusharglistnoret 1 ...................... <me>
  [133] localcall 17 ............................ Initialize(me)
  [135] jmp [216]
  [138] peek 0
  [140] pushsymb 326 ............................ <#symbol>
  [143] eq
  [144] jmpifz [207] ............................ (case) #symbol:
  [147] getparam 1 .............................. <theContents>
  [149] peek 0 .................................. case theContents of
  [151] pushsymb 212 ............................ <#marker>
  [153] eq
  [154] jmpifz [170] ............................ (case) #marker:
  [157] pushsymb 212 ............................ <#marker>
  [159] setprop 211 ............................. myContent = #marker
  [161] getparam 0 .............................. <me>
  [163] pusharglistnoret 1 ...................... <me>
  [165] localcall 17 ............................ Initialize(me)
  [167] jmp [202]
  [170] peek 0
  [172] pushsymb 272 ............................ <#movie>
  [175] eq
  [176] jmpifz [193] ............................ (case) #movie:
  [179] pushsymb 272 ............................ <#movie>
  [182] setprop 211 ............................. myContent = #movie
  [184] getparam 0 .............................. <me>
  [186] pusharglistnoret 1 ...................... <me>
  [188] localcall 17 ............................ Initialize(me)
  [190] jmp [202] ............................... (case) otherwise:
  [193] pop 2
  [195] pushsymb 327 ............................ <#invalidListContents>
  [198] pusharglistnoret 1 ...................... <#invalidListContents>
  [200] extcall 28 .............................. return #invalidListContents
  [202] pop 1 ................................... end case
  [204] jmp [216] ............................... (case) otherwise:
  [207] pop 1
  [209] pushsymb 327 ............................ <#invalidListContents>
  [212] pusharglistnoret 1 ...................... <#invalidListContents>
  [214] extcall 28 .............................. return #invalidListContents
  [216] pop 1 ................................... end case
  [218] ret
end

on DropList_ToggleExecution me, executeMode, listName
  [  0] getparam 2 .............................. <listName>
  [  2] pusharglist 1 ........................... <listName>
  [  4] extcall 324 ............................. <voidp(listName)>
  [  7] not ..................................... <not voidp(listName)>
  [  8] jmpifz [ 24] ............................ if not voidp(listName) then / else
  [ 11] getparam 2 .............................. <listName>
  [ 13] getprop 264 ............................. <myname>
  [ 16] nteq .................................... <listName <> myname>
  [ 17] jmpifz [ 21] ............................ if listName <> myname then
  [ 20] ret ..................................... exit
  [ 21] jmp [ 52]
  [ 24] getparam 1 .............................. <executeMode>
  [ 26] pusharglist 1 ........................... <executeMode>
  [ 28] extcall 318 ............................. <stringp(executeMode)>
  [ 31] jmpifz [ 52] ............................ if stringp(executeMode) then
  [ 34] getparam 1 .............................. <executeMode>
  [ 36] getprop 264 ............................. <myname>
  [ 39] eq ...................................... <executeMode = myname>
  [ 40] jmpifz [ 51] ............................ if executeMode = myname then / else
  [ 43] getprop 213 ............................. <myAction>
  [ 45] not ..................................... <not myAction>
  [ 46] setprop 213 ............................. myAction = not myAction
  [ 48] jmp [ 52]
  [ 51] ret ..................................... exit
  [ 52] getparam 1 .............................. <executeMode>
  [ 54] pusharglist 1 ........................... <executeMode>
  [ 56] extcall 324 ............................. <voidp(executeMode)>
  [ 59] jmpifz [ 70] ............................ if voidp(executeMode) then / else
  [ 62] getprop 213 ............................. <myAction>
  [ 64] not ..................................... <not myAction>
  [ 65] setprop 213 ............................. myAction = not myAction
  [ 67] jmp [128]
  [ 70] getparam 1 .............................. <executeMode>
  [ 72] peek 0 .................................. case executeMode of
  [ 74] pushsymb 186 ............................ <#Execute>
  [ 76] nteq
  [ 77] jmpifz [ 88] ............................ (case) #Execute, ...
  [ 80] peek 0
  [ 82] pushint8 1 .............................. <1>
  [ 84] eq
  [ 85] jmpifz [ 95] ............................ (case) ..., 1:
  [ 88] pushint8 1 .............................. <1>
  [ 90] setprop 213 ............................. myAction = 1
  [ 92] jmp [126]
  [ 95] peek 0
  [ 97] pushsymb 331 ............................ <#select>
  [100] nteq
  [101] jmpifz [111] ............................ (case) #select, ...
  [104] peek 0
  [106] pushzero ................................ <0>
  [107] eq
  [108] jmpifz [117] ............................ (case) ..., 0:
  [111] pushzero ................................ <0>
  [112] setprop 213 ............................. myAction = 0
  [114] jmp [126] ............................... (case) otherwise:
  [117] pop 1
  [119] pushsymb 332 ............................ <#invalidExecuteMode>
  [122] pusharglistnoret 1 ...................... <#invalidExecuteMode>
  [124] extcall 28 .............................. return #invalidExecuteMode
  [126] pop 1 ................................... end case
  [128] ret
end

on DropList_GetReference me, propListOrString
  [  0] getparam 1 .............................. <propListOrString>
  [  2] pusharglist 1 ........................... <propListOrString>
  [  4] extcall 320 ............................. <ilk(propListOrString)>
  [  7] peek 0 .................................. case ilk(propListOrString) of
  [  9] pushsymb 321 ............................ <#propList>
  [ 12] eq
  [ 13] jmpifz [ 39] ............................ (case) #propList:
  [ 16] getparam 1 .............................. <propListOrString>
  [ 18] getprop 264 ............................. <myname>
  [ 21] getparam 0 .............................. <me>
  [ 23] pusharglistnoret 3 ...................... <propListOrString, myname, me>
  [ 25] objcall 293 ............................. propListOrString.addProp(myname, me)
  [ 28] pop 1
  [ 30] getparam 1 .............................. <propListOrString>
  [ 32] pusharglistnoret 1 ...................... <propListOrString>
  [ 34] extcall 28 .............................. return propListOrString
  [ 36] jmp [ 75]
  [ 39] peek 0
  [ 41] pushsymb 96 ............................. <#string>
  [ 43] eq
  [ 44] jmpifz [ 67] ............................ (case) #string:
  [ 47] getparam 1 .............................. <propListOrString>
  [ 49] getprop 264 ............................. <myname>
  [ 52] eq ...................................... <propListOrString = myname>
  [ 53] jmpifz [ 64] ............................ if propListOrString = myname then
  [ 56] pop 1
  [ 58] getparam 0 .............................. <me>
  [ 60] pusharglistnoret 1 ...................... <me>
  [ 62] extcall 28 .............................. return me
  [ 64] jmp [ 75] ............................... (case) otherwise:
  [ 67] pop 1
  [ 69] getparam 0 .............................. <me>
  [ 71] pusharglistnoret 1 ...................... <me>
  [ 73] extcall 28 .............................. return me
  [ 75] pop 1 ................................... end case
  [ 77] ret
end

on isOKToAttach me, aSpriteType, aSpriteNum
  [  0] getparam 1 .............................. <aSpriteType>
  [  2] peek 0 .................................. case aSpriteType of
  [  4] pushsymb 335 ............................ <#graphic>
  [  7] eq
  [  8] jmpifz [ 44] ............................ (case) #graphic:
  [ 11] pop 1
  [ 13] pushsymb 336 ............................ <#field>
  [ 16] pusharglist 1 ........................... <[#field]>
  [ 18] pushlist ................................ <[#field]>
  [ 19] getparam 2 .............................. <aSpriteNum>
  [ 21] pusharglist 1 ........................... <aSpriteNum>
  [ 23] extcall 261 ............................. <sprite(aSpriteNum)>
  [ 26] getchainedprop 32 ....................... <sprite(aSpriteNum).member>
  [ 28] getobjprop 319 .......................... <sprite(aSpriteNum).member.type>
  [ 31] pusharglist 2 ........................... <[#field], sprite(aSpriteNum).member.type>
  [ 33] extcall 57 .............................. <getPos([#field], sprite(aSpriteNum).member.type)>
  [ 35] pushzero ................................ <0>
  [ 36] nteq .................................... <getPos([#field], sprite(aSpriteNum).member.type) <> 0>
  [ 37] pusharglistnoret 1 ...................... <getPos([#field], sprite(aSpriteNum).member.type) <> 0>
  [ 39] extcall 28 .............................. return getPos([#field], sprite(aSpriteNum).member.type) <> 0
  [ 41] jmp [ 59]
  [ 44] peek 0
  [ 46] pushsymb 26 ............................. <#script>
  [ 48] eq
  [ 49] jmpifz [ 59] ............................ (case) #script:
  [ 52] pop 1
  [ 54] pushzero ................................ <0>
  [ 55] pusharglistnoret 1 ...................... <0>
  [ 57] extcall 28 .............................. return 0
  [ 59] pop 1 ................................... end case
  [ 61] ret
end

on getPropertyDescriptionList me
  [  0] getmovieprop 339 ........................ <the currentSpriteNum>
  [  3] not ..................................... <not (the currentSpriteNum)>
  [  4] jmpifz [  8] ............................ if not (the currentSpriteNum) then
  [  7] ret ..................................... exit
  [  8] pushsymb 264 ............................ <#myname>
  [ 11] pushsymb 340 ............................ <#comment>
  [ 14] pushcons 69 ............................. <"Name of this list">
  [ 16] pushsymb 341 ............................ <#format>
  [ 19] pushsymb 96 ............................. <#string>
  [ 21] pushsymb 342 ............................ <#default>
  [ 24] pushcons 70 ............................. <"List ">
  [ 26] getmovieprop 339 ........................ <the currentSpriteNum>
  [ 29] joinstr ................................. <"List " & the currentSpriteNum>
  [ 30] pusharglist 6 ........................... <[#comment: "Name of this list", #format: #string, #default: "List " & the currentSpriteNum]>
  [ 32] pushproplist ............................ <[#comment: "Name of this list", #format: #string, #default: "List " & the currentSpriteNum]>
  [ 33] pushsymb 211 ............................ <#myContent>
  [ 35] pushsymb 340 ............................ <#comment>
  [ 38] pushcons 71 ............................. <"Contents of list">
  [ 40] pushsymb 341 ............................ <#format>
  [ 43] pushsymb 96 ............................. <#string>
  [ 45] pushsymb 343 ............................ <#range>
  [ 48] pushcons 55 ............................. <"Current contents of the field">
  [ 50] pushcons 56 ............................. <"Markers in this movie">
  [ 52] pushcons 57 ............................. <"Movies with the same path name">
  [ 54] pusharglist 3 ........................... <["Current contents of the field", "Markers in this movie", "Movies with the same path name"]>
  [ 56] pushlist ................................ <["Current contents of the field", "Markers in this movie", "Movies with the same path name"]>
  [ 57] pushsymb 342 ............................ <#default>
  [ 60] pushcons 55 ............................. <"Current contents of the field">
  [ 62] pusharglist 8 ........................... <[#comment: "Contents of list", #format: #string, #range: ["Current contents of the field", "Markers in this movie", "Movies with the same path name"], #default: "Current contents of the field"]>
  [ 64] pushproplist ............................ <[#comment: "Contents of list", #format: #string, #range: ["Current contents of the field", "Markers in this movie", "Movies with the same path name"], #default: "Current contents of the field"]>
  [ 65] pushsymb 213 ............................ <#myAction>
  [ 67] pushsymb 340 ............................ <#comment>
  [ 70] pushcons 72 ............................. <"Purpose of list">
  [ 72] pushsymb 341 ............................ <#format>
  [ 75] pushsymb 96 ............................. <#string>
  [ 77] pushsymb 343 ............................ <#range>
  [ 80] pushcons 58 ............................. <"Select:  return the selected item when called">
  [ 82] pushcons 59 ............................. <"Execute: go movie | go marker | do selectedLine">
  [ 84] pusharglist 2 ........................... <["Select:  return the selected item when called", "Execute: go movie | go marker | do selectedLine"]>
  [ 86] pushlist ................................ <["Select:  return the selected item when called", "Execute: go movie | go marker | do selectedLine"]>
  [ 87] pushsymb 342 ............................ <#default>
  [ 90] pushcons 58 ............................. <"Select:  return the selected item when called">
  [ 92] pusharglist 8 ........................... <[#comment: "Purpose of list", #format: #string, #range: ["Select:  return the selected item when called", "Execute: go movie | go marker | do selectedLine"], #default: "Select:  return the selected item when called"]>
  [ 94] pushproplist ............................ <[#comment: "Purpose of list", #format: #string, #range: ["Select:  return the selected item when called", "Execute: go movie | go marker | do selectedLine"], #default: "Select:  return the selected item when called"]>
  [ 95] pushsymb 221 ............................ <#myCheckmark>
  [ 97] pushsymb 340 ............................ <#comment>
  [100] pushcons 73 ............................. <"Checkmark to indicate currently selected item">
  [102] pushsymb 341 ............................ <#format>
  [105] pushsymb 96 ............................. <#string>
  [107] pushsymb 342 ............................ <#default>
  [110] pushcons 74 ............................. <">">
  [112] pusharglist 6 ........................... <[#comment: "Checkmark to indicate currently selected item", #format: #string, #default: ">"]>
  [114] pushproplist ............................ <[#comment: "Checkmark to indicate currently selected item", #format: #string, #default: ">"]>
  [115] pushsymb 281 ............................ <#myStandard>
  [118] pushsymb 340 ............................ <#comment>
  [121] pushcons 75 ............................. <"Use standard style?">
  [123] pushsymb 341 ............................ <#format>
  [126] pushsymb 344 ............................ <#boolean>
  [129] pushsymb 342 ............................ <#default>
  [132] pushint8 1 .............................. <1>
  [134] pusharglist 6 ........................... <[#comment: "Use standard style?", #format: #boolean, #default: 1]>
  [136] pushproplist ............................ <[#comment: "Use standard style?", #format: #boolean, #default: 1]>
  [137] pusharglist 10 .......................... <[#myname: [#comment: "Name of this list", #format: #string, #default: "List " & the currentSpriteNum], #myContent: [#comment: "Contents of list", #format: #string, #range: ["Current contents of the field", "Markers in this movie", "Movies with the same path name"], #default: "Current contents of the field"], #myAction: [#comment: "Purpose of list", #format: #string, #range: ["Select:  return the selected item when called", "Execute: go movie | go marker | do selectedLine"], #default: "Select:  return the selected item when called"], #myCheckmark: [#comment: "Checkmark to indicate currently selected item", #format: #string, #default: ">"], #myStandard: [#comment: "Use standard style?", #format: #boolean, #default: 1]]>
  [139] pushproplist ............................ <[#myname: [#comment: "Name of this list", #format: #string, #default: "List " & the currentSpriteNum], #myContent: [#comment: "Contents of list", #format: #string, #range: ["Current contents of the field", "Markers in this movie", "Movies with the same path name"], #default: "Current contents of the field"], #myAction: [#comment: "Purpose of list", #format: #string, #range: ["Select:  return the selected item when called", "Execute: go movie | go marker | do selectedLine"], #default: "Select:  return the selected item when called"], #myCheckmark: [#comment: "Checkmark to indicate currently selected item", #format: #string, #default: ">"], #myStandard: [#comment: "Use standard style?", #format: #boolean, #default: 1]]>
  [140] pusharglistnoret 1 ...................... <[#myname: [#comment: "Name of this list", #format: #string, #default: "List " & the currentSpriteNum], #myContent: [#comment: "Contents of list", #format: #string, #range: ["Current contents of the field", "Markers in this movie", "Movies with the same path name"], #default: "Current contents of the field"], #myAction: [#comment: "Purpose of list", #format: #string, #range: ["Select:  return the selected item when called", "Execute: go movie | go marker | do selectedLine"], #default: "Select:  return the selected item when called"], #myCheckmark: [#comment: "Checkmark to indicate currently selected item", #format: #string, #default: ">"], #myStandard: [#comment: "Use standard style?", #format: #boolean, #default: 1]]>
  [142] extcall 28 .............................. return [#myname: [#comment: "Name of this list", #format: #string, #default: "List " & the currentSpriteNum], #myContent: [#comment: "Contents of list", #format: #string, #range: ["Current contents of the field", "Markers in this movie", "Movies with the same path name"], #default: "Current contents of the field"], #myAction: [#comment: "Purpose of list", #format: #string, #range: ["Select:  return the selected item when called", "Execute: go movie | go marker | do selectedLine"], #default: "Select:  return the selected item when called"], #myCheckmark: [#comment: "Checkmark to indicate currently selected item", #format: #string, #default: ">"], #myStandard: [#comment: "Use standard style?", #format: #boolean, #default: 1]]
  [144] ret
end
